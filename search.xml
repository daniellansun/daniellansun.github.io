<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024年为何依然选择Groovy</title>
    <url>/2024/05/23/2024%E5%B9%B4%E4%B8%BA%E4%BD%95%E4%BE%9D%E7%84%B6%E9%80%89%E6%8B%A9Groovy/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Groovy语言在简洁性、灵活性和功能特性等方面具备独特优势，使其在2024年依然是开发者值得掌握的编程语言。<span id="more"></span></p>
<h2 id="主要优势"><a href="#主要优势" class="headerlink" title="主要优势"></a>主要优势</h2><ol>
<li><p><strong>扩展方法</strong>：</p>
<ul>
<li>Groovy允许在现有类上添加新的方法，而无需修改类本身或使用工具类。它提供了将近2000个扩展方法，涵盖了约150个类。</li>
</ul>
</li>
<li><p><strong>操作符重载</strong>：</p>
<ul>
<li>Groovy支持操作符重载，使得代码更加简洁。例如，可以使用数学运算符直接进行矩阵计算和大整数计算。</li>
</ul>
</li>
<li><p><strong>AST转换</strong>：</p>
<ul>
<li>Abstract Syntax Tree（AST）转换允许在编译时自动生成代码，减少了手动编写的重复性代码。这些转换包括不可变类、排序、加锁等。</li>
</ul>
</li>
<li><p><strong>语法简洁</strong>：</p>
<ul>
<li>Groovy的语法比Java更简洁。例如，通过尾递归优化和闭包，可以实现更高效和简洁的递归算法。</li>
</ul>
</li>
<li><p><strong>动态特性</strong>：</p>
<ul>
<li>Groovy支持在运行时动态添加方法和属性，提供了更灵活的编程模型。动态特性包括方法缺失处理、闭包构建器模式等。</li>
</ul>
</li>
<li><p><strong>强大的OO和函数式编程特性</strong>：</p>
<ul>
<li>Groovy不仅支持面向对象编程，还支持函数式编程特性，如尾递归和记忆化（memoization）。此外，Traits特性提供了类似于Java接口的默认方法，但功能更强大。</li>
</ul>
</li>
<li><p><strong>脚本化支持</strong>：</p>
<ul>
<li>Groovy支持脚本化编程，使其在构建和自动化任务中非常有用。它的脚本化功能比Java更灵活和易用。</li>
</ul>
</li>
<li><p><strong>与Java的互操作性</strong>：</p>
<ul>
<li>Groovy几乎完全兼容Java，可以无缝调用Java库和API，同时提供了对Java特性的扩展，如Record类型、Switch表达式等。</li>
</ul>
</li>
<li><p><strong>设计模式和样板代码减少</strong>：</p>
<ul>
<li>Groovy通过内置的设计模式和AST转换减少了大量样板代码，使开发者能更专注于业务逻辑。</li>
</ul>
</li>
</ol>
<h2 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h2><h3 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h3><div class="pdfobject-container" data-target="/2024/05/23/2024年为何依然选择Groovy/WhyGroovy2024_PaulKing_EverythingOpen_Apr2024.pdf" data-height="500px"></div>

]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Groovy优势</tag>
        <tag>扩展方法</tag>
        <tag>操作符重载</tag>
        <tag>AST转换</tag>
      </tags>
  </entry>
  <entry>
    <title>GINQ应用之Git统计</title>
    <url>/2024/05/30/GINQ%E5%BA%94%E7%94%A8%E4%B9%8BGit%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>GINQ是Groovy 4主要新特性之一，在之前的《<a href="/2021/05/03/Groovy-4%E4%B9%8B%E6%96%B0%E7%89%B9%E6%80%A7GINQ%E9%A2%84%E8%A7%88/" title="Groovy 4之新特性GINQ预览">Groovy 4之新特性GINQ预览</a>》中已经介绍过其原理和用法。而本文将通过一个Groovy脚本来展示GINQ在实战中的应用。<span id="more"></span></p>
<h2 id="脚本功能及原理"><a href="#脚本功能及原理" class="headerlink" title="脚本功能及原理"></a>脚本功能及原理</h2><p>统计Git仓库中每个贡献者的提交情况，处理过程如下：</p>
<ul>
<li>通过Git命令生成Git log文件</li>
<li>通过Regex对Git log文件内容进行解析</li>
<li>通过GINQ对解析后的数据进行统计</li>
</ul>
<h2 id="脚本中GINQ应用摘要"><a href="#脚本中GINQ应用摘要" class="headerlink" title="脚本中GINQ应用摘要"></a>脚本中GINQ应用摘要</h2><p>以email作为分组条件，统计每个贡献者的commit数量、文件数量、代码添加行数、代码删除行数，最后按照commit数量降序、贡献者名字升序进行排序</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from c <span class="keyword">in</span> commitInfoList</span><br><span class="line">    groupby c.email</span><br><span class="line">    orderby count() <span class="keyword">in</span> desc, max(c.author)</span><br><span class="line">    select max(c.author) <span class="keyword">as</span> author, c.email, count() <span class="keyword">as</span> sumCommits, sum(c.fileChanged) <span class="keyword">as</span> sumFilesChanged, sum(c.insertions) <span class="keyword">as</span> sumInsertions, sum(c.deletions) <span class="keyword">as</span> sumDeletions</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print result</span><br></pre></td></tr></table></figure>

<h2 id="统计结果示例：Apache-Groovy项目"><a href="#统计结果示例：Apache-Groovy项目" class="headerlink" title="统计结果示例：Apache Groovy项目"></a>统计结果示例：Apache Groovy项目</h2><p>注：该统计结果截止到2024年6月2日</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+---------------------------------+---------------------------------------+------------+-----------------+---------------+--------------+</span><br><span class="line">| author                          | email                                 | sumCommits | sumFilesChanged | sumInsertions | sumDeletions |</span><br><span class="line">+---------------------------------+---------------------------------------+------------+-----------------+---------------+--------------+</span><br><span class="line">| paulk-asert                     | paulk@asert.com.au                    | 5449       | 23763           | 411512        | 382831       |</span><br><span class="line">| sunlan                          | sunlan@apache.org                     | 2277       | 7345            | 196842        | 62597        |</span><br><span class="line">| Jochen Theodorou                | blackdrag@gmx.org                     | 1662       | 4138            | 96950         | 58303        |</span><br><span class="line">| Cedric Champeau                 | cedric.champeau@gmail.com             | 1616       | 8515            | 193314        | 75953        |</span><br><span class="line">| Eric Milles                     | eric.milles@thomsonreuters.com        | 1467       | 4307            | 159350        | 129709       |</span><br><span class="line">| James Strachan                  | jastrachan@mac.com                    | 1024       | 6027            | 186845        | 115967       |</span><br><span class="line">| Guillaume Laforge               | glaforge@gmail.com                    | 708        | 2256            | 56188         | 32206        |</span><br><span class="line">| pascalschumacher                | pascalschumacher@gmx.net              | 614        | 1765            | 13293         | 20000        |</span><br><span class="line">| Roshan Dawrani                  | roshandawrani@gmail.com               | 310        | 688             | 11074         | 1730         |</span><br><span class="line">| Jason Dillon                    | jason.dillon@gmail.com                | 305        | 824             | 15545         | 7863         |</span><br><span class="line">| Danno Ferrin                    | danno.ferrin@shemnon.com              | 301        | 1183            | 36094         | 15206        |</span><br><span class="line">| Alex Tkachman                   | alex.tkachman@gmail.com               | 284        | 3405            | 278612        | 21153        |</span><br><span class="line">| John Wilson                     | tug@wilson.co.uk                      | 230        | 605             | 22793         | 13472        |</span><br><span class="line">| John Wagenleitner               | jwagenleitner@apache.org              | 185        | 592             | 12495         | 5909         |</span><br><span class="line">| danielsun1106                   | realbluesun@hotmail.com               | 176        | 354             | 7376          | 1833         |</span><br><span class="line">| Jeremy Rayner                   | jeremy.rayner@gmail.com               | 158        | 654             | 46619         | 21760        |</span><br><span class="line">| Cedric Champeau                 | cchampeau@apache.org                  | 156        | 1398            | 11480         | 7512         |</span><br><span class="line">| Thibault Kruse                  | kruset@in.tum.de                      | 134        | 616             | 11882         | 5425         |</span><br><span class="line">| Russel Winder                   | russel@russel.org.uk                  | 132        | 287             | 9058          | 19868        |</span><br><span class="line">| Dierk Koenig                    | dierk.koenig@canoo.com                | 116        | 392             | 9716          | 2430         |</span><br><span class="line">| aalmiray                        | aalmiray@gmail.com                    | 104        | 245             | 9580          | 1159         |</span><br><span class="line">| Pilho Kim                       | phkim@cluecom.co.kr                   | 103        | 325             | 10676         | 3231         |</span><br><span class="line">| Sam Pullara                     | sam@sampullara.com                    | 99         | 251             | 6164          | 3369         |</span><br><span class="line">| Seagull                         | xSeagullx@gmail.com                   | 86         | 322             | 5745          | 1535         |</span><br><span class="line">| Boc McWhirter                   | bob@codehaus.org                      | 79         | 237             | 4054          | 1209         |</span><br><span class="line">| Graeme Rocher                   | grocher@vmware.com                    | 67         | 2088            | 6833          | 228960       |</span><br><span class="line">| Andre Steingress                | me@andresteingress.com                | 65         | 414             | 21365         | 3123         |</span><br><span class="line">| Jim White                       | jim@pagesmiths.com                    | 63         | 121             | 2382          | 552          |</span><br><span class="line">| Peter Niederwieser              | pniederw@gmail.com                    | 56         | 205             | 5067          | 2446         |</span><br><span class="line">| Andrey Bloschetsov              | bloschetsov@gmail.com                 | 50         | 137             | 8110          | 927          |</span><br><span class="line">| Christian Stein                 | sormuras@gmx.de                       | 49         | 150             | 4554          | 2306         |</span><br><span class="line">| Martin C. Martin                | martin@martincmartin.com              | 49         | 77              | 1105          | 670          |</span><br><span class="line">| Remko Popma                     | remkop@yahoo.com                      | 42         | 68              | 4369          | 654          |</span><br><span class="line">| peter                           | peter@jetbrains.com                   | 42         | 115             | 2410          | 664          |</span><br><span class="line">| Thibault Kruse                  | thibault.kruse@gmx.de                 | 40         | 95              | 1723          | 1003         |</span><br><span class="line">| Marc Guillemot                  | mguillemot@yahoo.fr                   | 38         | 401             | 2254          | 1133         |</span><br><span class="line">| Zongle Wang                     | wangzongler@gmail.com                 | 36         | 177             | 687           | 686          |</span><br><span class="line">| Shil Sinha                      | shils@apache.org                      | 35         | 66              | 942           | 210          |</span><br><span class="line">| Keegan Witt                     | keeganwitt@gmail.com                  | 34         | 87              | 1365          | 777          |</span><br><span class="line">| Shil Sinha                      | shil.sinha@gmail.com                  | 32         | 79              | 1315          | 138          |</span><br><span class="line">| Tim Yates                       | tyates@picr.man.ac.uk                 | 29         | 50              | 1432          | 326          |</span><br><span class="line">| Chris Poirier                   | cpoirier@gmail.com                    | 28         | 164             | 17483         | 8169         |</span><br><span class="line">| John Wagenleitner               | john.wagenleitner@gmail.com           | 28         | 63              | 1568          | 1106         |</span><br><span class="line">| Jim White                       | james.paul.white@gmail.com            | 27         | 68              | 1289          | 233          |</span><br><span class="line">| Joachim Baumann                 | joachim.baumann@xinaris.de            | 27         | 41              | 801           | 137          |</span><br><span class="line">| Alexandru Popescu               | alexander.popescu@gmail.com           | 24         | 47              | 1454          | 252          |</span><br><span class="line">| Yu Kobayashi                    | yukoba@accelart.jp                    | 24         | 55              | 4392          | 270          |</span><br><span class="line">| Martin Kempf                    | mkempf@hsr.ch                         | 22         | 50              | 1844          | 458          |</span><br><span class="line">| Bing Ran                        | bran@ccniit.com                       | 21         | 102             | 9197          | 568          |</span><br><span class="line">| Bo Zhang                        | zhangbodut@gmail.com                  | 21         | 78              | 389           | 282          |</span><br><span class="line">| Sergey Egorov                   | bsideup@gmail.com                     | 21         | 71              | 2375          | 1233         |</span><br><span class="line">| Alan Green                      | alan.green@cardboard.nu               | 20         | 31              | 894           | 429          |</span><br><span class="line">| Thom Nichols                    | tmnichols@gmail.com                   | 19         | 39              | 1221          | 391          |</span><br><span class="line">| Frank Pavageau                  | fpavageau@ekino.com                   | 17         | 39              | 777           | 201          |</span><br><span class="line">| Guillaume Alleon                | guillaume.alleon@gmail.com            | 16         | 25              | 1050          | 279          |</span><br><span class="line">| Esko Toivonen                   | esko.toivonen@tuni.fi                 | 13         | 22              | 448           | 93           |</span><br><span class="line">| Jeff Brown                      | jeff@jeffandbetsy.net                 | 13         | 19              | 360           | 43           |</span><br><span class="line">| Steve Goetze                    | goetze@dovetail.com                   | 13         | 51              | 764           | 242          |</span><br><span class="line">| javaboon                        | richard.m.hightower@gmail.com         | 13         | 142             | 11864         | 3307         |</span><br><span class="line">| kruset                          | tibokruse@googlemail.com              | 13         | 17              | 128           | 85           |</span><br><span class="line">| Marc Wrobel                     | marc.wrobel@gmail.com                 | 12         | 269             | 875           | 872          |</span><br><span class="line">| Paolo Di Tommaso                | paolo.ditommaso@gmail.com             | 12         | 27              | 2774          | 199          |</span><br><span class="line">| Peter Ledbrook                  | peter@cacoethes.co.uk                 | 12         | 13              | 220           | 25           |</span><br><span class="line">| graemerocher                    | graeme.rocher@gmail.com               | 12         | 23              | 881           | 218          |</span><br><span class="line">| jnorthr                         | james.b.northrop@googlemail.com       | 11         | 60              | 2483          | 44           |</span><br><span class="line">| John Stump                      | johnstump2@yahoo.com                  | 10         | 18              | 397           | 27           |</span><br><span class="line">| Kenneth Endfinger               | kaendfinger@gmail.com                 | 10         | 13              | 20            | 18           |</span><br><span class="line">| mattisonchao                    | mattisonchao@gmail.com                | 10         | 83              | 363           | 548          |</span><br><span class="line">| Bertrand Delacretaz             | bdelacretaz@apache.org                | 9          | 10              | 272           | 50           |</span><br><span class="line">| Christoph Frick                 | rid@ofnir.net                         | 9          | 10              | 34            | 14           |</span><br><span class="line">| Craig Andrews                   | candrews@integralblue.com             | 9          | 15              | 362           | 121          |</span><br><span class="line">| Marcin Erdmann                  | erdi84@gmail.com                      | 9          | 43              | 689           | 132          |</span><br><span class="line">| Michael Schuenck                | michaelss@gmail.com                   | 9          | 15              | 428           | 108          |</span><br><span class="line">| Tomek Janiszewski               | janiszt@gmail.com                     | 9          | 19              | 97            | 73           |</span><br><span class="line">| Jacopo Cappellato               | jacopo.cappellato@gmail.com           | 8          | 9               | 118           | 200          |</span><br><span class="line">| John Rose                       | john.r.rose@oracle.com                | 8          | 24              | 8999          | 8371         |</span><br><span class="line">| Larry Jacobson                  | 4larryj@gmail.com                     | 8          | 14              | 150           | 48           |</span><br><span class="line">| Martin Hauner                   | martin.hauner@gmx.net                 | 8          | 13              | 280           | 77           |</span><br><span class="line">| Matias Bjarland                 | matias@iteego.com                     | 8          | 18              | 2590          | 206          |</span><br><span class="line">| Sergei Egorov                   | sergei.egorov@zeroturnaround.com      | 8          | 43              | 1546          | 682          |</span><br><span class="line">| Tobia Conforto                  | tobia.conforto@gmail.com              | 8          | 17              | 161           | 145          |</span><br><span class="line">| Zohar Melamed                   | zohar.melamed@gmail.com               | 8          | 9               | 204           | 185          |</span><br><span class="line">| zhangbo                         | zhangbo@nanchao.org                   | 8          | 12              | 518           | 198          |</span><br><span class="line">| Aseem Bansal                    | anshbansal@users.noreply.github.com   | 7          | 7               | 12            | 6            |</span><br><span class="line">| Hein Meling                     | hein.meling@uis.no                    | 7          | 16              | 136           | 26           |</span><br><span class="line">| Iiro Kiviluoma                  | iirokiviluoma@outlook.com             | 7          | 12              | 208           | 74           |</span><br><span class="line">| JBrownVisualSpection            | jbrown@visualspection.com             | 7          | 7               | 8             | 8            |</span><br><span class="line">| jameskleeh                      | james.kleeh@gmail.com                 | 7          | 26              | 236           | 51           |</span><br><span class="line">| Alex Golub                      | a12thu@gmail.com                      | 6          | 8               | 68            | 61           |</span><br><span class="line">| Andrew Taylor                   | ataylor@redtoad.ca                    | 6          | 14              | 572           | 6            |</span><br><span class="line">| Eerik Voimanen                  | eerik.voimanen@tuni.fi                | 6          | 7               | 96            | 49           |</span><br><span class="line">| Jake Gage                       | jake.gage@gmail.com                   | 6          | 16              | 224           | 13           |</span><br><span class="line">| Scott Stirling                  | scottstirling@gmail.com               | 6          | 8               | 1049          | 982          |</span><br><span class="line">| Thibault Kruse                  | thibault.kruse@comsysto.com           | 6          | 13              | 248           | 85           |</span><br><span class="line">| Yasuharu Nakano                 | ynak@jggug.org                        | 6          | 14              | 508           | 521          |</span><br><span class="line">| rusty                           | russellsanborn@gmail.com              | 6          | 8               | 158           | 150          |</span><br><span class="line">| Adrian Nistor                   | nistor1@illinois.edu                  | 5          | 5               | 11            | 7            |</span><br><span class="line">| Andrew Eisenberg                | aeisenberg@vmware.com                 | 5          | 8               | 64            | 15           |</span><br><span class="line">| Aseem Bansal                    | aseembansal@live.com                  | 5          | 6               | 17            | 13           |</span><br><span class="line">| Esteban                         | eginez@gmail.com                      | 5          | 10              | 200           | 20           |</span><br><span class="line">| Franck Rasolo                   | franck.rasolo@gmail.com               | 5          | 13              | 229           | 163          |</span><br><span class="line">| Jeff Scott Brown                | jbrown@gopivotal.com                  | 5          | 6               | 9             | 8            |</span><br><span class="line">| Joe Wolf                        | joewolf@gmail.com                     | 5          | 26              | 4665          | 167          |</span><br><span class="line">| Kent                            | kifs@hib.no                           | 5          | 15              | 624           | 48           |</span><br><span class="line">| Kirill Vlasov                   | kirill.vlasov@devfactory.com          | 5          | 59              | 95            | 99           |</span><br><span class="line">| Marc Paquette                   | marcpa@mac.com                        | 5          | 6               | 204           | 6            |</span><br><span class="line">| Masato Nagai                    | me@masatonagai.com                    | 5          | 15              | 265           | 45           |</span><br><span class="line">| MoonFruit                       | dkmoonfruit@gmail.com                 | 5          | 8               | 143           | 20           |</span><br><span class="line">| Sam Harwell                     | sam@tunnelvisionlabs.com              | 5          | 5               | 23            | 17           |</span><br><span class="line">| Sandip Chitale                  | sandipchitale@gmail.com               | 5          | 7               | 250           | 39           |</span><br><span class="line">| Sargis Harutyunyan              | sargis@webbfontaine.am                | 5          | 8               | 162           | 53           |</span><br><span class="line">| alexey.afanasiev                | Alexey.Afanasiev@jetbrains.com        | 5          | 10              | 362           | 11           |</span><br><span class="line">| jbaruch                         | jbaruch@jfrog.com                     | 5          | 6               | 88            | 24           |</span><br><span class="line">| musketyr                        | vladimir@orany.cz                     | 5          | 8               | 337           | 16           |</span><br><span class="line">| Andrew Hamilton                 | andrew.hamil10@gmail.com              | 4          | 5               | 43            | 44           |</span><br><span class="line">| Baruch Sadogursky               | jbaruchs@gmail.com                    | 4          | 4               | 51            | 6            |</span><br><span class="line">| Damage Control                  | support@codehaus.org                  | 4          | 4               | 4             | 4            |</span><br><span class="line">| Davyd Kohut                     | expexes@gmail.com                     | 4          | 8               | 229           | 133          |</span><br><span class="line">| Hubert Klein Ikkink             | h.kleinikkink@gmail.com               | 4          | 27              | 797           | 46           |</span><br><span class="line">| James Laverack                  | james@jameslaverack.com               | 4          | 5               | 26            | 17           |</span><br><span class="line">| Jan Lukavsky                    | je.ik@seznam.cz                       | 4          | 9               | 48            | 25           |</span><br><span class="line">| Jason Schindler                 | schindlerj@objectcomputing.com        | 4          | 4               | 72            | 5            |</span><br><span class="line">| Jason Winnebeck                 | gillius@gillius.org                   | 4          | 4               | 22            | 9            |</span><br><span class="line">| Jochen Kemnade                  | jochen.kemnade@eddyson.de             | 4          | 7               | 66            | 3            |</span><br><span class="line">| Lari Hotari                     | lhotari@gopivotal.com                 | 4          | 4               | 50            | 26           |</span><br><span class="line">| Maksym Stavytskyi               | stavytskyi@gmail.com                  | 4          | 8               | 219           | 12           |</span><br><span class="line">| Michal Kordas                   | kordas.michal@gmail.com               | 4          | 14              | 20            | 20           |</span><br><span class="line">| Sean Gilligan                   | sean@msgilligan.com                   | 4          | 4               | 30            | 3            |</span><br><span class="line">| Simon Tost                      | simon.tost@tngtech.com                | 4          | 6               | 271           | 63           |</span><br><span class="line">| Stephane Talbot                 | Stephane.Talbot@univ-savoie.fr        | 4          | 19              | 268           | 7            |</span><br><span class="line">| UEHARA Junji                    | uehaj@jggug.org                       | 4          | 4               | 48            | 5            |</span><br><span class="line">| Vladimir Vivien                 | vladimir.vivien@gmail.com             | 4          | 55              | 6520          | 1137         |</span><br><span class="line">| antoaravinth                    | anto.aravinth.cse@gmail.com           | 4          | 9               | 222           | 3            |</span><br><span class="line">| j                               | kimchichef@users.noreply.github.com   | 4          | 4               | 4             | 4            |</span><br><span class="line">| timyates                        | tim.yates@gmail.com                   | 4          | 6               | 24            | 6            |</span><br><span class="line">| Andrew Eisenberg                | andrew@eisenberg.as                   | 3          | 8               | 345           | 35           |</span><br><span class="line">| Bloshchetsov Andrey Evgenyevich | a.bloshchetsov@tcsbank.ru             | 3          | 3               | 279           | 156          |</span><br><span class="line">| Chris Earle                     | chris.earle@elasticsearch.com         | 3          | 7               | 46            | 8            |</span><br><span class="line">| Christiaan ten Klooster         | ckl@dacelo.nl                         | 3          | 6               | 235           | 7            |</span><br><span class="line">| Jacob Aae Mikkelsen             | github@grydeske.dk                    | 3          | 7               | 55            | 3            |</span><br><span class="line">| Johannes Link                   | business@johanneslink.net             | 3          | 31              | 3622          | 15           |</span><br><span class="line">| Jorge                           | jagedn@gmail.com                      | 3          | 3               | 24            | 25           |</span><br><span class="line">| Luke Daley                      | ld@ldaley.com                         | 3          | 18              | 110           | 10           |</span><br><span class="line">| Luke Kirby                      | luke@kirbylovell.com                  | 3          | 5               | 145           | 10           |</span><br><span class="line">| Mariusz Wasak                   | mawasak@gmail.com                     | 3          | 4               | 57            | 5            |</span><br><span class="line">| Michael Kutz                    | michael.kutz@rewe-digital.com         | 3          | 3               | 3             | 3            |</span><br><span class="line">| Otto Vayrynen                   | otto.vayrynen@tuni.fi                 | 3          | 6               | 36            | 11           |</span><br><span class="line">| Rich Freedman                   | richfreedman@gmail.com                | 3          | 3               | 0             | 3            |</span><br><span class="line">| Richard Hightower               | richardhightower@gmail.com            | 3          | 32              | 1006          | 1043         |</span><br><span class="line">| Stephane Maldini                | smaldini@doc4web.com                  | 3          | 5               | 79            | 4            |</span><br><span class="line">| anto_belgin                     | anto_belgin@blrjpt251d.ad.infosys.com | 3          | 6               | 350           | 22           |</span><br><span class="line">| dkhamitov                       | khamitov.dm@gmail.com                 | 3          | 18              | 339           | 105          |</span><br><span class="line">| energister                      | energister@users.noreply.github.com   | 3          | 3               | 9             | 8            |</span><br><span class="line">| fmamud                          | trovatti@gmail.com                    | 3          | 4               | 11            | 2            |</span><br><span class="line">| hbaykuslar                      | hakanbaykuslar@gmail.com              | 3          | 6               | 11            | 6            |</span><br><span class="line">| rive                            | zhang1369077810@sina.com              | 3          | 3               | 5             | 5            |</span><br><span class="line">| shalecraig                      | shalecraig@gmail.com                  | 3          | 3               | 11            | 3            |</span><br><span class="line">| AarjavP                         | AarjavP@users.noreply.github.com      | 2          | 2               | 2             | 2            |</span><br><span class="line">| Anand upadhyay                  | anand.upadhyay.consultant@nielsen.com | 2          | 3               | 22            | 1            |</span><br><span class="line">| Andrew Reitz                    | aj.reitz@gmail.com                    | 2          | 2               | 6             | 6            |</span><br><span class="line">| Arsen Babakhanyan               | arsen.ba@gmail.com                    | 2          | 2               | 14            | 12           |</span><br><span class="line">| Bobby Warner                    | bobbywarner@gmail.com                 | 2          | 4               | 61            | 32           |</span><br><span class="line">| Christoph Frick                 | cf@ofnir.net                          | 2          | 4               | 156           | 3            |</span><br><span class="line">| Damir Murat                     | damir.murat.git@gmail.com             | 2          | 4               | 254           | 4            |</span><br><span class="line">| Dan Allen                       | dan.j.allen@gmail.com                 | 2          | 2               | 28            | 19           |</span><br><span class="line">| Dario Arena                     | dario.arena87@gmail.com               | 2          | 2               | 177           | 657          |</span><br><span class="line">| Dimitry Polivaev                | dpolivaev@gmx.de                      | 2          | 9               | 424           | 17           |</span><br><span class="line">| Dominik Przybysz                | dpr@touk.pl                           | 2          | 6               | 237           | 1            |</span><br><span class="line">| Edgar Rios Navarro              | edgar.gs@gmail.com                    | 2          | 2               | 16            | 16           |</span><br><span class="line">| Gvaneyck                        | gvaneyck@riotgames.com                | 2          | 3               | 83            | 70           |</span><br><span class="line">| Jan Sykora                      | jsykora@vendavo.com                   | 2          | 4               | 13            | 6            |</span><br><span class="line">| Jeff Sheets                     | jeffsheets@gmail.com                  | 2          | 3               | 249           | 42           |</span><br><span class="line">| John Hurst                      | john.b.hurst@gmail.com                | 2          | 18              | 598           | 30           |</span><br><span class="line">| John Tompkins                   | tompkins.jt@gmail.com                 | 2          | 11              | 22            | 25           |</span><br><span class="line">| Kamil Szymanski                 | kamil.szymanski.dev@gmail.com         | 2          | 10              | 17            | 17           |</span><br><span class="line">| Karsten Tinnefeld               | k.tinnefeld@gmail.com                 | 2          | 3               | 11            | 4            |</span><br><span class="line">| Kasper Nielsen                  | kasper@codehaus.org                   | 2          | 3               | 232           | 27           |</span><br><span class="line">| Kenyon Ralph                    | quic_kralph@quicinc.com               | 2          | 5               | 13            | 13           |</span><br><span class="line">| Kishore Kumar M V               | kishorekumar@huawei.com               | 2          | 2               | 4             | 3            |</span><br><span class="line">| Konstantin Yegupov              | kyegupov4@gmail.com                   | 2          | 2               | 3             | 1            |</span><br><span class="line">| Larry Battle                    | larry.battle.tech@gmail.com           | 2          | 2               | 2             | 1            |</span><br><span class="line">| Marc Bogaerts                   | marcbogaerts@telenet.be               | 2          | 6               | 137           | 8            |</span><br><span class="line">| Marcus Berndt                   | marcus.berndt@data-experts.de         | 2          | 2               | 49            | 37           |</span><br><span class="line">| Mario Garcia                    | mario.ggar@gmail.com                  | 2          | 16              | 2125          | 4            |</span><br><span class="line">| Martin Stockhammer              | m.stockhammer@web.de                  | 2          | 2               | 110           | 1            |</span><br><span class="line">| Matyrobbrt                      | matyrobbrt@gmail.com                  | 2          | 5               | 87            | 22           |</span><br><span class="line">| Nelson Osacky                   | nosacky@gradle.com                    | 2          | 4               | 35            | 8            |</span><br><span class="line">| Nick Grealy                     | nickgrealy@gmail.com                  | 2          | 18              | 288           | 15           |</span><br><span class="line">| Nicolas Vuillamy                | nicolas.vuillamy@gmail.com            | 2          | 2               | 3             | 3            |</span><br><span class="line">| Pierre-Nicolas Clauss           | pinicarus@protonmail.com              | 2          | 2               | 3             | 3            |</span><br><span class="line">| Rahul Somasunderam              | rahul.som@gmail.com                   | 2          | 4               | 39            | 26           |</span><br><span class="line">| Ruben Laguna                    | ruben.laguna@gmail.com                | 2          | 4               | 201           | 10           |</span><br><span class="line">| Sargis Harutyunyan              | sargis.harutyunyan@webbfontaine.com   | 2          | 4               | 72            | 1            |</span><br><span class="line">| Sargis Harutyunyan              | armsargis@gmail.com                   | 2          | 3               | 35            | 3            |</span><br><span class="line">| Sergio Delgado                  | sdelgado@gradle.com                   | 2          | 13              | 87            | 99           |</span><br><span class="line">| Stephen Magill                  | stephen.magill@gmail.com              | 2          | 2               | 39            | 0            |</span><br><span class="line">| Thomas Reifenberger             | tom-mi@users.noreply.github.com       | 2          | 3               | 119           | 0            |</span><br><span class="line">| Tiago Fernandez                 | tiago.fernandez@gmail.com             | 2          | 4               | 79            | 36           |</span><br><span class="line">| VasylTretiakov                  | vasyl.tretiakov@gmail.com             | 2          | 2               | 3             | 3            |</span><br><span class="line">| Yuri Schimke                    | yuri.schimke@gmail.com                | 2          | 13              | 300           | 93           |</span><br><span class="line">| davydotcom                      | davydotcom@gmail.com                  | 2          | 2               | 43            | 10           |</span><br><span class="line">| gyd_lhw                         | 834921748@qq.com                      | 2          | 3               | 95            | 1            |</span><br><span class="line">| hdfg159                         | hdfg159@126.com                       | 2          | 5               | 56            | 35           |</span><br><span class="line">| qxo                             | qxodream@gmail.com                    | 2          | 2               | 3             | 2            |</span><br><span class="line">| saschaklein                     | info@aklein.org                       | 2          | 2               | 31            | 18           |</span><br><span class="line">| seanjreilly                     | seanjreilly@gmail.com                 | 2          | 3               | 3             | 3            |</span><br><span class="line">| suoyi123wang                    | 1512721306@qq.com                     | 2          | 2               | 36            | 4            |</span><br><span class="line">| tttao                           | bigtao@gmail.com                      | 2          | 5               | 175           | 90           |</span><br><span class="line">| upcrob                          | rupcraft@gmail.com                    | 2          | 2               | 4             | 5            |</span><br><span class="line">| yuhengfdada                     | 877751954@qq.com                      | 2          | 3               | 35            | 2            |</span><br><span class="line">| Abraham Grief                   | abraham.grief@gmail.com               | 1          | 3               | 57            | 67           |</span><br><span class="line">| Adam Davis                      | ada.m.d.a.v@gmail.com                 | 1          | 4               | 29            | 2            |</span><br><span class="line">| Adam Lewandowski                | adam.lewandowski@plxis.com            | 1          | 1               | 2             | 1            |</span><br><span class="line">| Adithyan K                      | adi.k.dev@gmail.com                   | 1          | 2               | 850           | 0            |</span><br><span class="line">| Adrian Nistor                   | user@codehaus.org                     | 1          | 7               | 9             | 0            |</span><br><span class="line">| Alan Thompson                   | thompson2526@gmail.com                | 1          | 3               | 17            | 3            |</span><br><span class="line">| Alar Aule                       | alar.aule@smit.ee                     | 1          | 3               | 139           | 6            |</span><br><span class="line">| Alberto Ingenito                | alberto.ing@gmail.com                 | 1          | 1               | 14            | 5            |</span><br><span class="line">| Aleksei                         | egorov.aleksey@gmail.com              | 1          | 1               | 1             | 1            |</span><br><span class="line">| Alessio Stalla                  | alessiostalla@gmail.com               | 1          | 1               | 8             | 2            |</span><br><span class="line">| Alex Sherwin                    | alex-sherwin@users.noreply.github.com | 1          | 1               | 1             | 1            |</span><br><span class="line">| Alex Spurling                   | alexspurling@gmail.com                | 1          | 1               | 2             | 6            |</span><br><span class="line">| Alexander Stohr                 | alexander.stohr@gmx.de                | 1          | 1               | 2             | 2            |</span><br><span class="line">| Alykoff                         | galll-al@yandex.kz                    | 1          | 1               | 1             | 1            |</span><br><span class="line">| Amir Naghibi                    | amir.naghibi@visier.com               | 1          | 4               | 4             | 4            |</span><br><span class="line">| Anders D. Johnson               | adjohnson916@users.noreply.github.com | 1          | 1               | 3             | 3            |</span><br><span class="line">| Anders Wallgren                 | awallgren@cloudbees.com               | 1          | 2               | 33            | 6            |</span><br><span class="line">| Andrej Balles                   | netzbewohner@gmail.com                | 1          | 1               | 1             | 1            |</span><br><span class="line">| Andrej Vano                     | avano@redhat.com                      | 1          | 1               | 2             | 2            |</span><br><span class="line">| Andres Almiray                  | andres@gradle.com                     | 1          | 3               | 50            | 3            |</span><br><span class="line">| Andrew Bayer                    | andrew.bayer@gmail.com                | 1          | 1               | 4             | 0            |</span><br><span class="line">| Andrew Reitz                    | andrew.reitz@smartthings.com          | 1          | 1               | 1             | 1            |</span><br><span class="line">| Andrey Bozhko                   | andybozhko@gmail.com                  | 1          | 1               | 2             | 2            |</span><br><span class="line">| Andy Hamilton                   | andyh@slalom.com                      | 1          | 1               | 9             | 0            |</span><br><span class="line">| Andy Wilkinson                  | awilkinson@pivotal.io                 | 1          | 2               | 36            | 1            |</span><br><span class="line">| Antoine Kapps                   | antoine.kapps@zas.admin.ch            | 1          | 2               | 9             | 6            |</span><br><span class="line">| Antoine Kapps                   | antoine.kapps@orange.fr               | 1          | 2               | 55            | 2            |</span><br><span class="line">| Arthur Milchior                 | arthur@milchior.fr                    | 1          | 1               | 1             | 1            |</span><br><span class="line">| Aslak Hellesoy                  | aslak.hellesoy@gmail.com              | 1          | 2               | 10            | 4            |</span><br><span class="line">| Axel                            | axmf@users.noreply.github.com         | 1          | 1               | 1             | 1            |</span><br><span class="line">| Bartlomiej Stefanski            | bst@touk.pl                           | 1          | 1               | 1             | 1            |</span><br><span class="line">| Benjamin Graf                   | benjamin.graf@gmx.net                 | 1          | 1               | 11            | 0            |</span><br><span class="line">| Benjamin Porter                 | FreedomBen@users.noreply.github.com   | 1          | 3               | 3             | 3            |</span><br><span class="line">| Benjamin Roe                    | benjamin.roe@cirrus.com               | 1          | 3               | 35            | 14           |</span><br><span class="line">| Bin Wang                        | binwang.developer@outlook.com         | 1          | 1               | 1             | 1            |</span><br><span class="line">| Brad Beck                       | bradley.beck@gmail.com                | 1          | 1               | 1             | 2            |</span><br><span class="line">| Bruno Casali                    | brunoocasali@gmail.com                | 1          | 1               | 1             | 1            |</span><br><span class="line">| Carsten Lenz                    | carsten.lenz@aoe.com                  | 1          | 2               | 39            | 17           |</span><br><span class="line">| Cheryl Hughey                   | cherylhughey@hotmail.com              | 1          | 1               | 1             | 1            |</span><br><span class="line">| Christopher Smith               | chrylis@gmail.com                     | 1          | 1               | 4             | 3            |</span><br><span class="line">| Clay Johnson                    | cjohnson@gradle.com                   | 1          | 12              | 59            | 186          |</span><br><span class="line">| Colin Harrington                | colin.harrington@gmail.com            | 1          | 2               | 5             | 2            |</span><br><span class="line">| Colm O hEigeartaigh             | coheigea@apache.org                   | 1          | 1               | 1             | 0            |</span><br><span class="line">| DJBen                           | lsh32768@gmail.com                    | 1          | 4               | 64            | 0            |</span><br><span class="line">| Daniel Spilker                  | daniel.spilker@coremedia.com          | 1          | 2               | 26            | 3            |</span><br><span class="line">| Daniel Spilker                  | mail@daniel-spilker.com               | 1          | 2               | 26            | 4            |</span><br><span class="line">| Daniil Ovchinnikov              | daniil.ovchinnikov@jetbrains.com      | 1          | 2               | 18            | 1            |</span><br><span class="line">| Dariusz Kobylarz                | darek.kobylarz@gmail.com              | 1          | 1               | 78            | 6            |</span><br><span class="line">| David Avenante                  | altus34@gmail.com                     | 1          | 1               | 1             | 1            |</span><br><span class="line">| David Eisner                    | deisner@gmail.com                     | 1          | 1               | 2             | 2            |</span><br><span class="line">| David Nahodil                   | dnahodil@utas.edu.au                  | 1          | 1               | 3             | 2            |</span><br><span class="line">| David Pursehouse                | david.pursehouse@gmail.com            | 1          | 1               | 1             | 1            |</span><br><span class="line">| David Tiselius                  | david.tiselius@gmail.com              | 1          | 1               | 1             | 1            |</span><br><span class="line">| Dean Brettle                    | dean@brettle.com                      | 1          | 1               | 2             | 2            |</span><br><span class="line">| Dimitar Dimitrov                | ddimitrov@github                      | 1          | 2               | 78            | 0            |</span><br><span class="line">| Dipanjan Bhowmik                | dipanjan.bhowmik@lexmark.com          | 1          | 2               | 73            | 1            |</span><br><span class="line">| Dirk Weber                      | Dirk.Weber1@gmx.de                    | 1          | 2               | 24            | 0            |</span><br><span class="line">| Dmitry                          | devbyside@gmail.com                   | 1          | 1               | 3             | 3            |</span><br><span class="line">| Dmitry Andreychuk               | and.dmitry@gmail.com                  | 1          | 2               | 27            | 0            |</span><br><span class="line">| Dominik Fay                     | dominik.fay@gmx.de                    | 1          | 1               | 1             | 1            |</span><br><span class="line">| Dominik Fay                     | DarthPumpkin@users.noreply.github.com | 1          | 1               | 1             | 1            |</span><br><span class="line">| Dylan Cali                      | calid1984@gmail.com                   | 1          | 8               | 105           | 122          |</span><br><span class="line">| Emilian Bold                    | emi@apache.org                        | 1          | 6               | 170           | 2            |</span><br><span class="line">| Emmanuel Bourg                  | ebourg@apache.org                     | 1          | 6               | 10            | 4            |</span><br><span class="line">| Eric Dahl                       | eric.c.dahl@gmail.com                 | 1          | 1               | 3             | 3            |</span><br><span class="line">| Eric Helgeson                   | eric@sproutary.com                    | 1          | 1               | 66            | 0            |</span><br><span class="line">| Erich Schubert                  | kno10@users.noreply.github.com        | 1          | 1               | 1             | 1            |</span><br><span class="line">| Eugene Kliuchnikov              | eustas.ru@gmail.com                   | 1          | 1               | 1             | 1            |</span><br><span class="line">| Fabio de Matos                  | fdematos@despegar.com                 | 1          | 2               | 31            | 15           |</span><br><span class="line">| Fiouz                           | fiouzy@gmail.com                      | 1          | 2               | 47            | 0            |</span><br><span class="line">| Gary Clayburg                   | gclaybur@comcast.net                  | 1          | 2               | 33            | 9            |</span><br><span class="line">| Geoffrey Alexandre              | pygmyalex@gmail.com                   | 1          | 1               | 1             | 1            |</span><br><span class="line">| Grant McConnaughey              | grantmcconnaughey@gmail.com           | 1          | 2               | 412           | 16           |</span><br><span class="line">| Harsh Gupta                     | harshgupta1992@hotmail.com            | 1          | 4               | 5             | 5            |</span><br><span class="line">| Henrique Mota                   | henriquebrasileiro@zgsolucoes.com.br  | 1          | 3               | 115           | 62           |</span><br><span class="line">| Hugues Lerebours                | h.lerebours@criteo.com                | 1          | 3               | 17            | 14           |</span><br><span class="line">| Ingo Hoffmann                   | Ingo@Hoffmann.cx                      | 1          | 5               | 28            | 9            |</span><br><span class="line">| JBaruch                         | jbaruch@sadogursky.com                | 1          | 2               | 33            | 0            |</span><br><span class="line">| Jacob Aae Mikkelsen             | jam@nineconsult.dk                    | 1          | 1               | 1             | 1            |</span><br><span class="line">| Jacob Aae Mikkelsen             | jam@cardlay.com                       | 1          | 2               | 42            | 1            |</span><br><span class="line">| Jakub Wilk                      | jwilk@jwilk.net                       | 1          | 1               | 1             | 1            |</span><br><span class="line">| James Williams                  | james.l.williams@gmail.com            | 1          | 1               | 2             | 2            |</span><br><span class="line">| Jamie Echlin                    | jechlin@adaptavist.com                | 1          | 1               | 22            | 0            |</span><br><span class="line">| Jan                             | janmonterrubio@gmail.com              | 1          | 1               | 1             | 1            |</span><br><span class="line">| Jason Plurad                    | pluradj@apache.org                    | 1          | 1               | 9             | 1            |</span><br><span class="line">| Jason Schindler                 | jason@types.codes                     | 1          | 2               | 35            | 5            |</span><br><span class="line">| Jeffrey Adamson                 | jwadamson@us.ibm.com                  | 1          | 1               | 10            | 10           |</span><br><span class="line">| Jenn Strater                    | jenn.strater@gmail.com                | 1          | 8               | 23            | 23           |</span><br><span class="line">| Jennifer Strater                | jennifer.strater@zenjob.com           | 1          | 1               | 1             | 1            |</span><br><span class="line">| Jess Sightler                   | jesse.sightler@gmail.com              | 1          | 1               | 4             | 0            |</span><br><span class="line">| Jesse Glick                     | jglick@cloudbees.com                  | 1          | 4               | 79            | 1            |</span><br><span class="line">| Jesse Glick                     | jglick@apache.org                     | 1          | 3               | 43            | 1            |</span><br><span class="line">| Jochen Berger                   | fooberger@gmail.com                   | 1          | 1               | 10            | 0            |</span><br><span class="line">| John Engelman                   | john.r.engelman@gmail.com             | 1          | 1               | 14            | 4            |</span><br><span class="line">| John Engelman                   | john.engelman@target.com              | 1          | 2               | 11            | 3            |</span><br><span class="line">| John J. Allison                 | jja@sinequanon.net                    | 1          | 1               | 2             | 2            |</span><br><span class="line">| John Mercier                    | moaxcp@gmail.com                      | 1          | 3               | 33            | 1            |</span><br><span class="line">| Johnny Wey                      | johnnywey@gmail.com                   | 1          | 1               | 9             | 6            |</span><br><span class="line">| Jon Schneider                   | jkschneider@gmail.com                 | 1          | 1               | 25            | 18           |</span><br><span class="line">| Jonatas Emidio                  | jonatasemidio@gmail.com               | 1          | 1               | 12            | 0            |</span><br><span class="line">| Joona                           | joona.makipernaa@gmail.com            | 1          | 1               | 18            | 0            |</span><br><span class="line">| Jose M. Alonso M                | josemalonsom@yahoo.es                 | 1          | 1               | 1             | 1            |</span><br><span class="line">| JuanDavi Evora Hanggi           | jdevora@users.noreply.github.com      | 1          | 1               | 2             | 2            |</span><br><span class="line">| Justin Chu                      | justinchuch@gmail.com                 | 1          | 2               | 68            | 1            |</span><br><span class="line">| Kamil Jedrzejuk                 | kamil.jedrzejuk@gmail.com             | 1          | 1               | 4             | 1            |</span><br><span class="line">| Karel Piwko                     | kpiwko@redhat.com                     | 1          | 1               | 1             | 1            |</span><br><span class="line">| Keith Suderman                  | suderman@cs.vassar.edu                | 1          | 1               | 2             | 4            |</span><br><span class="line">| Ken Geis                        | geis.ken@gmail.com                    | 1          | 1               | 2             | 2            |</span><br><span class="line">| Kenneth Kousen                  | ken.kousen@kousenit.com               | 1          | 2               | 10            | 2            |</span><br><span class="line">| Kohsuke Kawaguchi               | kk@kohsuke.org                        | 1          | 3               | 183           | 0            |</span><br><span class="line">| Kris Marwood                    | kris@krismarwood.com                  | 1          | 1               | 1             | 1            |</span><br><span class="line">| Lari Hotari                     | lari.hotari@sagire.fi                 | 1          | 1               | 54            | 23           |</span><br><span class="line">| Larry J                         | larry@jalcyon.com                     | 1          | 1               | 5             | 4            |</span><br><span class="line">| Leo Gertsenshteyn               | leoger@gmail.com                      | 1          | 1               | 1             | 1            |</span><br><span class="line">| Leo Jiapei Lin                  | peipei.520@hotmail.com                | 1          | 1               | 1             | 1            |</span><br><span class="line">| Logan Gorence                   | loganjohngorence@gmail.com            | 1          | 1               | 1             | 1            |</span><br><span class="line">| Manuel Prinz                    | manuel@pinguinkiste.de                | 1          | 1               | 4             | 0            |</span><br><span class="line">| Marcin Grzejszczak              | marcin@grzejszczak.pl                 | 1          | 2               | 84            | 6            |</span><br><span class="line">| Marcin Zajaczkowski             | szpak@users.sourceforge.net           | 1          | 2               | 31            | 4            |</span><br><span class="line">| Marco-Antonio Avallone          | marco.avallone@itds.ch                | 1          | 3               | 58            | 5            |</span><br><span class="line">| Martin Gansler                  | martin.gansler@codecentric.de         | 1          | 1               | 1             | 1            |</span><br><span class="line">| Martin Nonnenmacher             | martin.nonnenmacher@gmail.com         | 1          | 1               | 12            | 11           |</span><br><span class="line">| Marty Neal                      | marty.neal@oracle.com                 | 1          | 2               | 15            | 2            |</span><br><span class="line">| Mathieu Bruyen                  | code@mais-h.eu                        | 1          | 1               | 7             | 1            |</span><br><span class="line">| Matt Whipple                    | mwhipple@brightcove.com               | 1          | 1               | 7             | 1            |</span><br><span class="line">| Matt Whipple                    | matt@mattwhipple.com                  | 1          | 1               | 8             | 8            |</span><br><span class="line">| Mene                            | arndt@menedev.de                      | 1          | 3               | 161           | 2            |</span><br><span class="line">| Michael Scovetta                | michael.scovetta@gmail.com            | 1          | 1               | 53            | 53           |</span><br><span class="line">| Michal Mally                    | michal@mally.pl                       | 1          | 2               | 11            | 0            |</span><br><span class="line">| Miro Bezjak                     | bezjak.miro@gmail.com                 | 1          | 1               | 2             | 2            |</span><br><span class="line">| Natacha Gabbamonte              | ngabbamonte@palantir.com              | 1          | 1               | 23            | 1            |</span><br><span class="line">| Nathan Mische                   | nmische@gmail.com                     | 1          | 2               | 178           | 13           |</span><br><span class="line">| Nes Cohen                       | nes@muse.dev                          | 1          | 1               | 1             | 1            |</span><br><span class="line">| Nicolas Guillaumin              | nicolas.guillaumin@zetcom.com         | 1          | 6               | 96            | 2            |</span><br><span class="line">| Nikolay Chugunov                | nikchugunov@github.com                | 1          | 3               | 221           | 0            |</span><br><span class="line">| Octavia Togami                  | otogami@gradle.com                    | 1          | 2               | 19            | 4            |</span><br><span class="line">| Okko P                          | xaaria@protonmail.com                 | 1          | 1               | 15            | 1            |</span><br><span class="line">| Olivier Croquette               | ocroquette@free.fr                    | 1          | 1               | 1             | 1            |</span><br><span class="line">| Paint_Ninja                     | PaintNinja@users.noreply.github.com   | 1          | 2               | 4             | 4            |</span><br><span class="line">| Patrice Clement                 | monsieurp@gentoo.org                  | 1          | 1               | 9             | 6            |</span><br><span class="line">| Patrik Torn                     | patrik.torn@vincit.fi                 | 1          | 1               | 6             | 1            |</span><br><span class="line">| Paul Bakker                     | paul.bakker.nl@gmail.com              | 1          | 1               | 0             | 1            |</span><br><span class="line">| Paul Merlin                     | paulmerlin@apache.org                 | 1          | 1               | 11            | 0            |</span><br><span class="line">| Paul-Julien Vauthier            | pj82491@gmail.com                     | 1          | 4               | 81            | 9            |</span><br><span class="line">| Paulo Poiati                    | paulogpoiati@gmail.com                | 1          | 2               | 47            | 1            |</span><br><span class="line">| Persi                           | the_hammer1@freenet.de                | 1          | 2               | 37            | 37           |</span><br><span class="line">| Peter Swire                     | swirepe@gmail.com                     | 1          | 1               | 2             | 1            |</span><br><span class="line">| Pierre Pinon                    | pierre@pinon1.fr                      | 1          | 3               | 6             | 6            |</span><br><span class="line">| Radovan Synek                   | rsynek@redhat.com                     | 1          | 1               | 1             | 1            |</span><br><span class="line">| Randall S. Becker               | rsbecker@nexbridge.com                | 1          | 2               | 10            | 2            |</span><br><span class="line">| Rob Upcraft                     | upcrob@server.fake                    | 1          | 1               | 1             | 1            |</span><br><span class="line">| Robert Stupp                    | snazy@snazy.de                        | 1          | 1               | 1             | 1            |</span><br><span class="line">| Roded Bahat                     | rodedb@gmail.com                      | 1          | 2               | 23            | 4            |</span><br><span class="line">| Rohan Ranade                    | rohan@ranades.net                     | 1          | 1               | 3             | 3            |</span><br><span class="line">| Roman Shaposhnik                | rvs@apache.org                        | 1          | 1               | 50            | 0            |</span><br><span class="line">| Ryan Tandy                      | ryan@nardis.ca                        | 1          | 2               | 76            | 0            |</span><br><span class="line">| Sagar Sane                      | sagar2217@gmail.com                   | 1          | 1               | 1             | 1            |</span><br><span class="line">| Sean Flanigan                   | sflaniga@redhat.com                   | 1          | 1               | 4             | 1            |</span><br><span class="line">| Sergey Khudyakov                | sergeyhudyakov@gmail.com              | 1          | 1               | 1             | 1            |</span><br><span class="line">| Shruti Gupta                    | shrgupt@microsoft.com                 | 1          | 2               | 16            | 6            |</span><br><span class="line">| Spencer Allain                  | spencer_allain@yahoo.com              | 1          | 2               | 625           | 0            |</span><br><span class="line">| Stefan Armbruster               | stefan@armbruster-it.de               | 1          | 2               | 47            | 9            |</span><br><span class="line">| Stefan Oehme                    | st.oehme@gmail.com                    | 1          | 8               | 39            | 7            |</span><br><span class="line">| Stephen Mallette                | spmva@genoprime.com                   | 1          | 2               | 12            | 1            |</span><br><span class="line">| Suk-Hyun Cho                    | choey2k5@gmail.com                    | 1          | 2               | 23            | 1            |</span><br><span class="line">| Szymon Stepniak                 | szymon.stepniak@gmail.com             | 1          | 2               | 64            | 0            |</span><br><span class="line">| T45K                            | tasktas9@gmail.com                    | 1          | 1               | 1             | 1            |</span><br><span class="line">| Taher Ghaleb                    | taher.a.ghaleb@gmail.com              | 1          | 4               | 34            | 26           |</span><br><span class="line">| Ten000hours                     | 502250806@qq.com                      | 1          | 10              | 113           | 100          |</span><br><span class="line">| Thomas M. DuBuisson             | tommd@musedev.io                      | 1          | 1               | 1             | 0            |</span><br><span class="line">| Tobias Gesellchen               | tobias@gesellix.de                    | 1          | 3               | 71            | 7            |</span><br><span class="line">| Tobias Schulte                  | tobias.schulte@gliderpilot.de         | 1          | 1               | 1             | 1            |</span><br><span class="line">| Urs Keller                      | urs.keller@lightspeedhq.com           | 1          | 2               | 11            | 1            |</span><br><span class="line">| Venkatesh-Prasad Ranganath      | rvprasad@ksu.edu                      | 1          | 2               | 9             | 1            |</span><br><span class="line">| Vihang D                        | vihang007@gmail.com                   | 1          | 1               | 1             | 1            |</span><br><span class="line">| Vihang D                        | vihang.dudhalkar@gmail.com            | 1          | 1               | 5             | 3            |</span><br><span class="line">| Wil Selwood                     | wselwood@ijento.com                   | 1          | 2               | 12            | 1            |</span><br><span class="line">| Xavier DETANT                   | xavier.detant@gmail.com               | 1          | 1               | 2             | 2            |</span><br><span class="line">| Yannick Welsch                  | yannick@elastic.co                    | 1          | 1               | 4             | 2            |</span><br><span class="line">| Yih Tsern                       | sim_yihtsern@yahoo.com                | 1          | 1               | 23            | 0            |</span><br><span class="line">| Youri Ackx                      | youri@ackx.net                        | 1          | 1               | 13            | 2            |</span><br><span class="line">| aalku                           | aalku7@gmail.com                      | 1          | 1               | 1             | 1            |</span><br><span class="line">| aalmiray                        | aalmiray@yahoo.com                    | 1          | 1               | 1             | 1            |</span><br><span class="line">| albert-github                   | albert.tests@gmail.com                | 1          | 1               | 1             | 1            |</span><br><span class="line">| amadarain                       | t.f.octo@gmail.com                    | 1          | 1               | 1             | 1            |</span><br><span class="line">| anand raman                     | araman@gmail.com                      | 1          | 1               | 2             | 0            |</span><br><span class="line">| anujbhatia                      | anujbhatia@gmail.com                  | 1          | 1               | 1             | 1            |</span><br><span class="line">| asa                             | asa@entimo.de                         | 1          | 1               | 10            | 0            |</span><br><span class="line">| asutosh936                      | asutosh.pandya@hotmail.com            | 1          | 1               | 1             | 1            |</span><br><span class="line">| belkaram                        | ramunas.belkauskas@gmail.com          | 1          | 1               | 8             | 0            |</span><br><span class="line">| bpaulin                         | bpaulin@BOB_PAULIN                    | 1          | 2               | 10            | 1            |</span><br><span class="line">| caocao485                       | cao_cao485@qq.com                     | 1          | 1               | 1             | 1            |</span><br><span class="line">| caoli5288                       | caoli5288@gmail.com                   | 1          | 1               | 55            | 6            |</span><br><span class="line">| chenyahui                       | cyhone@qq.com                         | 1          | 1               | 1             | 1            |</span><br><span class="line">| daniel.sun                      | daniel.sun@onebank.com.cn             | 1          | 1               | 1             | 1            |</span><br><span class="line">| davidmichaelkarr                | davidmichaelkarr@gmail.com            | 1          | 1               | 5             | 5            |</span><br><span class="line">| emesx                           | emesx@emesx                           | 1          | 1               | 1             | 1            |</span><br><span class="line">| fi stach                        | fistach@gmail.com                     | 1          | 1               | 1             | 1            |</span><br><span class="line">| fintelia                        | fintelia@gmail.com                    | 1          | 1               | 3             | 2            |</span><br><span class="line">| fschn                           | fschnabel007@gmail.com                | 1          | 4               | 2174          | 661          |</span><br><span class="line">| guangwu                         | guoguangwu@magic-shield.com           | 1          | 1               | 1             | 1            |</span><br><span class="line">| jfranco                         | jorge.franco.leza@gmail.com           | 1          | 2               | 11            | 1            |</span><br><span class="line">| kapoormanish                    | manishkapoor1989@gmail.com            | 1          | 1               | 1             | 1            |</span><br><span class="line">| kawatea                         | yukibbb03@gmail.com                   | 1          | 2               | 27            | 13           |</span><br><span class="line">| kotomoto                        | jkotor@gmail.com                      | 1          | 1               | 1             | 1            |</span><br><span class="line">| liningrui                       | liningrui@baidu.com                   | 1          | 1               | 5             | 0            |</span><br><span class="line">| maciekwiso                      | maciekwiso@o2.pl                      | 1          | 1               | 1             | 1            |</span><br><span class="line">| manouti                         | manouti@users.noreply.github.com      | 1          | 1               | 10            | 14           |</span><br><span class="line">| noamt                           | noam@10ne.org                         | 1          | 3               | 83            | 5            |</span><br><span class="line">| paul-bjorkstrand                | paul.bjorkstrand@gmail.com            | 1          | 1               | 1             | 1            |</span><br><span class="line">| pavel                           | pavel@192.168.0.6                     | 1          | 1               | 10            | 4            |</span><br><span class="line">| rohit kumar                     | rohit.kumar@tothenew.com              | 1          | 1               | 1             | 1            |</span><br><span class="line">| sszuev                          | sss.zuev@gmail.com                    | 1          | 3               | 28            | 1            |</span><br><span class="line">| tison                           | wander4096@gmail.com                  | 1          | 1               | 24            | 23           |</span><br><span class="line">| tmoore                          | tmoore@spatial.ca                     | 1          | 1               | 48            | 0            |</span><br><span class="line">| wangjianan                      | wangjianan@huawei.com                 | 1          | 1               | 1             | 1            |</span><br><span class="line">| zhangt2333                      | zhangt2333@gmail.com                  | 1          | 12              | 13            | 13           |</span><br><span class="line">| zhao fan                        | 359130530@qq.com                      | 1          | 1               | 1             | 1            |</span><br><span class="line">+---------------------------------+---------------------------------------+------------+-----------------+---------------+--------------+</span><br><span class="line"></span><br><span class="line">+---------------------------------+---------------------------------------+------------+-----------------+---------------+--------------+</span><br><span class="line">| author                          | email                                 | sumCommits | sumFilesChanged | sumInsertions | sumDeletions |</span><br><span class="line">+---------------------------------+---------------------------------------+------------+-----------------+---------------+--------------+</span><br><span class="line">|                                 |                                       | 19744      | 78146           | 2014767       | 1296490      |</span><br><span class="line">+---------------------------------+---------------------------------------+------------+-----------------+---------------+--------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>以下是完整的脚本内容，最新版本可访问GitHub获取（<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGxhbnN1bi9naXQtc3RhdGlzdGljcw==">git-statistics<i class="fa fa-external-link-alt"></i></span>）</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Grab</span>(group=<span class="string">&#x27;com.belerweb&#x27;</span>, module=<span class="string">&#x27;pinyin4j&#x27;</span>, version=<span class="string">&#x27;2.5.1&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.PinyinHelper</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&#x27;yyyyMMdd&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> sinceDate</span><br><span class="line"><span class="keyword">def</span> untilDate</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    sinceDate = sdf.parse(args[<span class="number">0</span>])</span><br><span class="line">    untilDate = sdf.parse(args[<span class="number">1</span>])</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    println <span class="string">&quot;Usage: groovy GitStats.groovy &lt;begin(yyyyMMdd)&gt; &lt;end(yyyyMMdd)&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> generateGitLog(Date since, Date until) &#123;</span><br><span class="line">    <span class="keyword">def</span> sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&#x27;yyyy-MM-dd&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> gitLogFile = File.createTempFile(<span class="string">&quot;gitstats_$&#123;System.nanoTime()&#125;&quot;</span>, <span class="string">&quot;.log&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> cmdLine = <span class="string">&quot;&quot;&quot;cmd /c &quot;git fetch &amp;&amp; git log --shortstat --date-order --pretty=format:%s###%aN###%ae###%ai --since=$&#123;sdf.format(since)&#125; --until=$&#123;sdf.format(until)&#125; &gt; $&#123;gitLogFile.absolutePath&#125;&quot; &quot;&quot;&quot;</span></span><br><span class="line">    cmdLine.execute().waitFor()</span><br><span class="line">    <span class="keyword">return</span> gitLogFile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> toPinyin = &#123; String str -&gt;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder()</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> <span class="attr">c :</span> str) &#123;</span><br><span class="line">        String[] py = PinyinHelper.toHanyuPinyinStringArray(c)</span><br><span class="line">        sb &lt;&lt; (py ? py[<span class="number">0</span>] : c)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> gitLogFile = generateGitLog(sinceDate, untilDate)</span><br><span class="line"><span class="keyword">def</span> content = gitLogFile.getText(<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> commitInfoList = content.findAll(<span class="regexp">/(?s)([^\r\n]+?)###([a-zA-Z_.\d\u4e00-\u9fa5- ]+)###([a-zA-Z_.\d-]+@[a-zA-Z_.\d-]+)###(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125; [+-]\d&#123;4&#125;)\r?\n\s+(\d+)\s+file(?:s)? changed(?:,\s+(\d+)\s+insertion(?:s)?\([+]\))?(?:,\s+(\d+)\s+deletion(?:s)?\(-\))?\r?\n/</span>) &#123; _0, _1, _2, _3, _4, _5, _6, _7 -&gt;    </span><br><span class="line">    <span class="keyword">def</span> commitInfo = <span class="keyword">new</span> CommitInfo(</span><br><span class="line">        <span class="symbol">subject:</span> _1,</span><br><span class="line">        <span class="symbol">author:</span> toPinyin(_2),</span><br><span class="line">        <span class="symbol">email:</span> _3,</span><br><span class="line">        <span class="symbol">date:</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">&#x27;yyyy-MM-dd HH:mm:ss Z&#x27;</span>).parse(_4),</span><br><span class="line">        <span class="symbol">fileChanged:</span> (_5?:<span class="string">&#x27;0&#x27;</span>) <span class="keyword">as</span> <span class="type">int</span>,</span><br><span class="line">        <span class="symbol">insertions:</span> (_6?:<span class="string">&#x27;0&#x27;</span>) <span class="keyword">as</span> <span class="type">int</span>,</span><br><span class="line">        <span class="symbol">deletions:</span> (_7?:<span class="string">&#x27;0&#x27;</span>) <span class="keyword">as</span> <span class="type">int</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> commitInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from c <span class="keyword">in</span> commitInfoList</span><br><span class="line">    groupby c.email</span><br><span class="line">    orderby count() <span class="keyword">in</span> desc, max(c.author)</span><br><span class="line">    select max(c.author) <span class="keyword">as</span> author, c.email, count() <span class="keyword">as</span> sumCommits, sum(c.fileChanged) <span class="keyword">as</span> sumFilesChanged, sum(c.insertions) <span class="keyword">as</span> sumInsertions, sum(c.deletions) <span class="keyword">as</span> sumDeletions</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> mal = GQ &#123;</span><br><span class="line">    from r <span class="keyword">in</span> result</span><br><span class="line">    select max(r.author.length()) <span class="keyword">as</span> malOfAuthor, max(r.email.length()) <span class="keyword">as</span> malOfEmail</span><br><span class="line">&#125;.stream().findFirst().get()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> sumResult = GQ &#123;</span><br><span class="line">    from r <span class="keyword">in</span> result</span><br><span class="line">    select <span class="string">&#x27; &#x27;</span> * mal.malOfAuthor <span class="keyword">as</span> author, <span class="string">&#x27; &#x27;</span> * mal.malOfEmail <span class="keyword">as</span> email, sum(r.sumCommits) <span class="keyword">as</span> sumCommits, sum(r.sumFilesChanged) <span class="keyword">as</span> sumFilesChanged, sum(r.sumInsertions) <span class="keyword">as</span> sumInsertions, sum(r.sumDeletions) <span class="keyword">as</span> sumDeletions</span><br><span class="line">&#125;</span><br><span class="line">print sumResult</span><br><span class="line"></span><br><span class="line"><span class="meta">@groovy</span>.transform.ToString</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommitInfo</span> &#123;</span><br><span class="line">    String subject</span><br><span class="line">    String author</span><br><span class="line">    String email</span><br><span class="line">    Date date</span><br><span class="line">    <span class="type">int</span> fileChanged</span><br><span class="line">    <span class="type">int</span> insertions</span><br><span class="line">    <span class="type">int</span> deletions</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>GINQ</tag>
        <tag>Git</tag>
        <tag>统计</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy 3之Native Lambda及Method/Constructor Reference</title>
    <url>/2018/02/18/Groovy-3%E4%B9%8BNative-Lambda%E5%8F%8AMethod-Constructor-Reference/</url>
    <content><![CDATA[<p>&emsp;&emsp;虽然Groovy 3 Alpha版本就已经支持Java 8的Lambda、Method Reference以及Constructor Reference全部语法，但从bytecode层面来看，其本质上依然是Closure及Method Pointer，换言之，只是语法上的兼容，但性能上并没有提升。而Groovy的性能常为人诟病，所以Groovy 2引入了静态编译，其编译出来的bytecode跟Java的相近，所以其性能逼近Java。为了延续静态编译的性能优势，Groovy核心团队决定在Groovy 3 Beta版本中实现Lambda、Method Reference以及Constructor Reference的Native版本，其语法不变，但生成的bytecode与Java的相似，这便是”Native”的由来。<span id="more"></span></p>
<p>&emsp;&emsp;Groovy 3编译器会借助静态编译的类型推断以及Java 7引入的invokedynamic指令生成与Java相似的bytecode，但如果类型推断失败，那么生成的bytecode则与Closure及Method Pointer相同。需要注意一点的是，除了性能方面的考量，在设计和实现Native Lambda时还考虑了尽可能保留Closure既有特性，为此每个Native Lambda都会对应一个内部类实例，性能方面稍有影响。另外，从DSL角度来看，Native Lambda无法引用自身，也无法引用外层Native Lambda实例，所以Native Lambda相对Closure而言不太适合应用于DSL的实现。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>&emsp;&emsp;下面提供一个简单例子来展示Native Lambda、Native Method Reference以及Native Constructor Reference的bytecode</p>
<h4 id="NativeDemo的Groovy源码"><a href="#NativeDemo的Groovy源码" class="headerlink" title="NativeDemo的Groovy源码"></a>NativeDemo的Groovy源码</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.transform.CompileStatic</span><br><span class="line"></span><br><span class="line"><span class="meta">@CompileStatic</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NativeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">def</span> nativeLambda() &#123;</span><br><span class="line">       [<span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>].stream().map(e -&gt; Math.abs(e)).toList()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">def</span> nativeMethodReference() &#123;</span><br><span class="line">       [<span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>].stream().map(<span class="attr">Math:</span>:abs).toList()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">def</span> nativeConstructorReference() &#123;</span><br><span class="line">       [<span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>].stream().toArray(Integer[]::<span class="keyword">new</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="NativeDemo的bytecode"><a href="#NativeDemo的bytecode" class="headerlink" title="NativeDemo的bytecode"></a>NativeDemo的bytecode</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class version 52.0 (52)</span></span><br><span class="line"><span class="comment">// access flags 0x21</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativeDemo</span> <span class="keyword">implements</span> <span class="title class_">groovy</span>/lang/GroovyObject &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compiled from: script1617499378185.groovy</span></span><br><span class="line">  <span class="comment">// access flags 0x11</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> INNERCLASS NativeDemo$_nativeLambda_lambda1 <span class="literal">null</span> _nativeLambda_lambda1</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x100A</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> synthetic Lorg/codehaus/groovy/reflection/ClassInfo; $staticClassInfo</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1089</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">transient</span> synthetic Z __$stMC</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1082</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> synthetic Lgroovy/lang/MetaClass; metaClass</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> &lt;init&gt;()V</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Generated;()</span><br><span class="line">   L0</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL NativeDemo.$getStaticMetaClass ()Lgroovy/lang/MetaClass;</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    SWAP</span><br><span class="line">    PUTFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    POP</span><br><span class="line">   L1</span><br><span class="line">    RETURN</span><br><span class="line">    LOCALVARIABLE <span class="built_in">this</span> LNativeDemo; L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">nativeLambda</span><span class="params">()</span>Ljava/lang/Object;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER <span class="number">6</span> L0</span><br><span class="line">    ICONST_3</span><br><span class="line">    ANEWARRAY java/lang/Object</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_0</span><br><span class="line">    ICONST_1</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_1</span><br><span class="line">    BIPUSH -<span class="number">2</span></span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_2</span><br><span class="line">    ICONST_3</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.createList ([Ljava/lang/Object;)Ljava/util/List;</span><br><span class="line">    INVOKEINTERFACE java/util/Collection.stream ()Ljava/util/stream/Stream; (itf)</span><br><span class="line">    NEW NativeDemo$_nativeLambda_lambda1</span><br><span class="line">    DUP</span><br><span class="line">    LDC LNativeDemo;.<span class="keyword">class</span></span><br><span class="line">    <span class="title class_">DUP</span></span><br><span class="line">    INVOKESPECIAL NativeDemo$_nativeLambda_lambda1.&lt;init&gt; (Ljava/lang/Object;Ljava/lang/Object;)V</span><br><span class="line">    INVOKEDYNAMIC <span class="title function_">apply</span><span class="params">(LNativeDemo$_nativeLambda_lambda1;)</span>Ljava/util/function/Function; [</span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">      <span class="comment">// arguments:</span></span><br><span class="line">      (Ljava/lang/Object;)Ljava/lang/Object;, </span><br><span class="line">      <span class="comment">// handle kind 0x5 : INVOKEVIRTUAL</span></span><br><span class="line">      NativeDemo$_nativeLambda_lambda1.doCall(Ljava/lang/Integer;)Ljava/lang/Object;, </span><br><span class="line">      (Ljava/lang/Integer;)Ljava/lang/Object;</span><br><span class="line">    ]</span><br><span class="line">    INVOKEINTERFACE java/util/stream/Stream.map (Ljava/util/function/Function;)Ljava/util/stream/Stream; (itf)</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/vmplugin/v8/PluginDefaultGroovyMethods.toList (Ljava/util/stream/Stream;)Ljava/util/List;</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE <span class="built_in">this</span> LNativeDemo; L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">5</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">nativeMethodReference</span><span class="params">()</span>Ljava/lang/Object;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER <span class="number">9</span> L0</span><br><span class="line">    ICONST_3</span><br><span class="line">    ANEWARRAY java/lang/Object</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_0</span><br><span class="line">    ICONST_1</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_1</span><br><span class="line">    BIPUSH -<span class="number">2</span></span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_2</span><br><span class="line">    ICONST_3</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.createList ([Ljava/lang/Object;)Ljava/util/List;</span><br><span class="line">    INVOKEINTERFACE java/util/Collection.stream ()Ljava/util/stream/Stream; (itf)</span><br><span class="line">    INVOKEDYNAMIC <span class="title function_">apply</span><span class="params">()</span>Ljava/util/function/Function; [</span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">      <span class="comment">// arguments:</span></span><br><span class="line">      (Ljava/lang/Object;)Ljava/lang/Object;, </span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      java/lang/Math.abs(I)I, </span><br><span class="line">      (Ljava/lang/Integer;)I</span><br><span class="line">    ]</span><br><span class="line">    INVOKEINTERFACE java/util/stream/Stream.map (Ljava/util/function/Function;)Ljava/util/stream/Stream; (itf)</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/vmplugin/v8/PluginDefaultGroovyMethods.toList (Ljava/util/stream/Stream;)Ljava/util/List;</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE <span class="built_in">this</span> LNativeDemo; L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">4</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">nativeConstructorReference</span><span class="params">()</span>Ljava/lang/Object;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER <span class="number">12</span> L0</span><br><span class="line">    ICONST_3</span><br><span class="line">    ANEWARRAY java/lang/Object</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_0</span><br><span class="line">    ICONST_1</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_1</span><br><span class="line">    BIPUSH -<span class="number">2</span></span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_2</span><br><span class="line">    ICONST_3</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.createList ([Ljava/lang/Object;)Ljava/util/List;</span><br><span class="line">    INVOKEINTERFACE java/util/Collection.stream ()Ljava/util/stream/Stream; (itf)</span><br><span class="line">    INVOKEDYNAMIC <span class="title function_">apply</span><span class="params">()</span>Ljava/util/function/IntFunction; [</span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">      <span class="comment">// arguments:</span></span><br><span class="line">      (I)Ljava/lang/Object;, </span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      NativeDemo.ctorRef$nativeConstructorReference$<span class="number">0</span>(I)[Ljava/lang/Integer;, </span><br><span class="line">      (I)[Ljava/lang/Integer;</span><br><span class="line">    ]</span><br><span class="line">    INVOKEINTERFACE java/util/stream/Stream.toArray (Ljava/util/function/IntFunction;)[Ljava/lang/Object; (itf)</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE <span class="built_in">this</span> LNativeDemo; L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">4</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1004</span></span><br><span class="line">  <span class="keyword">protected</span> synthetic $getStaticMetaClass()Lgroovy/lang/MetaClass;</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class;</span><br><span class="line">    LDC LNativeDemo;.<span class="keyword">class</span></span><br><span class="line">    <span class="title class_">IF_ACMPEQ</span> L0</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.initMetaClass (Ljava/lang/Object;)Lgroovy/lang/MetaClass;</span><br><span class="line">    ARETURN</span><br><span class="line">   L0</span><br><span class="line">   FRAME SAME</span><br><span class="line">    GETSTATIC NativeDemo.$staticClassInfo : Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    IFNONNULL L1</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class;</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/reflection/ClassInfo.getClassInfo (Ljava/lang/Class;)Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">    DUP</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    PUTSTATIC NativeDemo.$staticClassInfo : Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">   L1</span><br><span class="line">   FRAME APPEND [org/codehaus/groovy/reflection/ClassInfo]</span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    INVOKEVIRTUAL org/codehaus/groovy/reflection/ClassInfo.getMetaClass ()Lgroovy/lang/MetaClass;</span><br><span class="line">    <span class="type">ARETURN</span></span><br><span class="line">    <span class="variable">MAXSTACK</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">getMetaClass</span><span class="params">()</span>Lgroovy/lang/MetaClass;</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Generated;()</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Internal;()</span><br><span class="line">  <span class="meta">@Ljava</span>/beans/Transient;()</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    GETFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    DUP</span><br><span class="line">    IFNULL L0</span><br><span class="line">    ARETURN</span><br><span class="line">   L0</span><br><span class="line">   FRAME SAME1 groovy/lang/MetaClass</span><br><span class="line">    POP</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    DUP</span><br><span class="line">    INVOKEVIRTUAL NativeDemo.$getStaticMetaClass ()Lgroovy/lang/MetaClass;</span><br><span class="line">    PUTFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    GETFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    <span class="type">ARETURN</span></span><br><span class="line">    <span class="variable">MAXSTACK</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">setMetaClass</span><span class="params">(Lgroovy/lang/MetaClass;)</span>V</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Generated;()</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Internal;()</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    PUTFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    <span class="type">RETURN</span></span><br><span class="line">    <span class="variable">MAXSTACK</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x101A</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> synthetic ctorRef$nativeConstructorReference$<span class="number">0</span>(I)[Ljava/lang/Integer;</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Generated;() <span class="comment">// invisible</span></span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/CompileStatic;() <span class="comment">// invisible</span></span><br><span class="line">   L0</span><br><span class="line">    ILOAD <span class="number">0</span></span><br><span class="line">    MULTIANEWARRAY [Ljava/lang/Integer; <span class="number">1</span></span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE param0 I L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">1</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="NativeDemo-nativeLambda-lambda1的bytecode（为Native-Lambda而生成）"><a href="#NativeDemo-nativeLambda-lambda1的bytecode（为Native-Lambda而生成）" class="headerlink" title="NativeDemo$_nativeLambda_lambda1的bytecode（为Native Lambda而生成）"></a>NativeDemo$_nativeLambda_lambda1的bytecode（为Native Lambda而生成）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class version 52.0 (52)</span></span><br><span class="line"><span class="comment">// access flags 0x31</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NativeDemo$_nativeLambda_lambda1</span> <span class="keyword">extends</span> <span class="title class_">groovy</span>/lang/Closure <span class="keyword">implements</span> <span class="title class_">org</span>/codehaus/groovy/runtime/GeneratedLambda &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compiled from: script1617499378185.groovy</span></span><br><span class="line">  OUTERCLASS NativeDemo <span class="title function_">nativeLambda</span> <span class="params">()</span>Ljava/lang/Object;</span><br><span class="line">  <span class="comment">// access flags 0x11</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> INNERCLASS NativeDemo$_nativeLambda_lambda1 <span class="literal">null</span> _nativeLambda_lambda1</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x100A</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> synthetic Lorg/codehaus/groovy/reflection/ClassInfo; $staticClassInfo</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1089</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">transient</span> synthetic Z __$stMC</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> &lt;init&gt;(Ljava/lang/Object;Ljava/lang/Object;)V</span><br><span class="line">   L0</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">2</span></span><br><span class="line">    INVOKESPECIAL groovy/lang/Closure.&lt;init&gt; (Ljava/lang/Object;Ljava/lang/Object;)V</span><br><span class="line">   L1</span><br><span class="line">    RETURN</span><br><span class="line">    LOCALVARIABLE <span class="built_in">this</span> LNativeDemo$_nativeLambda_lambda1; L0 L1 <span class="number">0</span></span><br><span class="line">    LOCALVARIABLE _outerInstance Ljava/lang/Object; L0 L1 <span class="number">1</span></span><br><span class="line">    LOCALVARIABLE _thisObject Ljava/lang/Object; L0 L1 <span class="number">2</span></span><br><span class="line">    MAXSTACK = <span class="number">3</span></span><br><span class="line">    MAXLOCALS = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="comment">// signature (Ljava/lang/Integer;)TR;</span></span><br><span class="line">  <span class="comment">// declaration: R doCall(java.lang.Integer)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">doCall</span><span class="params">(Ljava/lang/Integer;)</span>Ljava/lang/Object;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER <span class="number">6</span> L0</span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Integer.intValue ()I</span><br><span class="line">    INVOKESTATIC java/lang/Math.abs (I)I</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER <span class="number">6</span> L1</span><br><span class="line">   FRAME FULL [] [java/lang/Throwable]</span><br><span class="line">    NOP</span><br><span class="line">    ATHROW</span><br><span class="line">   L2</span><br><span class="line">    LOCALVARIABLE <span class="built_in">this</span> LNativeDemo$_nativeLambda_lambda1; L0 L2 <span class="number">0</span></span><br><span class="line">    LOCALVARIABLE e Ljava/lang/Integer; L0 L2 <span class="number">1</span></span><br><span class="line">    MAXSTACK = <span class="number">1</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1004</span></span><br><span class="line">  <span class="keyword">protected</span> synthetic $getStaticMetaClass()Lgroovy/lang/MetaClass;</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class;</span><br><span class="line">    LDC LNativeDemo$_nativeLambda_lambda1;.<span class="keyword">class</span></span><br><span class="line">    <span class="title class_">IF_ACMPEQ</span> L0</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.initMetaClass (Ljava/lang/Object;)Lgroovy/lang/MetaClass;</span><br><span class="line">    ARETURN</span><br><span class="line">   L0</span><br><span class="line">   FRAME SAME</span><br><span class="line">    GETSTATIC NativeDemo$_nativeLambda_lambda1.$staticClassInfo : Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    IFNONNULL L1</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class;</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/reflection/ClassInfo.getClassInfo (Ljava/lang/Class;)Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">    DUP</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    PUTSTATIC NativeDemo$_nativeLambda_lambda1.$staticClassInfo : Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">   L1</span><br><span class="line">   FRAME APPEND [org/codehaus/groovy/reflection/ClassInfo]</span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    INVOKEVIRTUAL org/codehaus/groovy/reflection/ClassInfo.getMetaClass ()Lgroovy/lang/MetaClass;</span><br><span class="line">    <span class="type">ARETURN</span></span><br><span class="line">    <span class="variable">MAXSTACK</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Groovy 3</tag>
        <tag>Closure</tag>
        <tag>Lambda</tag>
        <tag>Method Reference</tag>
        <tag>Constructor Reference</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy 3之新特性预览</title>
    <url>/2017/04/15/Groovy-3%E4%B9%8B%E6%96%B0%E7%89%B9%E6%80%A7%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>Groovy面世已有10多年光阴，在不断创新的同时还汲取了不少其他语言的优秀特性。目前Groovy核心团队已开始将重心逐渐转移到Groovy 3的研发上，而Groovy 3的主要亮点之一便是其全新的解析器以及更加丰富的语言特性。由于前期为Groovy研发了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbHN1bjExMDYvZ3Jvb3Z5LXBhcnNlcg==">这一全新的解析器<i class="fa fa-external-link-alt"></i></span>并添加了不少语言特性，<span class="exturl" data-url="aHR0cDovL21haWwtYXJjaGl2ZXMuYXBhY2hlLm9yZy9tb2RfbWJveC9ncm9vdnktdXNlcnMvMjAxNjExLm1ib3gvJTNDQ0FNYmtFN1QlMkJjc2h2eWklMkI0VFpCNndGaW1wOEIxcnlDMm1iMWdZekdZV0xkX3olM0Q4S3FRJTQwbWFpbC5nbWFpbC5jb20lM0U=">有幸受邀成为Groovy核心团队的一员<i class="fa fa-external-link-alt"></i></span>。最初我将该全新的解析器命名为“Parrot”，其含义相对比较谦卑，即“鹦鹉学舌”，学着如何说Groovy以及Java8，通过数月陆陆续续地完善，已达到一定的成熟度并<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9ncm9vdnkvY29tbWl0L2EzZjg2NzFiNWZiNmNlODNhN2MzYzY1YzA0ZDQ2NjI2ZGRiYjY0NmE=">已被纳入master分支<i class="fa fa-external-link-alt"></i></span>。<span id="more"></span></p>
<p>接下来的内容将主要介绍一下这些新特性。可在<span class="exturl" data-url="aHR0cHM6Ly9ncm9vdnkuYXBhY2hlLm9yZy9kb3dubG9hZC5odG1s">Groovy官方网站<i class="fa fa-external-link-alt"></i></span>下载Groovy 3尝鲜。</p>
<p><strong>注：</strong> 在Apache Groovy 3.0.0的Release Note中对该解析器有较为全面地介绍：<span class="exturl" data-url="aHR0cDovL2dyb292eS1sYW5nLm9yZy9yZWxlYXNlbm90ZXMvZ3Jvb3Z5LTMuMC5odG1s">http://groovy-lang.org/releasenotes/groovy-3.0.html<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="新特性预览"><a href="#新特性预览" class="headerlink" title="新特性预览"></a>新特性预览</h2><h3 id="1-完善循环语句"><a href="#1-完善循环语句" class="headerlink" title="1. 完善循环语句"></a>1. 完善循环语句</h3><p>在Groovy 3之前，Groovy既不支持do-while语句，也不支持真正符合Java语法规范的for语句（比如：多个初始化以及多个更新表达式）。在Groovy 3中，对循环语句做了完整的支持，令Java背景的开发人员可以更加平缓地过度到Groovy开发。举些例子：</p>
<h4 id="do-while语句示例"><a href="#do-while语句示例" class="headerlink" title="do-while语句示例"></a>do-while语句示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    i++</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> i == <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h4 id="符合Java语法规范的for语句示例"><a href="#符合Java语法规范的for语句示例" class="headerlink" title="符合Java语法规范的for语句示例"></a>符合Java语法规范的for语句示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">5</span> &amp;&amp; j &lt; <span class="number">5</span>; i = i + <span class="number">2</span>, j++) &#123;</span><br><span class="line">    result += i;</span><br><span class="line">    result += j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">9</span> == result</span><br></pre></td></tr></table></figure>
<h3 id="2-支持Lambda表达式"><a href="#2-支持Lambda表达式" class="headerlink" title="2. 支持Lambda表达式"></a>2. 支持Lambda表达式</h3><p>Java 8引入了Lambda表达式，为了更好地兼容Java的语法，Groovy 3也新增了对该语法特性的支持。举些例子：</p>
<h4 id="Lambda表达式示例"><a href="#Lambda表达式示例" class="headerlink" title="Lambda表达式示例"></a>Lambda表达式示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">9</span> == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].stream().map(e -&gt; e + <span class="number">1</span>).reduce(<span class="number">0</span>, (r, e) -&gt; r + e)</span><br></pre></td></tr></table></figure>
<h3 id="3-支持方法引用（method-reference）和构造器引用（constructor-reference）"><a href="#3-支持方法引用（method-reference）和构造器引用（constructor-reference）" class="headerlink" title="3. 支持方法引用（method reference）和构造器引用（constructor reference）"></a>3. 支持方法引用（method reference）和构造器引用（constructor reference）</h3><p>Java 8除了引入了Lambda表达式，还引入了方法引用（method reference）和构造器引用（constructor reference），基于同样的原因，Groovy 3也新增了对该语法特性的支持。举些例子：</p>
<h4 id="方法引用（method-reference）示例"><a href="#方法引用（method-reference）示例" class="headerlink" title="方法引用（method reference）示例"></a>方法引用（method reference）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>] == [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].stream().map(<span class="attr">String:</span>:toUpperCase).collect(Collectors.toList())</span><br></pre></td></tr></table></figure>
<h4 id="构造器引用（constructor-reference）示例"><a href="#构造器引用（constructor-reference）示例" class="headerlink" title="构造器引用（constructor reference）示例"></a>构造器引用（constructor reference）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">as</span> String[] == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].stream().map(<span class="attr">String:</span>:valueOf).toArray(String[]::<span class="keyword">new</span>)</span><br></pre></td></tr></table></figure>
<h3 id="4-支持try-with-resources语句"><a href="#4-支持try-with-resources语句" class="headerlink" title="4. 支持try-with-resources语句"></a>4. 支持try-with-resources语句</h3><p>Java 7引入了自动资源管理机制，开发人员可以通过try-with-resources语句很方便地完成资源的管理。在Groovy 3中也对其进行了支持。举些例子：</p>
<h4 id="try-with-resources语句示例"><a href="#try-with-resources语句示例" class="headerlink" title="try-with-resources语句示例"></a>try-with-resources语句示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Resource</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    <span class="type">int</span> resourceId;</span><br><span class="line">    <span class="keyword">static</span> closedResourceIds = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Resource(<span class="type">int</span> resourceId) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.resourceId = resourceId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> close() &#123;</span><br><span class="line">        closedResourceIds &lt;&lt; resourceId</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> (Resource r1 = <span class="keyword">new</span> Resource(<span class="number">1</span>)) &#123;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> Resource.closedResourceIds == [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="number">2</span> == a</span><br></pre></td></tr></table></figure>
<h3 id="5-支持代码块"><a href="#5-支持代码块" class="headerlink" title="5. 支持代码块"></a>5. 支持代码块</h3><p>在Java中有一种不常用但比较有用的语法可以方便地隔离变量的作用范围，即代码块。Groovy 3也对其进行了支持。举些例子：</p>
<h4 id="代码块示例"><a href="#代码块示例" class="headerlink" title="代码块示例"></a>代码块示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">def</span> a = <span class="number">1</span></span><br><span class="line">    a++</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> == a</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">def</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == a</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="6-支持Java风格的数组初始化"><a href="#6-支持Java风格的数组初始化" class="headerlink" title="6. 支持Java风格的数组初始化"></a>6. 支持Java风格的数组初始化</h3><p>为了更好地兼容Java语法，Groovy 3新增了对Java风格的数组初始化的支持。</p>
<h4 id="数组初始化示例"><a href="#数组初始化示例" class="headerlink" title="数组初始化示例"></a>数组初始化示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> a = <span class="keyword">new</span> <span class="type">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    <span class="keyword">assert</span> a[<span class="number">0</span>] == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> a[<span class="number">1</span>] == <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> a <span class="keyword">as</span> List == [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h3 id="7-支持interface的默认方法（default-method）"><a href="#7-支持interface的默认方法（default-method）" class="headerlink" title="7. 支持interface的默认方法（default method）"></a>7. 支持interface的默认方法（default method）</h3><p>在Java 8引入的众多新特性中，interface的默认方法（default method）也是十分有用的一个特性。Groovy 3自然也不会遗漏对其进行支持。举些例子：</p>
<h4 id="默认方法（default-method）示例"><a href="#默认方法（default-method）示例" class="headerlink" title="默认方法（default method）示例"></a>默认方法（default method）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Greetable</span> &#123;</span><br><span class="line">    String name();</span><br><span class="line">    <span class="keyword">default</span> String hello() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">public</span> String sayHello() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.hello() + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.name()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Greetable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String name() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Daniel&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;hello, Daniel&#x27;</span> == <span class="string">&quot;$&#123;p.hello()&#125;, $&#123;p.name()&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;hello, Daniel&#x27;</span> == p.sayHello()</span><br></pre></td></tr></table></figure>
<h3 id="8-新增操作符：一致性操作符（-、-）、Elvis赋值（-）、-in、-instanceof"><a href="#8-新增操作符：一致性操作符（-、-）、Elvis赋值（-）、-in、-instanceof" class="headerlink" title="8. 新增操作符：一致性操作符（===、!==）、Elvis赋值（?=）、!in、!instanceof"></a>8. 新增操作符：一致性操作符（<code>===</code>、<code>!==</code>）、Elvis赋值（<code>?=</code>）、<code>!in</code>、<code>!instanceof</code></h3><p>为了令Groovy程序更加简洁，Groovy 3引入了这些新的操作符。举些例子：</p>
<h4 id="一致性操作符（-、-）示例"><a href="#一致性操作符（-、-）示例" class="headerlink" title="一致性操作符（===、!==）示例"></a>一致性操作符（<code>===</code>、<code>!==</code>）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;abc&#x27;</span> === <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;abc&#x27;</span> !== <span class="keyword">new</span> String(<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Elvis赋值（-）示例"><a href="#Elvis赋值（-）示例" class="headerlink" title="Elvis赋值（?=）示例"></a>Elvis赋值（<code>?=</code>）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> a = <span class="number">2</span></span><br><span class="line">a ?= <span class="number">1</span></span><br><span class="line">assert a == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">a = null</span><br><span class="line">a ?= <span class="number">1</span></span><br><span class="line">assert a == <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="in示例"><a href="#in示例" class="headerlink" title="!in示例"></a>!in示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> !<span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h4 id="instanceof示例"><a href="#instanceof示例" class="headerlink" title="!instanceof示例"></a>!instanceof示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> !<span class="keyword">instanceof</span> String</span><br></pre></td></tr></table></figure>
<h3 id="9-支持安全检索"><a href="#9-支持安全检索" class="headerlink" title="9. 支持安全检索"></a>9. 支持安全检索</h3><p>Groovy对null有一种安全的操作方式，即通过<code>?.</code>进行引用，这样可以避免NullPointerException的发生，但缺少对集合和数组的安全检索的支持，在Groovy 3弥补了这点缺憾。举些例子：</p>
<h4 id="安全检索示例"><a href="#安全检索示例" class="headerlink" title="安全检索示例"></a>安全检索示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">String[] array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == array?[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">array?[<span class="number">1</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">assert <span class="string">&#x27;c&#x27;</span> == array?[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">array = null;</span><br><span class="line">assert null == array?[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">array?[<span class="number">1</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">assert null == array?[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<h3 id="10-支持运行时Groovydoc以及将Groovydoc作为元数据保存于AST节点中"><a href="#10-支持运行时Groovydoc以及将Groovydoc作为元数据保存于AST节点中" class="headerlink" title="10. 支持运行时Groovydoc以及将Groovydoc作为元数据保存于AST节点中"></a>10. 支持运行时Groovydoc以及将Groovydoc作为元数据保存于AST节点中</h3><p>Groovy 3新增了运行时Groovydoc，即可在运行时访问该Groovydoc内容，与传统Groovydoc的差别在于运行时Groovydoc以<code>/**@</code>开头（详见以下示例）。如果说Javadoc伴随Java源码是对文档重视的一种体现，那么运行时Groovydoc则更进一步，它保存于bytecode中，与程序做到了真正的结合。</p>
<p>注：该特性需将<code>groovy.attach.runtime.groovydoc</code>设置为<code>true</code>，即<code>-Dgroovy.attach.runtime.groovydoc=true</code>，方可启用。</p>
<h4 id="运行时Groovydoc示例"><a href="#运行时Groovydoc示例" class="headerlink" title="运行时Groovydoc示例"></a>运行时Groovydoc示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**@</span></span><br><span class="line"><span class="comment"> * class AA</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">    <span class="comment">/**@</span></span><br><span class="line"><span class="comment">     * field SOME_FIELD</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SOME_FIELD = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span></span><br><span class="line"><span class="comment">     * constructor AA</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AA() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span></span><br><span class="line"><span class="comment">     * method m</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> m() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span></span><br><span class="line"><span class="comment">     * class InnerClass</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span></span><br><span class="line"><span class="comment"> * annotation BB</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@interface</span> BB &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;class AA&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getMethod(<span class="string">&#x27;m&#x27;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;method m&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getConstructor().getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;constructor AA&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getField(<span class="string">&#x27;SOME_FIELD&#x27;</span>).getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;field SOME_FIELD&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getDeclaredClasses().find &#123;it.simpleName.contains(<span class="string">&#x27;InnerClass&#x27;</span>)&#125;.getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;class InnerClass&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> BB.<span class="keyword">class</span>.getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;annotation BB&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="将Groovydoc作为元数据保存于AST节点中的示例"><a href="#将Groovydoc作为元数据保存于AST节点中的示例" class="headerlink" title="将Groovydoc作为元数据保存于AST节点中的示例"></a>将Groovydoc作为元数据保存于AST节点中的示例</h4><p>注：该特性需将<code>groovy.attach.groovydoc</code>设置为<code>true</code>，即<code>-Dgroovy.attach.groovydoc=true</code>，方可启用。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.codehaus.groovy.control.*</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.groovy.parser.antlr4.GroovydocManager.DOC_COMMENT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * Groovydoc for hello method</span></span><br><span class="line"><span class="string"> * @author Daniel Sun</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">void hello(String name) &#123;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> ast = <span class="keyword">new</span> CompilationUnit().tap &#123;</span><br><span class="line">    addSource <span class="string">&#x27;hello.groovy&#x27;</span>, code</span><br><span class="line">    compile Phases.SEMANTIC_ANALYSIS </span><br><span class="line">&#125;.ast</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> ast.classes[<span class="number">0</span>].methods.grep(e -&gt; e.name == <span class="string">&#x27;hello&#x27;</span>)[<span class="number">0</span>].nodeMetaData[DOC_COMMENT].contains(<span class="string">&#x27;Groovydoc for hello method&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>仿照Donald Trump的”Make America Great Again”，我希望Groovy 3可以”Make Groovy Great Again”</p>
]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Groovy 3</tag>
        <tag>Parrot Parser</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy 4之新特性GINQ预览</title>
    <url>/2021/05/03/Groovy-4%E4%B9%8B%E6%96%B0%E7%89%B9%E6%80%A7GINQ%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>C#最先引入LINQ特性，其强大的功能令我垂涎已久，并琢磨着为Groovy也添加类似特性，终于在Groovy 4中决定完成这一夙愿。GINQ是Groovy-Integrated Query的缩写，意在对集合的操作以类SQL的方式完成，将来或许会扩展至对数据库的支持。另外，结合Groovy的XML, JSON, YAML等文本解析特性，GINQ可天然地支持对这些文本内容进行查询。<span id="more"></span></p>
<h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>为了保持语法的向下兼容，没有为GINQ引入新语法，而是以DSL形式实现，其处理过程如下：</p>
<p><strong>Groovy DSL</strong>  <code>--解析--&gt;</code>  <strong>Groovy AST</strong>  <code>--转换--&gt;</code>  <strong>GINQ AST</strong>  <code>--优化--&gt;</code>  <strong>优化后的GINQ AST</strong>  <code>--生成--&gt;</code>  <strong>目标Groovy AST</strong></p>
<h3 id="解析阶段"><a href="#解析阶段" class="headerlink" title="解析阶段"></a>解析阶段</h3><p>借助Groovy既有的解析器Parrot，将Groovy DSL源码解析为Groovy AST，该AST对于Groovy而言是通用的但缺乏“个性”，难以方便地描述GINQ的形态。</p>
<h3 id="转换阶段"><a href="#转换阶段" class="headerlink" title="转换阶段"></a>转换阶段</h3><p>为了方便地描述GINQ，我设计了GINQ AST。在获得了Groovy AST之后，比对GINQ AST规范，将Groovy AST转换为GINQ AST。</p>
<h3 id="优化阶段"><a href="#优化阶段" class="headerlink" title="优化阶段"></a>优化阶段</h3><p>原始GINQ AST的结构可能不是最优，需要做进一步的转换优化，比如存在先关联再筛选的情况，需要将筛选节点下沉，作用于数据源节点。</p>
<h3 id="生成阶段"><a href="#生成阶段" class="headerlink" title="生成阶段"></a>生成阶段</h3><p>无论是操作集合还是操作数据库，都生成可实际执行的代码。为了这个目标，先将优化后的GINQ AST转换为目标代码对应的Groovy AST，然后借助Groovy既有的编译特性生成bytecode。</p>
<h2 id="特性预览"><a href="#特性预览" class="headerlink" title="特性预览"></a>特性预览</h2><p>GINQ的代码需要放置在<code>GQ &#123;...&#125;</code>块中或者用注解<code>@GQ</code>标记的方法体内，这样Groovy便可将其识别为GINQ DSL。</p>
<h3 id="例子1：筛选出List实例中大于1并且小于等于5的元素"><a href="#例子1：筛选出List实例中大于1并且小于等于5的元素" class="headerlink" title="例子1：筛选出List实例中大于1并且小于等于5的元素"></a>例子1：筛选出List实例中大于1并且小于等于5的元素</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    where n &gt; <span class="number">1</span> &amp;&amp; n &lt;= <span class="number">5</span></span><br><span class="line">    select n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：任何Groovy的操作符均可在<code>where</code>中使用，比如<code>in</code>, <code>!in</code>等，而数据源可以是<code>Iterable</code>, <code>Stream</code>, 数组以及GINQ执行结果。</p>
<h3 id="例子2：将List实例中的元素先按长度再按内容进行排序"><a href="#例子2：将List实例中的元素先按长度再按内容进行排序" class="headerlink" title="例子2：将List实例中的元素先按长度再按内容进行排序"></a>例子2：将List实例中的元素先按长度再按内容进行排序</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from s <span class="keyword">in</span> [<span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;bcd&#x27;</span>]</span><br><span class="line">    orderby s.length() <span class="keyword">in</span> desc, s</span><br><span class="line">    select s</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;bcd&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：默认升序<code>asc</code>。另外，<code>null</code>值的排序规则可通过<code>nullslast</code>以及<code>nullsfirst</code>指定，比如：<code>asc(nullslast)</code>, <code>asc(nullsfirst)</code>, <code>desc(nullslast)</code>, <code>desc(nullsfirst)</code>，而<code>asc</code>是<code>asc(nullslast)</code>的缩写，<code>desc</code>是<code>desc(nullslast)</code>的缩写。</p>
<h3 id="例子3：在List实例中选取序号为1开始的2个元素"><a href="#例子3：在List实例中选取序号为1开始的2个元素" class="headerlink" title="例子3：在List实例中选取序号为1开始的2个元素"></a>例子3：在List实例中选取序号为1开始的2个元素</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from n <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    limit <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    select n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">4</span>, <span class="number">5</span>] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：序号从<code>0</code>开始</p>
<h3 id="例子4：关联2个List实例并筛选满足条件的元素"><a href="#例子4：关联2个List实例并筛选满足条件的元素" class="headerlink" title="例子4：关联2个List实例并筛选满足条件的元素"></a>例子4：关联2个List实例并筛选满足条件的元素</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    join m <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>] on m == n</span><br><span class="line">    where n &gt; <span class="number">1</span> &amp;&amp; n &lt;= <span class="number">5</span> &amp;&amp; m &gt; <span class="number">3</span> &amp;&amp; m &lt;= <span class="number">8</span></span><br><span class="line">    select n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">4</span>, <span class="number">5</span>] == result.toList()</span><br></pre></td></tr></table></figure>

<h3 id="例子5：按模2的结果对List实例中的元素进行分组并计算"><a href="#例子5：按模2的结果对List实例中的元素进行分组并计算" class="headerlink" title="例子5：按模2的结果对List实例中的元素进行分组并计算"></a>例子5：按模2的结果对List实例中的元素进行分组并计算</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    groupby n % <span class="number">2</span> <span class="keyword">as</span> k <span class="comment">// 取个别名k</span></span><br><span class="line">    select k, count(), min(n), max(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [[<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>], [<span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>]] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：目前已支持的聚合函数有：<code>count</code>, <code>min</code>, <code>max</code>, <code>sum</code>, <code>avg</code>, <code>median</code>, <code>stdev</code>, <code>stdevp</code>, <code>var</code>, <code>varp</code>, <code>agg</code></p>
<h3 id="例子6：将List实例中的元素按元素长度分区再按内容降序排列并选取元素的前一个元素"><a href="#例子6：将List实例中的元素按元素长度分区再按内容降序排列并选取元素的前一个元素" class="headerlink" title="例子6：将List实例中的元素按元素长度分区再按内容降序排列并选取元素的前一个元素"></a>例子6：将List实例中的元素按元素长度分区再按内容降序排列并选取元素的前一个元素</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from s <span class="keyword">in</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>]</span><br><span class="line">    select s, (lead(s) over(partitionby s.length() orderby s <span class="keyword">in</span> desc))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [[<span class="string">&#x27;a&#x27;</span>, <span class="literal">null</span>], [<span class="string">&#x27;ab&#x27;</span>, <span class="literal">null</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;bc&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>]] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：目前已支持的窗口函数有：<code>rowNumber</code>, <code>rank</code>, <code>denseRank</code>, <code>percentRank</code>, <code>cumeDist</code>, <code>ntile</code>, <code>lead</code>, <code>lag</code>, <code>firstValue</code>, <code>lastValue</code>, <code>nthValue</code>, <code>count</code>, <code>min</code>, <code>max</code>, <code>sum</code>, <code>avg</code>, <code>median</code>, <code>stdev</code>, <code>stdevp</code>, <code>var</code>, <code>varp</code></p>
<h3 id="例子7：查询JSON内容"><a href="#例子7：查询JSON内容" class="headerlink" title="例子7：查询JSON内容"></a>例子7：查询JSON内容</h3><p>先通过<code>JsonSlurper</code>将json内容解析为集合，然后利用GINQ对集合进行查询</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> json = <span class="keyword">new</span> groovy.json.JsonSlurper().parseText(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        &quot;fruits&quot;: [</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Orange&quot;, &quot;price&quot;: 11&#125;,</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Apple&quot;, &quot;price&quot;: 6&#125;,</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Banana&quot;, &quot;price&quot;: 4&#125;,</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Mongo&quot;, &quot;price&quot;: 29&#125;,</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Durian&quot;, &quot;price&quot;: 32&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from f <span class="keyword">in</span> json.fruits</span><br><span class="line">    where f.price &lt; <span class="number">32</span></span><br><span class="line">    orderby f.price <span class="keyword">in</span> desc</span><br><span class="line">    select f.name, f.price</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [[<span class="string">&#x27;Mongo&#x27;</span>, <span class="number">29</span>], [<span class="string">&#x27;Orange&#x27;</span>, <span class="number">11</span>], [<span class="string">&#x27;Apple&#x27;</span>, <span class="number">6</span>], [<span class="string">&#x27;Banana&#x27;</span>, <span class="number">4</span>]] == result.toList()</span><br></pre></td></tr></table></figure>

<h3 id="例子8：列表推导式（List-Comprehension）"><a href="#例子8：列表推导式（List-Comprehension）" class="headerlink" title="例子8：列表推导式（List Comprehension）"></a>例子8：列表推导式（List Comprehension）</h3><p>构造一个List实例，其元素是1至10中偶数的平方</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQL &#123;from n <span class="keyword">in</span> <span class="number">1.</span>.&lt;<span class="number">11</span> where n % <span class="number">2</span> == <span class="number">0</span> select n ** <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>] == result</span><br></pre></td></tr></table></figure>
<p>注：<code>GQL &#123;...&#125;</code> 等价于 <code>GQ &#123;...&#125;.toList()</code></p>
<h3 id="例子N：……"><a href="#例子N：……" class="headerlink" title="例子N：……"></a>例子N：……</h3><p>点击链接查看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9ncm9vdnkvYmxvYi9tYXN0ZXIvc3VicHJvamVjdHMvZ3Jvb3Z5LWdpbnEvc3JjL3NwZWMvdGVzdC9vcmcvYXBhY2hlL2dyb292eS9naW5xL0dpbnFUZXN0Lmdyb292eQ==">更多例子<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><h3 id="1-GINQ官方文档"><a href="#1-GINQ官方文档" class="headerlink" title="1. GINQ官方文档"></a>1. <span class="exturl" data-url="aHR0cDovL2RvY3MuZ3Jvb3Z5LWxhbmcub3JnL2RvY3MvbmV4dC9odG1sL2RvY3VtZW50YXRpb24vI19xdWVyeWluZ19jb2xsZWN0aW9uc19pbl9zcWxfbGlrZV9zdHlsZQ==">GINQ官方文档<i class="fa fa-external-link-alt"></i></span></h3><h3 id="2-《让我们介绍Groovy的最新趋势》"><a href="#2-《让我们介绍Groovy的最新趋势》" class="headerlink" title="2. 《让我们介绍Groovy的最新趋势》"></a>2. <span class="exturl" data-url="aHR0cHM6Ly9xaWl0YS5jb20vbm9iZWFucy9pdGVtcy82NDk3YTkzNjJkY2ZjMGUxN2MwOCMlRTYlOTYlQjAlRTYlQTklOUYlRTglODMlQkQtZ2lucS11bmRlci1pbnZlc3RpZ2F0aW9u">《让我们介绍Groovy的最新趋势》<i class="fa fa-external-link-alt"></i></span></h3>]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>GINQ</tag>
        <tag>Groovy 4</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy 4之新特性预览</title>
    <url>/2021/12/11/Groovy-4%E4%B9%8B%E6%96%B0%E7%89%B9%E6%80%A7%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为了进一步兼容Java，我们Groovy核心团队决定从Groovy 4.0.0开始支持Switch Expression、Record Class、Sealed Class等Java语言特性。值得注意的是，即使Groovy 4.0.0运行在Java 8上，这些新特性依然可以使用。除了兼容Java语言特性外，Groovy自身也新增了不少实用的新特性，比如增强Range、支持TOML、Java化（<code>@POJO</code>）、GINQ（Groovy-Integrated Query）等。</p>
<span id="more"></span>

<h2 id="新特性预览"><a href="#新特性预览" class="headerlink" title="新特性预览"></a>新特性预览</h2><h3 id="Switch-Expression"><a href="#Switch-Expression" class="headerlink" title="Switch Expression"></a>Switch Expression</h3><p>使用<code>-&gt;</code>表示各个逻辑分支</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> result = <span class="keyword">switch</span>(i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> -&gt; <span class="string">&#x27;zero&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; <span class="string">&#x27;one&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; <span class="string">&#x27;two&#x27;</span></span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&#x27;unknown number&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;one&#x27;</span> == result</span><br></pre></td></tr></table></figure>
<p>使用花括号<code>&#123;...&#125;</code>处理较为复杂逻辑分支</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> i = <span class="number">3</span></span><br><span class="line"><span class="keyword">def</span> result = <span class="keyword">switch</span>(i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> -&gt; <span class="string">&#x27;zero&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; <span class="string">&#x27;one&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; <span class="string">&#x27;two&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">def</span> p1 = <span class="string">&#x27;th&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> p2 = <span class="string">&#x27;ree&#x27;</span></span><br><span class="line">        <span class="string">&quot;$&#123;p1&#125;$&#123;p2&#125;&quot;</span> <span class="comment">// 最后一个表达式的`yield`是可选的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&#x27;unknown number&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;three&#x27;</span> == result</span><br></pre></td></tr></table></figure>
<p>使用<code>yield</code>来产生switch expression的结果值</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> lang = <span class="string">&#x27;CN&#x27;</span></span><br><span class="line"><span class="keyword">def</span> i = <span class="number">3</span></span><br><span class="line"><span class="keyword">def</span> result = <span class="keyword">switch</span>(i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> -&gt; <span class="string">&#x27;zero&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; <span class="string">&#x27;one&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; <span class="string">&#x27;two&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;CN&#x27;</span> == lang) &#123;</span><br><span class="line">            yield <span class="string">&#x27;三&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        yield <span class="string">&#x27;three&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&#x27;unknown number&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;三&#x27;</span> == result</span><br></pre></td></tr></table></figure>
<p>使用<code>:</code>表示逻辑分支并使用<code>yield</code>产生switch expression的结果值</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> lang = <span class="string">&#x27;EN&#x27;</span></span><br><span class="line"><span class="keyword">def</span> i = <span class="number">3</span></span><br><span class="line"><span class="keyword">def</span> result = <span class="keyword">switch</span>(i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: yield <span class="string">&#x27;zero&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: yield <span class="string">&#x27;one&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: yield <span class="string">&#x27;two&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;CN&#x27;</span> == lang) &#123;</span><br><span class="line">            yield <span class="string">&#x27;三&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        yield <span class="string">&#x27;three&#x27;</span></span><br><span class="line">    <span class="symbol">default:</span> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&#x27;unknown number&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;three&#x27;</span> == result</span><br></pre></td></tr></table></figure>
<p>使用<code>:</code>复用逻辑分支</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> i = <span class="number">4</span></span><br><span class="line"><span class="keyword">def</span> result = <span class="keyword">switch</span>(i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: yield <span class="string">&#x27;zero&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: yield <span class="string">&#x27;one&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: yield <span class="string">&#x27;two&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: yield <span class="string">&#x27;three&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="symbol">default:</span> <span class="string">&#x27;unknown number&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;unknown number&#x27;</span> == result</span><br></pre></td></tr></table></figure>

<h3 id="Record-Class"><a href="#Record-Class" class="headerlink" title="Record Class"></a>Record Class</h3><p>使用<code>record</code>关键字定义Record Class</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">record Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;山风小子&#x27;</span>, <span class="number">37</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;山风小子&#x27;</span> == p.name()</span><br><span class="line"><span class="keyword">assert</span> <span class="number">37</span> == p.age()</span><br></pre></td></tr></table></figure>
<p>定义Compact constructor</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">record Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">    Person &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;invalid age: $&#123;age&#125;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        name = name.toUpperCase()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Daniel&#x27;</span>, <span class="number">37</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;DANIEL&#x27;</span> == p1.name()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">def</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;Unknown&#x27;</span>, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="attr">false:</span> <span class="string">&#x27;Should never reach here&#x27;</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;invalid age: -1&#x27;</span> == e.message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sealed-Class"><a href="#Sealed-Class" class="headerlink" title="Sealed Class"></a>Sealed Class</h3><p>使用<code>sealed</code>定义Sealed Class，注：如果子类没有显式声明<code>final</code>、<code>sealed</code>或<code>non-sealed</code>，那么默认<code>non-sealed</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只允许`Ellipse`、`Rectangle`以及`Triangle`继承`Shape`</span></span><br><span class="line">sealed <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> permits Ellipse, Rectangle, Triangle &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `non-sealed`可选，此处作为示例进行显式声明</span></span><br><span class="line">non-sealed <span class="keyword">class</span> <span class="title class_">Ellipse</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Ellipse</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sealed <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> permits Square &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">new</span> Ellipse() <span class="keyword">instanceof</span> Shape</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">new</span> Circle() <span class="keyword">instanceof</span> Shape</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">new</span> Rectangle() <span class="keyword">instanceof</span> Shape</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">new</span> Square() <span class="keyword">instanceof</span> Shape</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">new</span> Triangle() <span class="keyword">instanceof</span> Shape</span><br></pre></td></tr></table></figure>

<h3 id="增强Range"><a href="#增强Range" class="headerlink" title="增强Range"></a>增强Range</h3><p>新增<code>&lt;..</code>（左开右闭区间）以及<code>&lt;..&lt;</code>（开区间）</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] == <span class="number">1</span>&lt;.<span class="number">.6</span>   <span class="comment">// 新增左开右闭区间</span></span><br><span class="line"><span class="keyword">assert</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] == <span class="number">1</span>&lt;..&lt;<span class="number">6</span>     <span class="comment">// 新增开区间</span></span><br><span class="line"><span class="keyword">assert</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] == <span class="number">1.</span>.&lt;<span class="number">6</span>   <span class="comment">// 已有左闭右开区间</span></span><br><span class="line"><span class="keyword">assert</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] == <span class="number">1.</span><span class="number">.6</span> <span class="comment">// 已有闭区间</span></span><br></pre></td></tr></table></figure>

<h3 id="支持TOML"><a href="#支持TOML" class="headerlink" title="支持TOML"></a>支持TOML</h3><ul>
<li>解析TOML<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> ts = <span class="keyword">new</span> groovy.toml.TomlSlurper()</span><br><span class="line"><span class="keyword">def</span> toml = ts.parseText <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># This is a TOML document.</span></span><br><span class="line"><span class="string">title = &quot;TOML Example&quot;</span></span><br><span class="line"><span class="string">[owner]</span></span><br><span class="line"><span class="string">name = &quot;山风小子&quot;</span></span><br><span class="line"><span class="string">[blog]</span></span><br><span class="line"><span class="string">domainName = &quot;blog.sunlan.me&quot;</span></span><br><span class="line"><span class="string">languages = [&quot;CN&quot;, &quot;EN&quot;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;TOML Example&#x27;</span> == toml.title</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;山风小子&#x27;</span> == toml.owner.name</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;blog.sunlan.me&#x27;</span> == toml.blog.domainName</span><br><span class="line"><span class="keyword">assert</span> [<span class="string">&#x27;CN&#x27;</span>, <span class="string">&#x27;EN&#x27;</span>] == toml.blog.languages</span><br></pre></td></tr></table></figure></li>
<li>创建TOML（暂不支持美化输出结果）<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> tb = <span class="keyword">new</span> groovy.toml.TomlBuilder()</span><br><span class="line">tb &#123;</span><br><span class="line">    title <span class="string">&#x27;TOML Example&#x27;</span></span><br><span class="line">    owner &#123;</span><br><span class="line">        name <span class="string">&#x27;山风小子&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    blog &#123;</span><br><span class="line">        domainName <span class="string">&#x27;blog.sunlan.me&#x27;</span></span><br><span class="line">        languages <span class="string">&#x27;CN&#x27;</span>, <span class="string">&#x27;EN&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">title = &#x27;TOML Example&#x27;</span></span><br><span class="line"><span class="string">owner.name = &#x27;山风小子&#x27;</span></span><br><span class="line"><span class="string">blog.domainName = &#x27;blog.sunlan.me&#x27;</span></span><br><span class="line"><span class="string">blog.languages = [&#x27;CN&#x27;, &#x27;EN&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> == tb.toString()</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Java化（-POJO）"><a href="#Java化（-POJO）" class="headerlink" title="Java化（@POJO）"></a>Java化（<code>@POJO</code>）</h3><p>Groovy编译出来的class依赖Groovy自带的类（比如：<code>GroovyObject</code>），因此在运行Groovy程序时不得不将Groovy运行时jar文件都引入。而<code>@POJO</code>与<code>@CompileStatic</code>结合使用便可助我们“轻装上阵”，摆脱Groovy运行时jar文件，但有个大前提，Groovy程序本身没有用到Groovy自带的类，包括<code>GString</code>。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@groovy</span>.transform.CompileStatic</span><br><span class="line"><span class="meta">@groovy</span>.transform.stc.POJO</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloGroovy</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译后所生成的bytecode如下所示（注：Groovy的<code>@Generated</code>不影响程序独立运行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class version 61.0 (61)</span></span><br><span class="line"><span class="comment">// access flags 0x21</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloGroovy</span> &#123;</span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> &lt;init&gt;()V</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Generated;()</span><br><span class="line">   L0</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V</span><br><span class="line">   L1</span><br><span class="line">    RETURN</span><br><span class="line">    LOCALVARIABLE <span class="built_in">this</span> LHelloGroovy; L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">1</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="GINQ（Groovy-Integrated-Query）"><a href="#GINQ（Groovy-Integrated-Query）" class="headerlink" title="GINQ（Groovy-Integrated Query）"></a>GINQ（Groovy-Integrated Query）</h3><p>详见《<a href="/2021/05/03/Groovy-4%E4%B9%8B%E6%96%B0%E7%89%B9%E6%80%A7GINQ%E9%A2%84%E8%A7%88/" title="Groovy 4之新特性GINQ预览">Groovy 4之新特性GINQ预览</a>》</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>详见<span class="exturl" data-url="aHR0cDovL2dyb292eS1sYW5nLm9yZy9yZWxlYXNlbm90ZXMvZ3Jvb3Z5LTQuMC5odG1s">Groovy 4.0.0 Release Notes<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>Groovy 4.0.0除了新增众多语言特性外，还修正了许多bug，尤其是静态编译那块。另外，Groovy 4.0.0也是唯一真正支持Java 17的版本，故一旦发布，强烈建议升级至该版本。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><span class="exturl" data-url="aHR0cHM6Ly9rZXlob2xlc29mdHdhcmUuY29tLzIwMjEvMTEvMTUvYmFjay1pbi10aGUtZ3Jvb3Z5LTQv">《Back in the Groovy 4》<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>GINQ</tag>
        <tag>Groovy 4</tag>
        <tag>Switch Expression</tag>
        <tag>Record Class</tag>
        <tag>Sealed Class</tag>
        <tag>Range</tag>
        <tag>TOML</tag>
      </tags>
  </entry>
  <entry>
    <title>GroovyHelp之怀旧归档篇</title>
    <url>/2023/01/27/GroovyHelp%E4%B9%8B%E6%80%80%E6%97%A7%E5%BD%92%E6%A1%A3%E7%AF%87/</url>
    <content><![CDATA[<h2 id="GroovyHelp简介"><a href="#GroovyHelp简介" class="headerlink" title="GroovyHelp简介"></a>GroovyHelp简介</h2><p>&emsp;&emsp;GroovyHelp是一款针对<strong>Javadoc</strong>及<strong>Groovydoc</strong>研发的多功能API文档管理软件，它能够帮助<strong>Java开发人员</strong>、<strong>Groovy开发人员</strong>以及<strong>Android开发人员</strong>方便快速地<strong>搜索</strong>、<strong>查阅</strong>、<strong>比较</strong>API文档并对其进行高效管理，从此无需苦苦寻觅chm格式的帮助文档了。可访问<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGxhbnN1bi9ncm9vdnloZWxw">GroovyHelp项目首页<i class="fa fa-external-link-alt"></i></span>，获悉GroovyHelp最新信息。<span id="more"></span></p>
<p>&emsp;&emsp;GroovyHelp的雏形最早设计并开发于2007年年初，记得那时的我还在eBay实习，工作比较舒心，就利用闲暇时间开发了GroovyHelp的第一个版本，该版本相对比较初级，因为它只能将API信息抽取出来，而无法分门别类（比如类、接口、方法、构造方法等）。在2007年到2010年，期间断断续续开发了几个版本，也增加了不少功能，并增强了原有功能（比如支持对API信息进行分类），可惜这些版本的性能和易用性方面都不太好。终于在2011年年初决定将其完全重写，GroovyHelp3就此诞生了，它包含了这些年开发GroovyHelp时汲取的经验和教训，犹如神鸟凤凰般浴火重生。无论是在性能、易用性、健壮性方面，还是功能多样性方面都有了长足的进步。更新此文时，GroovyHelp的最新版本是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGxhbnN1bi9ncm9vdnloZWxwL3Jhdy9tYXN0ZXIvZGlzdHJpYnV0aW9ucy9ncm9vdnloZWxwLTUuMC4wLXJjX2IyMDE1MDEyNTAxLnppcA==">groovyhelp-5.0.0-rc_b2015012501<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="GroovyHelp主要特性"><a href="#GroovyHelp主要特性" class="headerlink" title="GroovyHelp主要特性"></a>GroovyHelp主要特性</h2><ol>
<li>根据输入关键字，查找类，接口，方法等帮助信息（支持模糊查询）</li>
<li>支持全文检索，并高亮搜索结果（支持模糊检索）</li>
<li>以树型结构完整展现文档的整体结构及文件结构</li>
<li>支持源码关联，即查看文档所对应的源码，并语法高亮显示源码</li>
<li>提供帮助文档比较功能（比如Java 7与Java 6帮助文档间的比较），高效掌握API变化</li>
<li>自带Java各包的API使用及Groovy编程示例，方便参考和查阅</li>
<li>支持JDK1.4+自带的Javadoc生成的帮助文档</li>
<li>支持Groovy1.8+自带的Groovydoc生成的帮助文档</li>
<li>支持英文及中文API文档</li>
<li>语法高亮网页中的代码片段</li>
<li>无需解压文档及源码ZIP压缩包，节省磁盘空间</li>
<li>支持在线的Javadoc（比如<span class="exturl" data-url="aHR0cDovL2pleGNlbGFwaS5zb3VyY2Vmb3JnZS5uZXQvcmVzb3VyY2VzL2phdmFkb2NzLzJfNl8xMC9kb2NzL2luZGV4Lmh0bWw=">jexcelapi的在线Javadoc<i class="fa fa-external-link-alt"></i></span>）</li>
<li>用户可以自由选择所需的jre1.6.0+（可通过环境变量GROOVYHELP_JAVA_HOME指定）</li>
<li>提供多种浏览器(JFX浏览器、本地浏览器、简易浏览器)</li>
<li>为中国大陆用户提供在线字典功能</li>
<li>同时支持Windows、Linux以及Mac OS X</li>
</ol>
<h2 id="GroovyHelp安装和使用"><a href="#GroovyHelp安装和使用" class="headerlink" title="GroovyHelp安装和使用"></a>GroovyHelp安装和使用</h2><ol>
<li><p>从<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGxhbnN1bi9ncm9vdnloZWxw">GroovyHelp项目主页<i class="fa fa-external-link-alt"></i></span>上下载最新稳定版本到本地（压缩包的命名规则是：groovyhelp-版本号-(ea|rc|ga)_构建日期编号.zip）</p>
</li>
<li><p>解压groovyhelp-X.X.X-XX_yyyyMMddXX.zip，注意：解压路径中不要有中文和空格。<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.001.png"></p>
</li>
<li><p>设置GROOVYHELP_JAVA_HOME环境变量，将其值赋为<span class="exturl" data-url="aHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvamF2YXNlL2Rvd25sb2Fkcy9pbmRleC5odG1s">Oracle JDK/JRE 1.6.0u10+<i class="fa fa-external-link-alt"></i></span>所在路径（比如：D:\_DEV\Java\jdk1.6.0）。如果在机器上没有相关JDK/JRE，可以到<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMv">Oracle官方下载页面<i class="fa fa-external-link-alt"></i></span>下载相应的JDK/JRE。注：如果不设置GROOVYHELP_JAVA_HOME环境变量，那么将使用系统默认的JRE，可能不是GroovyHelp所需要，会导致GroovyHelp无法正常使用。<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.002.png"></p>
</li>
<li><p>双击执行groovyhelp.exe（用于Windows）<strong>或</strong>groovyhelp（用于Linux和Mac OS，执行之前需通过“chmod <strong>5</strong>55 groovyhelp”修改其访问权限），启动后界面如下所示：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.003.png"></p>
</li>
<li><p>添加API文档（本地的或在线的均可）</p>
<ul>
<li>5.1 点击菜单Docs -&gt; Manage Docs，显示如下界面：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.004.png"></li>
<li>5.2 点击上述界面中的“Add”，显示如下界面：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.005.png"></li>
<li>5.3 在上述界面中输入“Doc Name”（文档名称）、“Doc Home”（API文档所在路径(压缩包或文件夹均可)，或在线文档的index.html页面的url，比如<code>http://jexcelapi.sourceforge.net/resources/javadocs/2_6_10/docs/index.html</code>。如果<code>http://jexcelapi.sourceforge.net/resources/javadocs/2_6_10/docs/</code>可跳转至index.html页面，则输入<code>http://jexcelapi.sourceforge.net/resources/javadocs/2_6_10/docs/</code>亦可）、而“Src Home”（源码路径(压缩包或文件夹均可)）是可选的。最后点击“Finish”按钮对AIP文档创建索引（如果是在线文档则还会有下载文档这一过程）。<strong>注：</strong>如果对在线文件创建索引，则会遇到某些大页面（1M~2M）下载速度比较慢现象，<strong>请耐心等待</strong>，等待时间长短决定于页面文件大小及带宽。而创建索引时CPU使用率保持在95%~100%属正常现象，该过程比较耗资源。<ul>
<li><em>a，为本地文档创建索引：</em><br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.006.png"></li>
<li><em>b，为在线文档创建索引（下图所示的是下载过程）：</em><br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.007.png"></li>
</ul>
</li>
<li>5.4 索引创建完毕之后，显示如下界面（顺便提一下，通过点击以下界面中的“Enabled”一列中的复选框可“启用”或“停用”API文档，这是出于性能方面的考虑，建议不要同时启用超过5份API文档）。<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.008.png"></li>
</ul>
</li>
<li><p>点击上述界面中“Close”按钮，关闭该对话框显示以下界面，开始使用API文档：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.009.png"></p>
<ul>
<li><p>6.1 “单击”文档树中的API信息节点查看相关内容：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.010.png"></p>
</li>
<li><p>6.2 如果设置了“Src Home”，则还可以通过点击浏览器中的“J”图标按钮查看相关源码：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.011.png"></p>
</li>
<li><p>6.3 如果对API信息之外的内容感兴趣，可以点击“Resource” TAB页，查看其他资源信息：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.012.png"></p>
</li>
<li><p>6.4 如果需要根据关键字搜索API信息，则可以点击“Index” TAB页，输入API关键字（比如write），支持模糊搜索（?表示单个字符，*表示多个字符），双击某个搜索结果项，显示相关信息。如果与双击的搜索结果与多个API信息匹配，那么将显示分类页面。点击分类页面中的其中一项即可查看相关内容。（注：可以通过选中或取消“Scope”中的分类复选框以限定搜索范围）<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.013.png"></p>
</li>
<li><p>6.5 点击上述分类页面中的某个链接，查看相关API信息：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.014.png"></p>
</li>
<li><p>6.6 如果需要进行更宽泛的搜索（不仅限于API信息），则可以点击“Search” TAB页面，输入关键字，回车或点击搜索按钮进行搜索，支持模糊搜索（?表示单个字符，*表示多个字符），双击搜索结果项查看相关信息（页面中高亮部分便是关键字指定内容）：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.015.png"></p>
</li>
<li><p>6.7 有时对某些Java API的用法不太熟悉，可以点击“Examples” TAB页，双击某个包，点击相关链接查看相应用法实例：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.016.png"></p>
</li>
<li><p>6.8 如果需要比较两个版本API文档的差异，可以通过点击“Tools” -&gt; “Compare Docs”，显示如下对话框。选择比较的两个文档以及比较范围，点击“Compare”按钮进行比较，点击各个API信息节点(+)查看变化内容：</p>
<ul>
<li><em>a，设置API文档比较对象及范围</em><br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.017.png"></li>
<li><em>b，点击各个节点查看变化内容</em><br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.018.png"></li>
</ul>
</li>
<li><p>6.9 如果觉得页面字体比较小，可以通过主界面右下角的调节器进行调整（双击可复位默认值100%），该功能自3.2.7 GA版本开始移至“Tools”：<br><br/><img data-src="Aspose.Words.9623da39-89b2-4d1d-8953-d01ceb6da583.019.png"></p>
</li>
</ul>
</li>
</ol>
<h2 id="GroovyHelp版本升级"><a href="#GroovyHelp版本升级" class="headerlink" title="GroovyHelp版本升级"></a>GroovyHelp版本升级</h2><ol>
<li>访问<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGxhbnN1bi9ncm9vdnloZWxw">GroovyHelp项目首页<i class="fa fa-external-link-alt"></i></span>下载最新版本的GroovyHelp。</li>
<li>删除老版本GroovyHelp所在目录下除“idx文件夹”以及“用户自己的文件或文件夹（比如一些放置在GroovyHelp所在目录下的docs文件）”外的所有文件和文件夹。</li>
<li>将新版本GroovyHelp压缩包解压到老版本所在目录。</li>
<li>升级完毕</li>
</ol>
<p><strong>注：</strong>升级后第一次启动会比较缓慢，请耐心等待。</p>
<h2 id="GroovyHelp使用技巧"><a href="#GroovyHelp使用技巧" class="headerlink" title="GroovyHelp使用技巧"></a>GroovyHelp使用技巧</h2><ol>
<li>使用快捷键关闭或切换TAB页。ctrl+w关闭当前TAB页，ctrl+q关闭所有TAB页，ctrl+e关闭除当前TAB页外的其他TAB页，ctrl+Tab切换TAB页。</li>
<li>如果GroovyHelp需要在多处使用，比如想通过移动硬盘在多台电脑里使用GroovyHelp，但又不想一遍又一遍为API文档创建索引，那么可以在GroovyHelp的解压目录下新建docs目录，并将文档放置其中。以后即使GroovyHelp整个解压文件夹被移动，也不会影响对API文档的使用。</li>
<li>如果发现索引文件越来越大，可以通过点击选中“Tools” -&gt; “Optimize Index Before Exit”菜单项，在退出应用前，对索引文件进行压缩优化，使其大小大幅减小。注：该优化操作可能需要几分钟才能完成，所以不建议频繁优化。</li>
<li>在Windows系统下，定期做一下磁盘整理。</li>
</ol>
<h2 id="GroovyHelp常见问题"><a href="#GroovyHelp常见问题" class="headerlink" title="GroovyHelp常见问题"></a>GroovyHelp常见问题</h2><ol>
<li>对于在Windows 7(x64)下使用64位JVM无法正常运行GroovyHelp的朋友，建议使用32位JVM，这是由于GroovyHelp所依赖的个别组件对64位JVM支持得不太好 </li>
<li>在Mac OS X下，时常出现打开页面或关闭页面时JVM崩溃的情况，这是因为GroovyHelp所依赖的个别组件对Mac OS X支持得很不好，所以建议通过设置GROOVYHELP_JAVAFX_HOME环境变量以启用JFX浏览器，而自JDK1.7.0u04开始，Oracle官方JDK开始支持Mac OS X，并自带了JavaFX SDK，则无需设置该环境变量。在Mac OS X 下，推荐使用Oracle官方JDK1.7.0u4+ （比如JDK1.7.0u05）</li>
</ol>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>&emsp;&emsp;相信目前GroovyHelp的这些功能足以应对API信息的各类查阅需求，如果发现什么BUG或有些什么好的建议可以通过<span class="exturl" data-url="aHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2dyb292eWhlbHAvaXNzdWVzL2xpc3Q=">GroovyHelp的Issues页面<i class="fa fa-external-link-alt"></i></span>或博客留言反馈。如果您使用的是GroovyHelp 3.2.0 GA以前版本，可以参考<span class="exturl" data-url="aHR0cDovL3d3dy5ibG9namF2YS5uZXQvQmx1ZVNVTi9hcmNoaXZlLzIwMTEvMDgvMjEvMzU2OTgwLmh0bWw=">《JAVA程序员帮助文档查看利器：GroovyHelp》<i class="fa fa-external-link-alt"></i></span>。</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>GroovyHelp</tag>
        <tag>Javadoc</tag>
        <tag>Groovydoc</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy之前世今生</title>
    <url>/2021/04/04/Groovy%E4%B9%8B%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
    <content><![CDATA[<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>Groovy最初于2003年由James Strachan设计并实现了其原型，迄今已十八岁。Groovy的成长过程，也是众多智者贡献心力的过程。而我大约在2006年底开始研究Groovy，那时Groovy 1.0正式版还没发布，主要由Jochen Theodorou一人维护，所以Jochen Theodorou在我心里一直是Groovy的养父。当初如果没有他的坚持，Groovy很可能早已夭折。而在Groovy 1.0正式版本发布后，Groovy的贡献者逐渐增多，其中令我印象比较深刻的贡献者有以下这么几位：<span id="more"></span></p>
<ul>
<li>Jochen Theodorou</li>
<li>Paul King</li>
<li>Cédric Champeau</li>
<li>Guillaume Laforge</li>
<li>Daniel Sun（It’s me &#x1F61C;）</li>
<li>Dierk König</li>
<li>Eric Milles</li>
<li>Alex Tkachman</li>
<li>John Wilson</li>
<li>Roshan Dawrani</li>
<li>Russel Winder（已故）</li>
<li>Danno Ferrin</li>
<li>Hamlet D’Arcy</li>
<li>Jeremy Rayner</li>
<li>John Wagenleitner</li>
<li>Sergei Egorov</li>
<li>Andres Almiray</li>
<li>Gavin Grover （鲜有人提及但语言造诣很高的布道师）</li>
</ul>
<p>从2014年开始，Groovy成为Apache软件基金会的顶级项目，以更开放的姿态迎接更多的贡献者，并稳步发展着。</p>
<h2 id="波折"><a href="#波折" class="headerlink" title="波折"></a>波折</h2><p>Groovy在成长过程中经历过大大小小不少波折，其中影响比较大的有：</p>
<ol>
<li>Groovy语言雏形初成后（Groovy 1.0未发布），James Strachan便离开Groovy核心组；</li>
<li>James Strachan于2009年发表不当言论，此后其他语言阵营以此作为论据否定Groovy，无知者人云亦云；<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I can honestly say if someone had shown me the Programming in Scala book by by Martin Odersky, Lex Spoon &amp; Bill Venners back in 2003 I&#x27;d probably have never created Groovy.</span><br><span class="line"></span><br><span class="line">( 引用自 http://macstrac.blogspot.com/2009/04/scala-as-long-term-replacement-for.html )</span><br></pre></td></tr></table></figure>
虽然James Strachan于2016年坦言他依然喜欢Groovy且不再使用Scala，但2009~2016长达7年的不良影响已造成，需要Groovy社区更多的努力方可逐渐消除。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I still love groovy (jenkins pipelines are so groovy!), java, go, typescript and kotlin. I don’t use scala any more</span><br><span class="line"></span><br><span class="line">( 引用自 https://twitter.com/jstrachan/status/784333918078169088?s=20 )</span><br></pre></td></tr></table></figure></li>
<li>Pivotal公司（即Spring的母公司）从2015年开始停止资助Groovy及Grails的研发，Groovy的发展脚步有所减缓。</li>
</ol>
<h2 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h2><p>下面是Paul King撰写的一篇关于Groovy发展历史的论文及其相关的PPT，带领大家回顾Groovy的前世今生。</p>
<h3 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h3><div class="pdfobject-container" data-target="/2021/04/04/Groovy之前世今生/A.History.of.the.Groovy.Programming.Language.pdf" data-height="500px"></div>

<h3 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h3><div class="pdfobject-container" data-target="/2021/04/04/Groovy之前世今生/HistoryGroovy_PaulKing_May2021.pdf" data-height="500px"></div>
]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Groovy History</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM Bytecode之invokedynamic漫谈</title>
    <url>/2023/01/14/JVM-Bytecode%E4%B9%8Binvokedynamic%E6%BC%AB%E8%B0%88/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>invokedynamic是直到Java 7才引入的bytecode指令，当初设计该指令时，是为了方便JVM动态语言的实现，比如Groovy、JRuby、Jython等，而其真正被Java界关注到则是从Java 8开始，因为Java 8引入了Lambda Expression以及Method Reference这两大特性，其实现便是基于invokedynamic指令完成的。<span id="more"></span></p>
<p>通过invokedynamic可以不再借助Java中的Reflection特性来实现动态特性，比如duck typing。另外，可以在一定程度上规避Reflection性能问题，因为Reflection在每次方法调用时都会做一些检查，而invokedynamic只会在创建method handle时才做这些检查。</p>
<h2 id="invokedynamic基本原理"><a href="#invokedynamic基本原理" class="headerlink" title="invokedynamic基本原理"></a>invokedynamic基本原理</h2><p>invokedynamic的整体执行过程如下图所示：<br><img data-src="invokedynamic.png" alt="invokedynamic执行过程"></p>
<p>当JVM执行invokedynamic指令时，如果是首次执行，则通过invokedynamic指令指定的Bootstrap Method来创建Callsite，并在创建Callsite时会先创建method handle，然后与Callsite绑定，而method handle的创建过程其实也就是一个方法实现的选择过程，这也正是动态的体现，因为这一切都发生在运行时。此外，该Callsite还可以在后续执行中提升执行效率，因为后续执行会直接调用Callsite所绑定的method handle，而不用调用Bootstrap Method，也意味着免去了因方法选择而产生的性能开销。</p>
<p>下面再结合一些代码片段进一步阐述上面提到的invokedynamic执行过程：<br><img data-src="invokedynamic_execution.png" alt="invokedynamic执行示意"></p>
<h2 id="invokedynamic实战"><a href="#invokedynamic实战" class="headerlink" title="invokedynamic实战"></a>invokedynamic实战</h2><p>示例中的<code>IndyString</code>类的<code>concat</code>方法通过invokedynamic指令实现，详见注释。</p>
<h3 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h3><figure class="highlight groovy"><figcaption><span>基于Groovy4以及ASM9的invokedynamic演示</span><span class="exturl" data-url="aHR0cHM6Ly9nd2MtZXhwZXJpbWVudC5hcHBzcG90LmNvbQ==">Groovy Web Console<i class="fa fa-external-link-alt"></i></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Grapes</span>([</span><br><span class="line">    <span class="meta">@Grab</span>(group = <span class="string">&#x27;org.ow2.asm&#x27;</span>, module = <span class="string">&#x27;asm&#x27;</span>, version = <span class="string">&#x27;9.4&#x27;</span>),</span><br><span class="line">    <span class="meta">@Grab</span>(group = <span class="string">&#x27;org.ow2.asm&#x27;</span>, module = <span class="string">&#x27;asm-commons&#x27;</span>, version = <span class="string">&#x27;9.4&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.FieldVisitor</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Handle</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Label</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Type</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.commons.GeneratorAdapter</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.commons.Method</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.CallSite</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.ConstantCallSite</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandle</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandles</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodType</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.ACC_FINAL</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.ACC_PRIVATE</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.ACC_PUBLIC</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.ALOAD</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.H_INVOKESTATIC</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.INVOKESPECIAL</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.PUTFIELD</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.RETURN</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.objectweb.asm.Opcodes.V1_8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成IndyString类，并创建其实例</span></span><br><span class="line">SimpleClassLoader simpleClassLoader = <span class="keyword">new</span> SimpleClassLoader(Bootstrap.<span class="keyword">class</span>.classLoader)</span><br><span class="line">Class&lt;?&gt; indyStringClass = simpleClassLoader.defineClass(<span class="string">&quot;IndyString&quot;</span>, generateIndyStringClassBytes())</span><br><span class="line">Object indyString = indyStringClass.getConstructor(String.class).newInstance(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用IndyString的concat方法，并验证执行结果</span></span><br><span class="line">String result = indyString.getClass().getMethod(<span class="string">&quot;concat&quot;</span>, String.class).invoke(indyString, <span class="string">&quot;World&quot;</span>)</span><br><span class="line">assert <span class="string">&#x27;HelloWorld&#x27;</span> == result</span><br><span class="line">println result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  自定义classloader，用来加载生成的IndyString类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">class SimpleClassLoader extends ClassLoader &#123;</span><br><span class="line">    SimpleClassLoader(ClassLoader parent) &#123;</span><br><span class="line">        super(parent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; defineClass(final String name, final byte[] b) &#123;</span><br><span class="line">        return super.defineClass(name, b, <span class="number">0</span>, b.length)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过ASM生成IndyString</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">static byte[] generateIndyStringClassBytes() throws Exception &#123;</span><br><span class="line">    ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES)</span><br><span class="line">    FieldVisitor fv</span><br><span class="line">    MethodVisitor mv</span><br><span class="line"></span><br><span class="line">    cw.visit(V1_8, ACC_PUBLIC | ACC_FINAL, <span class="string">&quot;IndyString&quot;</span>, null, <span class="string">&quot;java/lang/Object&quot;</span>)</span><br><span class="line">    cw.visitSource(<span class="string">&quot;IndyString.java&quot;</span>, null);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        fv = cw.visitField(ACC_PRIVATE | ACC_FINAL, <span class="string">&quot;str&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>, null, null)</span><br><span class="line">        fv.visitEnd()</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        mv = cw.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, null, null)</span><br><span class="line">        mv.visitCode()</span><br><span class="line">        Label l0 = new Label()</span><br><span class="line">        mv.visitLabel(l0)</span><br><span class="line">        mv.visitVarInsn(ALOAD, <span class="number">0</span>)</span><br><span class="line">        mv.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, false)</span><br><span class="line">        Label l1 = new Label()</span><br><span class="line">        mv.visitLabel(l1)</span><br><span class="line">        mv.visitVarInsn(ALOAD, <span class="number">0</span>)</span><br><span class="line">        mv.visitVarInsn(ALOAD, <span class="number">1</span>)</span><br><span class="line">        mv.visitFieldInsn(PUTFIELD, <span class="string">&quot;IndyString&quot;</span>, <span class="string">&quot;str&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>)</span><br><span class="line">        Label l2 = new Label()</span><br><span class="line">        mv.visitLabel(l2)</span><br><span class="line">        mv.visitInsn(RETURN)</span><br><span class="line">        Label l3 = new Label()</span><br><span class="line">        mv.visitLabel(l3)</span><br><span class="line">        mv.visitMaxs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        mv.visitEnd()</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        GeneratorAdapter ga = new GeneratorAdapter(ACC_PUBLIC, Method.getMethod(<span class="string">&quot;java.lang.String concat(java.lang.String)&quot;</span>), null, null, cw)</span><br><span class="line">        ga.loadThis()</span><br><span class="line">        ga.getField(Type.getType(<span class="string">&quot;LIndyString;&quot;</span>), <span class="string">&quot;str&quot;</span>, Type.getType(String.class))</span><br><span class="line">        ga.loadArg(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (1) 生成调用`String concat(String, String)`方法的invokedynamic指令（预埋“接口”），而该方法的具体实现由此处的`BOOTSTRAP_METHOD`动态指定</span></span><br><span class="line">        ga.invokeDynamic(<span class="string">&quot;concat&quot;</span>, <span class="string">&quot;(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>, BOOTSTRAP_METHOD)</span><br><span class="line">        ga.returnValue()</span><br><span class="line">        ga.endMethod()</span><br><span class="line">    &#125;</span><br><span class="line">    cw.visitEnd()</span><br><span class="line"></span><br><span class="line">    return cw.toByteArray()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定bootstrap方法</span></span><br><span class="line">@groovy.transform.Field </span><br><span class="line">static final Handle BOOTSTRAP_METHOD =</span><br><span class="line">    new Handle(H_INVOKESTATIC, <span class="string">&quot;Bootstrap&quot;</span>, <span class="string">&quot;bootstrap&quot;</span>,</span><br><span class="line">        MethodType.methodType(CallSite.class, MethodHandles.Lookup.class, String.class, MethodType.class)</span><br><span class="line">            .toMethodDescriptorString(),</span><br><span class="line">        false)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义bootstrap类，并实现bootstrap方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">class Bootstrap &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (2) 确定预埋“接口”的具体实现，由method handle指定。并生成Callsite，将method handle与之绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    static CallSite bootstrap(MethodHandles.Lookup caller, String name, MethodType type) &#123;</span><br><span class="line">        println <span class="string">&quot;caller: $&#123;caller&#125;, name: $&#123;name&#125;, type: $&#123;type&#125;&quot;</span></span><br><span class="line">        MethodHandle methodHandle =</span><br><span class="line">            <span class="string">&quot;true&quot;</span> == System.getProperty(<span class="string">&quot;enableIndyStringPreview&quot;</span>) </span><br><span class="line">                ? MethodHandles.lookup().findStatic(Functions.class, <span class="string">&quot;groovyConcat&quot;</span>, type) </span><br><span class="line">                : MethodHandles.lookup().findStatic(Functions.class, name, type)</span><br><span class="line">        return new ConstantCallSite(methodHandle)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供concat方法的多种实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">class Functions &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (3) 提供预埋“接口”的具体实现，在执行invokedynamic时被调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    static String concat(String s1, String s2) &#123;</span><br><span class="line">        return s1 + s2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * (3) 提供预埋“接口”的具体实现（preview版本），在执行invokedynamic时被调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    static String groovyConcat(String s1, String s2) &#123;</span><br><span class="line">        return <span class="string">&quot;$s1$s2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Functions() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="示例Bytecode"><a href="#示例Bytecode" class="headerlink" title="示例Bytecode"></a>示例Bytecode</h3><figure class="highlight java"><figcaption><span>上面示例中通过ASM生成的`IndyString`字节码</span></figcaption><table><tr><td class="code"><pre><span class="line">Classfile /D:/_APPS/groovy_apps/indy/IndyString.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2023</span>年<span class="number">1</span>月<span class="number">15</span>日; size <span class="number">584</span> bytes</span><br><span class="line">  SHA-<span class="number">256</span> checksum 368db5be43fc93b3fa1746cce06cedd02d8e856224c1eb48b26abe1d62067746</span><br><span class="line">  Compiled from <span class="string">&quot;IndyString.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">IndyString</span></span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: (<span class="number">0x0011</span>) ACC_PUBLIC, ACC_FINAL</span><br><span class="line">  this_class: #<span class="number">2</span>                          <span class="comment">// IndyString</span></span><br><span class="line">  super_class: #<span class="number">4</span>                         <span class="comment">// java/lang/Object</span></span><br><span class="line">  interfaces: <span class="number">0</span>, fields: <span class="number">1</span>, methods: <span class="number">2</span>, attributes: <span class="number">2</span></span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Utf8               IndyString</span><br><span class="line">   #<span class="number">2</span> = Class              #<span class="number">1</span>             <span class="comment">// IndyString</span></span><br><span class="line">   #<span class="number">3</span> = Utf8               java/lang/Object</span><br><span class="line">   #<span class="number">4</span> = Class              #<span class="number">3</span>             <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">5</span> = Utf8               IndyString.java</span><br><span class="line">   #<span class="number">6</span> = Utf8               str</span><br><span class="line">   #<span class="number">7</span> = Utf8               Ljava/lang/String;</span><br><span class="line">   #<span class="number">8</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">9</span> = Utf8               (Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">10</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">11</span> = NameAndType        #<span class="number">8</span>:#<span class="number">10</span>         <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">12</span> = Methodref          #<span class="number">4.</span>#<span class="number">11</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">13</span> = NameAndType        #<span class="number">6</span>:#<span class="number">7</span>          <span class="comment">// str:Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">14</span> = Fieldref           #<span class="number">2.</span>#<span class="number">13</span>         <span class="comment">// IndyString.str:Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">15</span> = Utf8               concat</span><br><span class="line">  #<span class="number">16</span> = Utf8               (Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  #<span class="number">17</span> = Utf8               Bootstrap</span><br><span class="line">  #<span class="number">18</span> = Class              #<span class="number">17</span>            <span class="comment">// Bootstrap</span></span><br><span class="line">  #<span class="number">19</span> = Utf8               bootstrap</span><br><span class="line">  #<span class="number">20</span> = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">  #<span class="number">21</span> = NameAndType        #<span class="number">19</span>:#<span class="number">20</span>        <span class="comment">// bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  #<span class="number">22</span> = Methodref          #<span class="number">18.</span>#<span class="number">21</span>        <span class="comment">// Bootstrap.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  #<span class="number">23</span> = MethodHandle       <span class="number">6</span>:#<span class="number">22</span>          <span class="comment">// REF_invokeStatic Bootstrap.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  #<span class="number">24</span> = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  #<span class="number">25</span> = NameAndType        #<span class="number">15</span>:#<span class="number">24</span>        <span class="comment">// concat:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">26</span> = InvokeDynamic      #<span class="number">0</span>:#<span class="number">25</span>         <span class="comment">// #0:concat:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">27</span> = Utf8               Code</span><br><span class="line">  #<span class="number">28</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">29</span> = Utf8               BootstrapMethods</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">IndyString</span><span class="params">(java.lang.String)</span>;</span><br><span class="line">    descriptor: (Ljava/lang/String;)V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">12</span>                 <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: aload_1</span><br><span class="line">         <span class="number">6</span>: putfield      #<span class="number">14</span>                 <span class="comment">// Field str:Ljava/lang/String;</span></span><br><span class="line">         <span class="number">9</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.lang.String <span class="title function_">concat</span><span class="params">(java.lang.String)</span>;</span><br><span class="line">    descriptor: (Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: getfield      #<span class="number">14</span>                 <span class="comment">// Field str:Ljava/lang/String;</span></span><br><span class="line">         <span class="number">4</span>: aload_1</span><br><span class="line">         <span class="number">5</span>: invokedynamic #<span class="number">26</span>,  <span class="number">0</span>             <span class="comment">// InvokeDynamic #0:concat:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line">        <span class="number">10</span>: areturn</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;IndyString.java&quot;</span></span><br><span class="line">BootstrapMethods:</span><br><span class="line">  <span class="number">0</span>: #<span class="number">23</span> REF_invokeStatic Bootstrap.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br></pre></td></tr></table></figure>

<h2 id="invokedynamic应用场景"><a href="#invokedynamic应用场景" class="headerlink" title="invokedynamic应用场景"></a>invokedynamic应用场景</h2><p>从本质上来看，invokedynamic关注的只有方法签名（方法名、输入以及输出），可以理解为更抽象的一种“接口”，这比传统的<code>interface</code>更加灵活，因为invokedynamic不要求被调用方法在同一棵类型继承树中。而至于具体实现都是在运行时才确定的，所以正如概述所提到的，invokedynamic指令适合用来实现一些动态特性，比如动态语言Groovy从2.0起便已开始使用invokedynamic实现方法调用。另外，如果方法的具体实现还有待完善，且后续的完善可能不限定于某个interface的具体实现，那么也可以借助invokedynamic在bytecode层面确定好“接口”，至于具体实现可以日后不断调整。其实invokedynamic在Java中已经有不少应用，包含但不限于以下场景：</p>
<ul>
<li>Lambda Expression以及Method Reference的实现</li>
<li><code>String</code>拼接，即字符串的<code>+</code>操作<br>Java 9之前，编译时固化了<code>+</code>操作实现，即通过<code>StringBuilder</code>实现拼接，而从Java 9开始，使用invokedynamic指令，延后具体的拼接操作至运行时，为后续Java版本对字符串拼接的不断优化提供可能</li>
<li>Record的<code>toString</code>、<code>hashCode</code>以及<code>equals</code>方法<br>Record的字段不论数量还是类型都随Record的定义不同而各有差异，通过invokedynamic可以简化<code>toString</code>、<code>hashCode</code>以及<code>equals</code>方法，即不用在编译时生成所有的方法实现，这样class文件的大小也不会因字段不同而改变</li>
<li>Reflection的替代<br>既然invokedynamic具有众多优点，何不考虑通过invokedynamic重构既有的Reflection实现呢？Java 18也有此想法，并在<span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLm9yZy9qZXBzLzQxNg==">JEP 416<i class="fa fa-external-link-alt"></i></span>提出并实现。而正所谓英雄所见略同，在我的个人项目<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGxhbnN1bi9mYXN0LXJlZmxlY3Rpb24=">fast-reflection<i class="fa fa-external-link-alt"></i></span>中，也尝试过实现该想法。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2UxNy9odG1sL2luZGV4Lmh0bWw=">The Java Virtual Machine Specification - Java SE 17 Edition<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdyb292eS1sYW5nLm9yZy9sYXRlc3QvaHRtbC9kb2N1bWVudGF0aW9uL2ludm9rZWR5bmFtaWMtc3VwcG9ydC5odG1s">Groovy InvokeDynamic support<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Bytecode</tag>
        <tag>invokedynamic</tag>
        <tag>Reflection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java各大版本新特性及改进概览</title>
    <url>/2024/07/15/Java%E5%90%84%E5%A4%A7%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E5%8F%8A%E6%94%B9%E8%BF%9B%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在过去的几年中，Java通过不断的版本更新，持续引入了许多新的特性和改进，令Java语言屹立在编程语言之林。本文将介绍从Java 7到Java 22的主要新特性及改进，回顾Java语言演进的心路历程。<span id="more"></span></p>
<h2 id="主要新特性及改进"><a href="#主要新特性及改进" class="headerlink" title="主要新特性及改进"></a>主要新特性及改进</h2><table>
<thead>
<tr>
<th>Java版本</th>
<th>主要新特性及改进</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Java 23</strong></td>
<td>1. Primitive Types in Patterns, instanceof, and switch (Preview) (模式、<code>instanceof</code> 和 <code>switch</code>中的基本类型（预览）)<br>2. Class-File API (Second Preview) (类文件 API（第二次预览）)<br>3. Markdown Documentation Comments (Markdown 文档注释)<br>4. Vector API (Eighth Incubator) (向量 API（第八次孵化器版）)<br>5. Stream Gatherers (Second Preview) (流收集器（第二次预览）)<br>6. Deprecate the Memory-Access Methods in sun.misc.Unsafe for Removal (将 <code>sun.misc.Unsafe</code> 中的内存访问方法标记为废弃以供移除)<br>7. ZGC: Generational Mode by Default (ZGC：默认启用代际模式)<br>8. Module Import Declarations (Preview) (模块导入声明（预览）)<br>9. Implicitly Declared Classes and Instance Main Methods (隐式声明的类和实例主方法)<br>10. Structured Concurrency (Third Preview) (结构化并发（第三次预览）)<br>11. Scoped Values (Third Preview) (范围值（第三次预览）)<br>12. Flexible Constructor Bodies (Second Preview) (灵活的构造函数体（第二次预览）)</td>
</tr>
<tr>
<td><strong>Java 22</strong></td>
<td>1. Region Pinning for G1（G1垃圾收集器的区域固定）<br>2. Statements before super(…) (Preview)（super(…)之前的语句（预览））<br>3. Foreign Function and Memory API（外部函数和内存API）<br>4. Unnamed Variables &amp; Patterns（未命名变量和模式）<br>5. Class-File API (Preview)（类文件API（预览））<br>6. String Templates (2nd Preview)（字符串模板（第二次预览））<br>7. Vector API (7th Incubator)（矢量API（第七次孵化））<br>8. Stream Gatherers (Preview)（流收集器（预览））<br>9. Structured Concurrency (2nd Preview)（结构化并发（第二次预览））<br>10. Implicitly Declared Classes and Instance Main Methods (2nd Preview)（隐式声明类和实例主方法（第二次预览））<br>11. Scoped Values（作用域值）</td>
</tr>
<tr>
<td><strong>Java 21 (LTS)</strong></td>
<td>1. String Templates (Preview)（字符串模板（预览））<br>2. Sequenced Collections（序列化集合）<br>3. Generational ZGC（代际ZGC）<br>4. Record Patterns（记录模式）<br>5. Pattern Matching for switch（switch的模式匹配）<br>6. Foreign Function &amp; Memory API (Third Preview)（外部函数和内存API（第三次预览））<br>7. Unnamed Patterns and Variables (Preview)（未命名模式和变量（预览））<br>8. Virtual Threads（虚拟线程）<br>9. Scoped Values (Preview)（作用域值（预览））<br>10. Vector API (6th Incubator)（矢量API（第六次孵化））<br>11. Deprecate the Windows 32 bit x86 Port for Removal（准备移除Windows 32位x86端口）<br>12. Prepare to Disallow the Dynamic Loading of Agents（准备禁止动态加载代理）<br>13. Key Encapsulation Mechanism API（密钥封装机制API）<br>14. Structured Concurrency (Preview)（结构化并发（预览））</td>
</tr>
<tr>
<td><strong>Java 20</strong></td>
<td>1. Scoped Values (Incubator)（作用域值（孵化））<br>2. Record Patterns (2nd Preview)（记录模式（第二次预览））<br>3. Pattern Matching for switch (4th Preview)（switch的模式匹配（第四次预览））<br>4. Foreign Function &amp; Memory API (2nd Preview)（外部函数和内存API（第二次预览））<br>5. Virtual Threads (2nd Preview)（虚拟线程（第二次预览））<br>6. Structured Concurrency (2nd Incubator)（结构化并发（第二次孵化））<br>7. Vector API (5th Incubator)（矢量API（第五次孵化））</td>
</tr>
<tr>
<td><strong>Java 19</strong></td>
<td>1. Record Patterns (Preview)（记录模式（预览））<br>2. Linux/RISC-V Port（Linux/RISC-V端口）<br>3. Foreign Function &amp; Memory API (Preview)（外部函数和内存API（预览））<br>4. Virtual Threads (Preview)（虚拟线程（预览））<br>5. Vector API (Fourth Incubator)（矢量API（第四次孵化））<br>6. Pattern Matching for switch (Third Preview)（switch的模式匹配（第三次预览））<br>7. Structured Concurrency (Incubator)（结构化并发（孵化））</td>
</tr>
<tr>
<td><strong>Java 18</strong></td>
<td>1. Deprecate Finalization for Removal（标记finalization为移除）<br>2. Internet Address Resolution SPI（互联网地址解析SPI）<br>3. Pattern Matching for switch (2nd Preview)（switch的模式匹配（第二次预览））<br>4. Reimplementation of Core Reflection using Method Handles（使用方法句柄重新实现核心反射）<br>5. Small Simple Web Server（小型简单的Web服务器）<br>6. Foreign Memory API (2nd Incubator)（外部内存API（第二次孵化））<br>7. Vector API (3rd Incubator)（矢量API（第三次孵化））<br>8. UTF-8 as Standard Charset（默认字符集为UTF-8）<br>9. Code Snippets in JavaDoc via @snippet Tag（在JavaDoc中通过@snippet标签编写代码片段）</td>
</tr>
<tr>
<td><strong>Java 17 (LTS)</strong></td>
<td>1. Restore Always-Strict Floating-Point Semantics（恢复严格浮点语义）<br>2. Enhanced Pseudo-Random Number Generators（增强伪随机数生成器）<br>3. New MacOS Rendering Pipeline（新的MacOS渲染管道）<br>4. macOS/AArch64 Port（macOS/AArch64端口）<br>5. Deprecate Applet API for Removal（标记Applet API为移除）<br>6. Strongly Encapsulate JDK Internals（强封装JDK内部）<br>7. Pattern Matching for switch（switch的模式匹配）<br>8. Remove RMI Activation（移除RMI激活）<br>9. Sealed Classes（密封类）<br>10. Remove Experimental AOT and JIT Compiler（移除实验性的AOT和JIT编译器）<br>11. Deprecate SecurityManager for Removal（标记SecurityManager为移除）<br>12. Foreign Function and Memory API (Incubator)（外部函数和内存API（孵化））<br>13. Vector API (2nd Incubator)（矢量API（第二次孵化））<br>14. Context-Specific Deserialization Filters（上下文特定的反序列化过滤器）</td>
</tr>
<tr>
<td><strong>Java 16</strong></td>
<td>1. Packaging Tool（打包工具）<br>2. Improvements to Java Stream API（Java Stream API的改进）<br>3. Java Records（Java记录）<br>4. Vector API (Incubator)（矢量API（孵化））<br>5. ZGC Concurrent Thread-Stack Processing（ZGC并发线程堆栈处理）<br>6. Unix-Domain Socket Channels（Unix域套接字通道）<br>7. Foreign Linker API (Incubator)（外部链接器API（孵化））<br>8. Foreign Memory Access API (3rd Incubator)（外部内存访问API（第三次孵化））<br>9. Invoke Default Methods via Java Reflection Proxy（通过Java反射代理调用默认方法）<br>10. Pattern Matching for instanceof（instanceof的模式匹配）</td>
</tr>
<tr>
<td><strong>Java 15</strong></td>
<td>1. Sealed Classes (Preview)（密封类（预览））<br>2. Hidden Classes（隐藏类）<br>3. Edwards-Curve Digital Signature Algorithm (EdDSA)（Edwards曲线数字签名算法（EdDSA））<br>4. Reimplement Legacy DatagramSocket API（重新实现旧的DatagramSocket API）<br>5. Pattern Matching for instanceof (2nd Preview)（instanceof的模式匹配（第二次预览））<br>6. Records (2nd Preview)（记录（第二次预览））<br>7. Foreign-Memory Access API (2nd Incubator)（外部内存访问API（第二次孵化））<br>8. Text Blocks（文本块）<br>9. ZGC: Scalable Low-Latency Garbage Collector（ZGC：可扩展低延迟垃圾收集器）<br>10. Shenandoah: Low-Pause-Time Garbage Collector（Shenandoah：低暂停时间垃圾收集器）<br>11. Disable and Deprecate Biased Locking（禁用和弃用偏向锁）<br>12. Removed Nashorn JavaScript Engine（移除Nashorn JavaScript引擎）<br>13. Removed Solaris and Sparc Ports（移除Solaris和Sparc端口）<br>14. Deprecate RMI Activation for Removal（标记RMI激活为移除）</td>
</tr>
<tr>
<td><strong>Java 14</strong></td>
<td>1. Records (Preview)（记录（预览））<br>2. Text Blocks（文本块）<br>3. Switch Expressions（switch表达式）<br>4. Pattern Matching for instanceof（instanceof的模式匹配）<br>5. Non-Volatile Memory Mapped Byte Buffers（通过FileChannel API的非易失性内存映射字节缓冲区）<br>6. Foreign Memory Access API（外部内存访问API）<br>7. NUMA-Aware Memory Allocation for G1 GC（G1 GC的NUMA感知内存分配）<br>8. Java Flight Recorder: Event Streaming（Java Flight Recorder：事件流）<br>9. Packaging Tool（打包工具）<br>10. Port ZGC to MacOS and Windows（将ZGC移植到MacOS和Windows）<br>11. Remove Concurrent Mark and Sweep GC（移除并发标记和清除GC）<br>12. Remove pack200 / unpack200 Tools（移除pack200 / unpack200工具）<br>13. Deprecate Solaris/Sparc and Solaris/x64 Ports（标记Solaris/Sparc和Solaris/x64端口为弃用）</td>
</tr>
<tr>
<td><strong>Java 13</strong></td>
<td>1. Switch Expressions（switch表达式）<br>2. Text Blocks（文本块）<br>3. Reimplementation of Legacy Socket API（重新实现旧的Socket API）<br>4. ZGC: Release Unused Memory Back to OS（ZGC：将未使用的内存释放回操作系统）</td>
</tr>
<tr>
<td><strong>Java 12</strong></td>
<td>1. Shenandoah GC（Shenandoah GC）<br>2. Switch Expressions (Preview)（switch表达式（预览））<br>3. JVM Constants API（JVM常量API）<br>4. Abortable Mixed Collections in G1（G1中的可中止混合集合）<br>5. Promptly Return Unused Committed Memory from G1（及时返回G1未使用的已提交内存）</td>
</tr>
<tr>
<td><strong>Java 11 (LTS)</strong></td>
<td>1. Removed Java EE and CORBA Modules（移除Java EE和CORBA模块）<br>2. HTTP Client (Standard)（标准化HTTP客户端）<br>3. var in Lambda Expressions（lambda表达式中的var关键字）<br>4. Elliptic Curve Cryptography（椭圆曲线密码协议）<br>5. Unicode 10（Unicode 10）<br>6. New Cryptographic Algorithms（新的加密算法）<br>7. Launch Single-File Source Code Programs（启动单文件源代码程序）<br>8. TLS 1.3 Support（支持TLS 1.3）<br>9. Deprecate Nashorn JavaScript Engine（标记Nashorn JavaScript引擎为弃用）</td>
</tr>
<tr>
<td><strong>Java 10</strong></td>
<td>1. Local-Variable Type Inference（局部变量类型推断）<br>2. Parallel Full GC for G1（G1的并行完全垃圾收集）<br>3. Graal as Experimental JIT Compiler（作为实验性JIT编译器的Graal）</td>
</tr>
<tr>
<td><strong>Java 9</strong></td>
<td>1. Java Modules（Java模块）<br>2. Java Reflection Module Class（Java反射模块类）<br>3. Try With Resources Enhancement（try-with-resources增强）<br>4. Compact Strings（紧凑字符串）<br>5. Java Microbenchmark Harness (JMH)（Java微基准测试工具（JMH））</td>
</tr>
<tr>
<td><strong>Java 8 (LTS)</strong></td>
<td>1. Lambda Expressions（lambda表达式）<br>2. Streams API（Streams API）<br>3. JavaFX（JavaFX）<br>4. Nashorn JavaScript Engine（Nashorn JavaScript引擎）</td>
</tr>
<tr>
<td><strong>Java 7</strong></td>
<td>1. Try with Resources（try-with-resources）<br>2. Catching Multiple Exceptions（捕获多个异常）<br>3. Fork/Join Framework（Fork/Join框架）<br>4. Strings in switch（switch中的字符串）<br>5. NIO 2.0（NIO 2.0）<br>6. Diamond Operator（菱形操作符）<br>7. Binary Literals（二进制字面量）<br>8. JVM Support for Dynamically-Typed Languages（JVM支持动态类型语言）</td>
</tr>
</tbody></table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamRrLXJlbG5vdGVzLWluZGV4Lmh0bWw=">JDK Release Notes<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java新特性及改进</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis之查询返回记录字段不全问题的解决方法</title>
    <url>/2017/04/28/MyBatis%E4%B9%8B%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E5%AD%97%E6%AE%B5%E4%B8%8D%E5%85%A8%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>当select的返回记录类型设置为map(或者其他Map类型，比如java.util.HashMap等)时，返回的map对象可能并未包含所有字段，即只出现有值的字段，而这恰恰是MyBatis的默认处理方式。</p>
<span id="more"></span>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>  <span class="attr">...</span>  <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了解决记录字段不全这个问题，我们可以在<code>settings</code>中增加callSettersOnNulls的设置，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;callSettersOnNulls&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>解决方案就这么简单，但研究MyBatis源码以分析解决该问题略微坎坷，希望对大家有用。</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>My first blog</title>
    <url>/2017/03/19/My-first-blog/</url>
    <content><![CDATA[<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println <span class="string">&quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>企业总体架构管控原则</title>
    <url>/2024/03/16/%E4%BC%81%E4%B8%9A%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84%E7%AE%A1%E6%8E%A7%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>总体架构管控原则是指导企业在架构规划、设计、实施和维护全过程中应遵循的基本规则，以确保架构的一致性、可靠性和有效性。这些原则有助于企业高效管理其信息技术资源，支持业务战略的实现，并提高组织的灵活性和响应速度。<span id="more"></span></p>
<h2 id="1-架构管理原则"><a href="#1-架构管理原则" class="headerlink" title="1 架构管理原则"></a><strong>1 架构管理原则</strong></h2><h3 id="1-1-统一架构原则"><a href="#1-1-统一架构原则" class="headerlink" title="1.1 统一架构原则"></a><strong>1.1 统一架构原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">公司统一开展总体架构规划和管控。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.统一的总体架构有利于避免信息系统的分散、异构、难以管控等问题；2.统一的总体架构有利于业务和信息化规划的实现和落地；3.统一的总体架构有利于优化IT治理工作。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.研发单位应按公司总体架构维护相一致的技术架构体系；2.根据公司业务和信息化战略，综合短期成果和长期影响，定期开展总体架构维护；3.统筹安排、集中管理总体架构规划。</td>
</tr>
</tbody></table>
<h3 id="1-2-统一管控原则"><a href="#1-2-统一管控原则" class="headerlink" title="1.2 统一管控原则"></a><strong>1.2 统一管控原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">推动业务与信息化融合，实现柔性、完整的总体架构落地。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.推动总体架构在全公司的整体运用、决策制定、全面指导和质量保障；2.推动跨业务领域的信息技术共享和应用；3.强化业务部门与信息部门间的协作；4.推动业务部门与信息部的互动，实现完整、迅速的总体架构落地。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.推动业务目标与系统架构设计相一致；2.推动架构设计过程的有效沟通；3.运用架构管控流程，规范化架构评审和资产维护过程；4.明确架构管控组织的管理角色和职责；5.制定架构评估指标，定期检查架构执行效率、遵从度和一致性；6.构建架构资产，支撑架构决策和评审的执行。</td>
</tr>
</tbody></table>
<h3 id="1-3-架构遵从原则"><a href="#1-3-架构遵从原则" class="headerlink" title="1.3 架构遵从原则"></a><strong>1.3 架构遵从原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">推动系统架构的分级评审，保证系统架构设计与总体架构规范相一致。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.对所有新建和在建项目进行系统架构评审，保证设计与总体架构一致；2.对所有已建应用完善或重建项目进行系统架构评审，保证设计与总体架构一致；3.提升系统架构的业务符合性、设计标准性、架构一致性和技术完备性。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.建立系统架构评审流程，保证系统建设与总体架构一致；2.推动项目管控与架构评审的高效整合，提升系统架构设计质量。</td>
</tr>
</tbody></table>
<h3 id="1-4-架构收敛原则"><a href="#1-4-架构收敛原则" class="headerlink" title="1.4 架构收敛原则"></a><strong>1.4 架构收敛原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">为保持技术方案的灵活性和健壮性，对同一类业务或技术场景，总体架构可提供多个备选技术方案。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.在总体架构中，减少支撑同一类场景的备选技术方案的数量至两个或一个，以降低架构管控的复杂性和技术多样性；2.选择实施难度小、复杂性低、非功能性约束低的技术方案作为推荐技术方案。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">有效控制总体架构的灵活性，备选方案收敛性直接影响信息化成本的变化。</td>
</tr>
</tbody></table>
<h3 id="1-5-融合共享原则"><a href="#1-5-融合共享原则" class="headerlink" title="1.5 融合共享原则"></a><strong>1.5 融合共享原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">以业务和信息化发展战略为导向，推动业务应用的融合集成。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.避免冗余系统林立，降低信息化运维成本；2.推动业务应用的深度集成，为智能分析决策奠定基础；3.避免在信息化建设中新建数据或应用孤岛；4.避免业务应用的重复建设。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.由公司全局着眼，考虑业务应用的融合集成；2.形成一套公司标准化的应用集成设计方法。 3.建立配套的流程和数据管控机制，以降低由企业级应用集成而产生的流程和数据管理复杂性；4.构建企业级的共享应用群和组件库。</td>
</tr>
</tbody></table>
<h3 id="1-6-服务架构原则"><a href="#1-6-服务架构原则" class="headerlink" title="1.6 服务架构原则"></a><strong>1.6 服务架构原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">利用SOA概念设计业务服务和IT服务。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">原因</td>
<td align="left">1.通过业界标准促进业务和IT的融合；2.需要通过灵活、可重用和标准化的IT架构支撑业务的快速变化；3.需要先进的设计理念。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.由公司全局着眼，考虑业务应用的融合集成；2.形成一套公司标准化的应用集成设计方法。 3.建立配套的流程和数据管控机制，以降低由企业级应用集成而产生的流程和数据管理复杂性；4.构建企业级的共享应用群和组件库。</td>
</tr>
</tbody></table>
<h2 id="2-业务架构原则"><a href="#2-业务架构原则" class="headerlink" title="2 业务架构原则"></a><strong>2 业务架构原则</strong></h2><h3 id="2-1战略契合原则"><a href="#2-1战略契合原则" class="headerlink" title="2.1战略契合原则"></a><strong>2.1战略契合原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">业务架构设计应与企业发展战略相契合</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.业务架构涵盖的业务能力应有效推进企业战略发展；2.避免与企业战略发展相悖的业务能力出现在业务架构中。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.业务架构指导了应用架构的建设，应确保信息化建设方向与企业战略目标一致；2.信息化建设的优先级顺序收到企业战略发展影响，需要在业务架构中有所体现。</td>
</tr>
</tbody></table>
<h3 id="2-2-流程重构原则"><a href="#2-2-流程重构原则" class="headerlink" title="2.2 流程重构原则"></a><strong>2.2 流程重构原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">业务流程重构先行。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.不建议对陈旧、无效的业务流程进行信息化改造；2.业务流程按效率最优的原则进行优化和重组；3.业务流程重构以降低全面拥有成本为目标。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.业务部门与系统建设方应就优化后的业务流程达成共识；2.业务流程重构与新技术应用并举；3.业务流程重构应与业务目标保持一致；4.组织架构变更将触发业务流程重组及业务架构调整。</td>
</tr>
</tbody></table>
<h3 id="2-3-业务连续原则"><a href="#2-3-业务连续原则" class="headerlink" title="2.3 业务连续原则"></a><strong>2.3 业务连续原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">公司的生产运行和经营管理不受信息系统建设影响。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.随着公司信息化的进一步普及，公司生产运行和经营管理活动对信息系统形成一定依赖。系统设计、建设和应用过程中必须全面考虑系统可靠性；2.建立无信息系统干预的业务运行预案，确保极端情况下的公司业务连续性；3.建立健壮的一体化信息平台，支撑业务活动的连续运行能力，避免系统硬件故障、自然灾害、数据损坏等问题的影响。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.建立信息化风险管理机制，预防和管理信息系统故障可能造成的业务中断；2.系统架构设计应考虑并解决技术方案的可复原性、冗余性和可维护性等要求。</td>
</tr>
</tbody></table>
<h3 id="2-4-业务合规原则"><a href="#2-4-业务合规原则" class="headerlink" title="2.4 业务合规原则"></a><strong>2.4 业务合规原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">所有的业务规则和流程需要遵从公司和政府的相关政策、标准及法规。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.如果在应用系统中实施了有缺陷的业务规则及流程，会造成财务或实物资产的损失、及对公司声誉的伤害；2.需要遵从政府的法规和行业标准。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.业务规则和流程的整体设计，需要法律及相关部门的审核和批准；2业务规则和流程的变更，在应用到信息系统之前，需要法律及相关部门的审核和批准。</td>
</tr>
</tbody></table>
<h2 id="3-应用架构原则"><a href="#3-应用架构原则" class="headerlink" title="3 应用架构原则"></a><strong>3 应用架构原则</strong></h2><h3 id="3-1-统一设计原则"><a href="#3-1-统一设计原则" class="headerlink" title="3.1 统一设计原则"></a><strong>3.1 统一设计原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">业务应用采用统一设计，避免重复建设。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.企业级应用建设需保证科学重用；2.架构设计中避免重复设计、冗余应用；3.设计冗余将引致高昂的信息化成本；4.设计冗余将带来数据冲突，增加集成复杂度。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.不建议对相似的企业级业务能力进行重复建设；2.标准化企业级的数据和信息。</td>
</tr>
</tbody></table>
<h3 id="3-2-功能重用原则"><a href="#3-2-功能重用原则" class="headerlink" title="3.2 功能重用原则"></a><strong>3.2 功能重用原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">新建应用重用已有应用功能。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.深化套装软件方案的实用性和可用性；2.选用已经验证或测试的应用方案。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.带来明显商业优势与成本节省；2.需要经过评估来决定是新建还是购买新应用。</td>
</tr>
</tbody></table>
<h3 id="3-3-应用柔性原则"><a href="#3-3-应用柔性原则" class="headerlink" title="3.3 应用柔性原则"></a><strong>3.3 应用柔性原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">应用设计具备充分柔性。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.通过业务应用系统升级，灵活适应业务需求以及合理的需求变更；2.适应业务流程优化调整；3.业务应用系统灵活适应信息技术变更；4.在降低业务流程重建风险的同时，实现业务应用的便捷、快速集成。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.初期投入相对较大；2.系统设计周期加长；3.系统生命期延长。</td>
</tr>
</tbody></table>
<h3 id="3-4-应用安全性原则"><a href="#3-4-应用安全性原则" class="headerlink" title="3.4 应用安全性原则"></a><strong>3.4 应用安全性原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">保证应用系统的完整性、保密性以及安全性。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.避免公司的财务资产、实物资产、声誉以及客户关系, 因为应用系统或数据的不当使用, 而带来损失和伤害；2.应用系统和数据的访问需要采取授权机制。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.需要制定统一的访问控制机制并取得共识；2各种不同的应用系统，需要实施统一的管理和标准化的访问控制机制；3.中标的成熟套装软件及相关功能模块也需要遵循已定义好的安全标准。</td>
</tr>
</tbody></table>
<h2 id="4-数据架构原则"><a href="#4-数据架构原则" class="headerlink" title="4 数据架构原则"></a><strong>4 数据架构原则</strong></h2><h3 id="4-1-数据资产化原则"><a href="#4-1-数据资产化原则" class="headerlink" title="4.1 数据资产化原则"></a><strong>4.1 数据资产化原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">数据是公司的一类有价值的无形资产，需要对其进行统一的管理。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.数据是支撑公司业务正常运转以及战略决策科学制定的重要保障；2.对数据的充分利用能够实现公司价值的提升。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.将数据上升为公司无形资产的高度，在全公司范围内统一认识；2.加强对公司数据的管理与管控，挖掘公司数据的潜在价值。</td>
</tr>
</tbody></table>
<h3 id="4-2-数据共享原则"><a href="#4-2-数据共享原则" class="headerlink" title="4.2 数据共享原则"></a><strong>4.2 数据共享原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">数据要能够被合理的访问，不能被私有化。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.数据共享能够支撑公司内部广泛的业务协同；2.数据共享是提高决策质量和效率的基础；3.明确数据唯一来源，减少数据冗余，能够有效降低运维成本；4.公司数据的收集、生成、转换、汇总等处理速度取决于各部门数据的共享程度。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.基于短期和长期的考虑，建立数据共享的策略、机制、流程、标准等；2.建立全局数据模型，梳理数据资产，加强元数据管理，构建数据共享环境；3.限制对孤立的遗留系统投资，制定遗留系统的退役或迁移策略；4.数据共享需要全公司认识上的转变；5.数据共享要与数据安全相统一。</td>
</tr>
</tbody></table>
<h3 id="4-3-数据可用性原则"><a href="#4-3-数据可用性原则" class="headerlink" title="4.3 数据可用性原则"></a><strong>4.3 数据可用性原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">数据对于有权访问和利用它的用户来说必须是可用的。可用性主要体现在可获取和可利用两个方面。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">易获取、高质量的数据能够支撑公司内部广泛的业务协同，是提高公司决策质量和效率的重要保障。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.数据的访问和展示方式要能够充分满足公司各级单位、部门的需求；2.提高公司对数据质量的重视程度，开展有效的数据治理。</td>
</tr>
</tbody></table>
<h3 id="4-4-数据认责原则"><a href="#4-4-数据认责原则" class="headerlink" title="4.4 数据认责原则"></a><strong>4.4 数据认责原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">对数据要指定权威的数据拥有者、质量责任者、日常管理维护者等角色。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.数据认责机制是数据资产有效管理的基础；2.通过数据认责能够提高公司各部门对数据管理的参与度，更好的满足各部门对数据的需求。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.数据认责需要公司各部门的共同参与，并在公司各部门间达成一致；2.要建立数据质量的度量方法，形成科学的考核体系，推进数据认责的有效落实。</td>
</tr>
</tbody></table>
<h3 id="4-5-数据标准化原则"><a href="#4-5-数据标准化原则" class="headerlink" title="4.5 数据标准化原则"></a><strong>4.5 数据标准化原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">数据要在全公司范围内有一致的定义，并且数据定义能够被所有用户获取和理解。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.数据的标准化是数据共享的基础；2.一些项目的解决方案需要有统一的数据定义；3.通用的数据定义能够实现有效的沟通和对话；4.统一的数据定义是快速改善公司数据环境的有效途径。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.建立通用的业务术语表，业务定义要在全公司范围内一致；2.在数据定义过程中，要引用术语表中的术语，以保证数据含义在全公司被有效的理解，不产生歧义；3.建立数据定义的仲裁机制，以协调不同部门对数据理解的差异和冲突；4.建立数据标准体系，对多种数据标准进行协调和统一；5.指定数据标准的责任者。</td>
</tr>
</tbody></table>
<h3 id="4-6-数据安全性原则"><a href="#4-6-数据安全性原则" class="headerlink" title="4.6 数据安全性原则"></a><strong>4.6 数据安全性原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">数据要在安全等级要求下，被合理的访问、共享和发布。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.公司数据涉及国家安全，要满足国家监管单位对数据安全的要求；2.公司数据涉及商业机密，要求满足公司自身发展对数据安全的要求；3.数据安全是公司信息安全的重要组成部分，应统一管理。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.制定数据安全管理策略，划分数据安全等级，不同安全等级应采用不同的安全访问策略及授权访问机制；2.在数据定义阶段就要明确对数据安全级别的限定。</td>
</tr>
</tbody></table>
<h2 id="5-技术架构原则"><a href="#5-技术架构原则" class="headerlink" title="5 技术架构原则"></a><strong>5 技术架构原则</strong></h2><h3 id="5-1-标准化原则"><a href="#5-1-标准化原则" class="headerlink" title="5.1 标准化原则"></a><strong>5.1 标准化原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">将技术多样性降低到最小化，降低建设和运维成本。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.技术多样性往往需要不同的基础架构，从而导致更高的建设和运维费用。通过公司整体范围内的技术统一能够有效降低整体建设成本和运行管理成本；2.限制技术多样性带来的业务优势主要有：标准化应用组合；更好预测新技术带来的风险和影响，以适应技术进步。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.需要据此制定信息化建设策略、标准规范；2.执行统一的技术生命周期管理，统一技术选型和采购；3.建立技术架构蓝图，适时保持更新；4.只在新技术能够明显证明有利于提升业务价值和改善运营效率的情况下才决定引入。</td>
</tr>
</tbody></table>
<h3 id="5-2-互操作原则"><a href="#5-2-互操作原则" class="headerlink" title="5.2 互操作原则"></a><strong>5.2 互操作原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">推动硬件、软件的标准化，提升数据、应用、技术的互操作能力。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.有助于保持一致性，改善运行效率，提高用户满意度，保护现有IT投资；2.有利于选择信息化供应商，促进供应链整合。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.建立目标架构设计规范，并保持适时更新；2.建立集成设计规范，并保持适时更新；3.建设统一的集成平台、开发平台等应用支撑平台。</td>
</tr>
</tbody></table>
<h3 id="5-3-快速响应原则"><a href="#5-3-快速响应原则" class="headerlink" title="5.3 快速响应原则"></a><strong>5.3 快速响应原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">技术架构的设计应能快速支持业务规则及流程变革。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">1.提高响应业务需求变化的灵活性；2.减少应用系统变更的成本；3.通过实施参数化的可灵活配置的业务规则及流程，降低开发成本。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.设计应用系统时，应支持业务规则及流程的外部配置参数化；2.需要定义参数化的可灵活配置的业务规则及访问方式；3.可灵活配置的业务规则及可重用的基本服务将增加应用系统的前期开发成本；4.根据附加的非功能性需求来选择成熟解决方案。</td>
</tr>
</tbody></table>
<h3 id="5-4-服务等级原则"><a href="#5-4-服务等级原则" class="headerlink" title="5.4 服务等级原则"></a><strong>5.4 服务等级原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">技术架构应能根据服务等级协议提供各种服务，满足业务需求。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">理由</td>
<td align="left">提供可靠的、可重用的，以及可灵活配置的各项服务，能够实现最佳客户服务的业务目标。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">1.需要与相关部门一起，根据客户确定的系统性能指标，确定服务等级协议的范围并取得认可；2.需要根据各种业务需求制定并认可各种非功能性需求；3.应用系统和支撑体系架构在设计时必须要满足非功能性需求；4.满足特定的服务等级协议可能需要特定的硬件，软件及设计费用；5.对不支持性能升级的第三方产品要谨慎采用。</td>
</tr>
</tbody></table>
<h3 id="5-5-灾备原则"><a href="#5-5-灾备原则" class="headerlink" title="5.5 灾备原则"></a><strong>5.5 灾备原则</strong></h3><table>
<thead>
<tr>
<th align="center">描述</th>
<th align="left">技术架构设计时要充分考虑业务连续性需求。</th>
</tr>
</thead>
<tbody><tr>
<td align="center">原因</td>
<td align="left">当灾难发生时，信息技术要支持业务的持续运作。</td>
</tr>
<tr>
<td align="center">影响</td>
<td align="left">制定灾备策略、计划和预案。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Architecture</category>
      </categories>
      <tags>
        <tag>Architecture</tag>
        <tag>Governance</tag>
      </tags>
  </entry>
  <entry>
    <title>分享WPS PDF在Ubuntu24.04下的使用要点</title>
    <url>/2024/08/03/%E5%88%86%E4%BA%ABWPS-PDF%E5%9C%A8Ubuntu24-04%E4%B8%8B%E7%9A%84%E4%BD%BF%E7%94%A8%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>WPS是我国民族软件的骄傲，而我自己也是其忠实粉丝，尤其钟爱WPS PDF，可以完全替代Adobe Reader。最近将Ubuntu系统升级至Ubuntu 24.04，发现WPS PDF(2019)无法打开pdf文件，作为一名书虫的我，多少有些不适应。经过一番研究，发现缺失所需的<code>libtiff.so.5</code>，该问题可以简单地通过以下步骤解决，与君分享。 <span id="more"></span></p>
<h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><ol>
<li><p>创建软链接<code>libtiff.so.5</code>，使之指向<code>libtiff.so.6</code>；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/x86_64-linux-gnu &amp;&amp; sudo <span class="built_in">ln</span> -s libtiff.so.6 libtiff.so.5</span><br></pre></td></tr></table></figure></li>
<li><p>验证软链接创建结果，看到<code>libtiff.so.5 -&gt; libtiff.so.6</code>表示所需软链接创建成功；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daniel@hera:~$ cd /usr/lib/x86_64-linux-gnu</span><br><span class="line">daniel@hera:/usr/lib/x86_64-linux-gnu$ ll libtiff*</span><br><span class="line">lrwxrwxrwx 1 root root     12 Aug  3 22:32 libtiff.so.5 -&gt; libtiff.so.6</span><br><span class="line">lrwxrwxrwx 1 root root     16 May 29 13:09 libtiff.so.6 -&gt; libtiff.so.6.0.1</span><br><span class="line">-rw-r--r-- 1 root root 575656 May 29 13:09 libtiff.so.6.0.1</span><br></pre></td></tr></table></figure></li>
<li><p>尝试重新打开pdf文件（至此pdf文件打开失败这一问题告一段落，但不够完美，请继续操作步骤4）；</p>
</li>
<li><p>通过步骤3打开pdf文件时，会提示字体缺失，解决步骤如下：</p>
<ol>
<li>下载并解压<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGxhbnN1bi90dGYtd3BzLWZvbnRzL2FyY2hpdmUvcmVmcy9oZWFkcy9tYXN0ZXIuemlw">ttf-wps-fonts<i class="fa fa-external-link-alt"></i></span>；</li>
<li>执行<code>sudo bash install.sh</code>；</li>
<li>重新打开pdf文件。</li>
</ol>
</li>
</ol>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>使用Linux的过程，就是一个折腾的过程。在不断折腾中，享受自由带来的无尽快乐。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>WPS</tag>
        <tag>PDF</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>探究Java Virtual Thread</title>
    <url>/2023/03/10/%E6%8E%A2%E7%A9%B6Java-Virtual-Thread/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>虚拟线程（Virtual Thread）是一种用户态轻量级线程，它在Project Loom中孵化了很久，最早以预览特性的形式出现在Java 19中。它的实现基于协程（Coroutine）的概念，而协程是一种轻量级的线程模型，在一个传统的Java线程内可以运行多个虚拟线程，每个虚拟线程都有自己的执行上下文。虚拟线程的引入旨在解决传统线程的一些问题，比如：线程创建和上下文切换的成本过高等。<span id="more"></span></p>
<h2 id="虚拟线程与传统线程的差异"><a href="#虚拟线程与传统线程的差异" class="headerlink" title="虚拟线程与传统线程的差异"></a>虚拟线程与传统线程的差异</h2><p>Java的每个线程都有一个与之相关联的栈，栈中保存了线程执行的上下文信息，线程的创建和销毁也都需要操作系统进行干预，这需要一定的时间和系统资源，因此线程数量受到限制，应用程序的并发能力也受到相应的影响。而虚拟线程则不需要创建新的栈，它们可以与同一线程内的其他虚拟线程共享栈和执行上下文，从而减少了线程创建和上下文切换的成本，这使得Java应用程序可以在更少的线程上运行，进而提高了性能和可伸缩性。</p>
<p>传统的Java线程模型中，线程的运行是由操作系统的调度器决定的，因此线程的执行顺序和时间是不可预测的。而虚拟线程可以通过编程的方式控制虚拟线程的运行顺序和时间，从而提高应用程序的可预测性。</p>
<p>Java虚拟线程（Virtual Thread）、Java传统线程（Platform Thread）以及OS线程（Native Thread）之间的关系如下图所示：<br><img data-src="java.virtual.thread.svg" alt="3类线程间的关系"></p>
<h2 id="虚拟线程的优势"><a href="#虚拟线程的优势" class="headerlink" title="虚拟线程的优势"></a>虚拟线程的优势</h2><p>除了更高效的资源利用，虚拟线程还具有以下优势：</p>
<ol>
<li>更好的可控性和可伸缩性：传统Java线程是由操作系统管理的，因此它们的创建和销毁通常需要一定的时间和资源。而虚拟线程的生命周期由应用程序管理，这意味着它们可以更容易地被创建和销毁，并且可以更好地控制和调整线程数量；</li>
<li>更高的性能和更少的上下文切换：虚拟线程的轻量级实现可以避免昂贵的上下文切换，从而提高性能和响应能力；</li>
<li>更好的代码组织：虚拟线程可以使代码更易于组织和维护。它们可以通过将相关任务分配给单个线程来简化代码，并提高可读性和可维护性。</li>
</ol>
<h2 id="虚拟线程的使用场景"><a href="#虚拟线程的使用场景" class="headerlink" title="虚拟线程的使用场景"></a>虚拟线程的使用场景</h2><p>虚拟线程十分适合处理大量并发任务的场景：</p>
<ol>
<li>I/O密集型任务：虚拟线程可以避免由于大量的线程导致的上下文切换和内存占用，因此非常适合处理I/O密集型任务，如网络和数据库操作。</li>
<li>事件驱动程序：虚拟线程非常适合事件驱动的程序，如Web应用程序或GUI应用程序。它们可以使代码更易于编写和组织，并提高应用程序的响应能力和可伸缩性。</li>
<li>大规模数据处理：虚拟线程可以用于处理大规模数据集的计算任务。通过将计算分解成多个任务并将其分配给不同的虚拟线程，可以更好地利用CPU资源，并提高计算性能。</li>
</ol>
<h2 id="虚拟线程的代码示例"><a href="#虚拟线程的代码示例" class="headerlink" title="虚拟线程的代码示例"></a>虚拟线程的代码示例</h2><p>以下代码需运行于Java 19+上，并先开启预览特性开关：<code>--enable-preview</code></p>
<h3 id="创建单个虚拟线程"><a href="#创建单个虚拟线程" class="headerlink" title="创建单个虚拟线程"></a>创建单个虚拟线程</h3><figure class="highlight groovy"><figcaption><span>基于Groovy4的虚拟线程创建演示</span></figcaption><table><tr><td class="code"><pre><span class="line">Thread.ofVirtual().name(<span class="string">&quot;try-JVT&quot;</span>).start(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread.startVirtualThread(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><figcaption><span>基于Groovy4与Executor的虚拟线程创建演示</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (var executor = Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class="line">    executor.submit(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建大量虚拟线程"><a href="#创建大量虚拟线程" class="headerlink" title="创建大量虚拟线程"></a>创建大量虚拟线程</h3><p>在不做池化处理的情况下，创建大量虚拟线程，程序依然能够正常执行，并未像创建大量传统线程那般发生<code>java.lang.OutOfMemoryError: Unable to create new native thread</code>。另外需要注意的一点是，池化技术对于传统线程而言很重要，因为传统线程相关的操作系统资源很宝贵，而对于虚拟线程则恰恰相反，因为虚拟线程的轻量特点，无需对虚拟线程池化处理。</p>
<figure class="highlight groovy"><figcaption><span>基于Groovy4的大量虚拟线程创建演示</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>_000; i++) &#123;</span><br><span class="line">    Thread.ofVirtual().name(<span class="string">&quot;try-JVT-&quot;</span> + i).start(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><figcaption><span>基于Groovy4与Executor的大量虚拟线程创建演示</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (var executor = Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>_000; i++) &#123;</span><br><span class="line">        executor.submit(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>虚拟线程（Virtual Thread）是近年来为数不多令整个Java界振奋不已的重要特性，它有望助Java与Go语言在并发编程领域分庭抗礼。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLm9yZy9qZXBzLzQyNQ==">https://openjdk.org/jeps/425<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Virtual Thread</tag>
        <tag>Platform Thread</tag>
        <tag>Native Thread</tag>
        <tag>Concurrent Programming</tag>
        <tag>Coroutine</tag>
        <tag>Loom</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈Java字节码</title>
    <url>/2023/11/14/%E6%B5%85%E8%B0%88Java%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java字节码（bytecode）是一种低级的、类似于汇编语言的代码，用于指导JVM如何执行Java程序。每条字节码指令通常对应一项简单的操作，比如加载数据、运算、控制流转移等。字节码既不是机器代码，也不是高级语言代码，而是介于两者之间的中间表示。它是Java源代码在编译后的中间表示形式，使Java能够实现“一次编写，到处运行”的理念。</p>
<span id="more"></span>

<h2 id="字节码和JVM的关系"><a href="#字节码和JVM的关系" class="headerlink" title="字节码和JVM的关系"></a>字节码和JVM的关系</h2><p>JVM是执行Java字节码的虚拟机。它读取字节码，并将其翻译成特定操作系统上的机器码执行。这个过程可以是解释执行，即逐条翻译和执行字节码；也可以是编译执行，即通过即时编译器（JIT）将字节码编译成本地机器码后执行。</p>
<h2 id="字节码指令主要类别及作用"><a href="#字节码指令主要类别及作用" class="headerlink" title="字节码指令主要类别及作用"></a>字节码指令主要类别及作用</h2><ul>
<li>加载和存储指令: 处理数据的加载和存储操作（例如：<code>aload_0</code>, <code>istore</code>）</li>
<li>算术和逻辑指令: 执行基本的算术和逻辑运算（例如: <code>ladd</code>, <code>fcmpl</code>）</li>
<li>类型转换指令: 在不同类型之间转换数据（例如：<code>i2b</code>, <code>d2i</code>）</li>
<li>对象创建和操作指令: 创建和操作对象和数组（例如：<code>new</code>, <code>putfield</code>）</li>
<li>操作数栈管理指令: 直接操作操作数栈的指令（例如：<code>swap</code>, <code>dup</code>）</li>
<li>控制转移指令: 改变程序的控制流（例如：<code>ifeq</code>, <code>goto</code>）</li>
<li>方法调用和返回指令: 用于方法调用和返回（例如：<code>invokevirtual</code>, <code>areturn</code>）</li>
<li>同步指令: 支持多线程同步（例如：<code>monitorenter</code>, <code>monitorexit</code>）</li>
</ul>
<h2 id="局部变量区（Local-Variable-Array）"><a href="#局部变量区（Local-Variable-Array）" class="headerlink" title="局部变量区（Local Variable Array）"></a>局部变量区（Local Variable Array）</h2><p>局部变量区是一个数组结构，存储方法参数和局部变量。它为方法提供了存储和访问其局部变量的空间。在非静态方法中，<code>this</code>引用总是存储在局部变量区的索引<code>0</code>处，指向当前对象的实例。</p>
<h2 id="操作数栈（Operand-Stack）"><a href="#操作数栈（Operand-Stack）" class="headerlink" title="操作数栈（Operand Stack）"></a>操作数栈（Operand Stack）</h2><p>操作数栈是一个后进先出（LIFO）的栈结构，用于存放指令的输入参数和输出结果。它在字节码指令执行时存储计算过程中的中间数据。</p>
<h2 id="字节码示例"><a href="#字节码示例" class="headerlink" title="字节码示例"></a>字节码示例</h2><p>假设有如下Java实例方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的字节码指令及其解释如下：</p>
<table>
<thead>
<tr>
<th>字节码指令</th>
<th>解释</th>
<th>操作数栈变化（执行前 -&gt; 执行后）</th>
</tr>
</thead>
<tbody><tr>
<td><code>iload_1</code></td>
<td>加载第一个整型参数（a）到栈顶</td>
<td>[] -&gt; [a]</td>
</tr>
<tr>
<td><code>iload_2</code></td>
<td>加载第二个整型参数（b）到栈顶</td>
<td>[a] -&gt; [a, b]</td>
</tr>
<tr>
<td><code>iadd</code></td>
<td>执行整数加法</td>
<td>[a, b] -&gt; [result]</td>
</tr>
<tr>
<td><code>ireturn</code></td>
<td>从当前方法返回整数</td>
<td>[result] -&gt; []</td>
</tr>
</tbody></table>
<p><code>iload_1</code>和<code>iload_2</code>分别加载方法参数<code>a</code>和<code>b</code>到操作数栈。这反映了Java实例方法中局部变量区索引的使用方式，其中索引0总是保留给<code>this</code>引用。</p>
<h2 id="字节码列表"><a href="#字节码列表" class="headerlink" title="字节码列表"></a>字节码列表</h2><table>
<thead>
<tr>
<th>Mnemonic</th>
<th>Opcode<br/>(in hex)</th>
<th>Opcode<br/>(in binary)</th>
<th>Other bytes<br/>[count]: [operand labels]</th>
<th>Stack<br/>[before]→[after]</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>aaload</td>
<td>32</td>
<td>0011 0010</td>
<td></td>
<td>arrayref, index → value</td>
<td>load onto the stack a reference from an array</td>
</tr>
<tr>
<td>aastore</td>
<td>53</td>
<td>0101 0011</td>
<td></td>
<td>arrayref, index, value →</td>
<td>store a reference in an array</td>
</tr>
<tr>
<td>aconst_null</td>
<td>1</td>
<td>0000 0001</td>
<td></td>
<td>→ null</td>
<td>push a null reference onto the stack</td>
</tr>
<tr>
<td>aload</td>
<td>19</td>
<td>0001 1001</td>
<td>1: index</td>
<td>→ objectref</td>
<td>load a reference onto the stack from a local variable #index</td>
</tr>
<tr>
<td>aload_0</td>
<td>2a</td>
<td>0010 1010</td>
<td></td>
<td>→ objectref</td>
<td>load a reference onto the stack from local variable 0</td>
</tr>
<tr>
<td>aload_1</td>
<td>2b</td>
<td>0010 1011</td>
<td></td>
<td>→ objectref</td>
<td>load a reference onto the stack from local variable 1</td>
</tr>
<tr>
<td>aload_2</td>
<td>2c</td>
<td>0010 1100</td>
<td></td>
<td>→ objectref</td>
<td>load a reference onto the stack from local variable 2</td>
</tr>
<tr>
<td>aload_3</td>
<td>2d</td>
<td>0010 1101</td>
<td></td>
<td>→ objectref</td>
<td>load a reference onto the stack from local variable 3</td>
</tr>
<tr>
<td>anewarray</td>
<td>bd</td>
<td>1011 1101</td>
<td>2: indexbyte1, indexbyte2</td>
<td>count → arrayref</td>
<td>create a new array of references of length count and component type identified by the class reference index (indexbyte1 &lt;&lt; 8 &#124; indexbyte2) in the constant pool</td>
</tr>
<tr>
<td>areturn</td>
<td>b0</td>
<td>1011 0000</td>
<td></td>
<td>objectref → [empty]</td>
<td>return a reference from a method</td>
</tr>
<tr>
<td>arraylength</td>
<td>be</td>
<td>1011 1110</td>
<td></td>
<td>arrayref → length</td>
<td>get the length of an array</td>
</tr>
<tr>
<td>astore</td>
<td>3a</td>
<td>0011 1010</td>
<td>1: index</td>
<td>objectref →</td>
<td>store a reference into a local variable #index</td>
</tr>
<tr>
<td>astore_0</td>
<td>4b</td>
<td>0100 1011</td>
<td></td>
<td>objectref →</td>
<td>store a reference into local variable 0</td>
</tr>
<tr>
<td>astore_1</td>
<td>4c</td>
<td>0100 1100</td>
<td></td>
<td>objectref →</td>
<td>store a reference into local variable 1</td>
</tr>
<tr>
<td>astore_2</td>
<td>4d</td>
<td>0100 1101</td>
<td></td>
<td>objectref →</td>
<td>store a reference into local variable 2</td>
</tr>
<tr>
<td>astore_3</td>
<td>4e</td>
<td>0100 1110</td>
<td></td>
<td>objectref →</td>
<td>store a reference into local variable 3</td>
</tr>
<tr>
<td>athrow</td>
<td>bf</td>
<td>1011 1111</td>
<td></td>
<td>objectref → [empty], objectref</td>
<td>throws an error or exception (notice that the rest of the stack is cleared, leaving only a reference to the Throwable)</td>
</tr>
<tr>
<td>baload</td>
<td>33</td>
<td>0011 0011</td>
<td></td>
<td>arrayref, index → value</td>
<td>load a byte or Boolean value from an array</td>
</tr>
<tr>
<td>bastore</td>
<td>54</td>
<td>0101 0100</td>
<td></td>
<td>arrayref, index, value →</td>
<td>store a byte or Boolean value into an array</td>
</tr>
<tr>
<td>bipush</td>
<td>10</td>
<td>0001 0000</td>
<td>1: byte</td>
<td>→ value</td>
<td>push a byte onto the stack as an integer value</td>
</tr>
<tr>
<td>breakpoint</td>
<td>ca</td>
<td>1100 1010</td>
<td></td>
<td></td>
<td>reserved for breakpoints in Java debuggers; should not appear in any class file</td>
</tr>
<tr>
<td>caload</td>
<td>34</td>
<td>0011 0100</td>
<td></td>
<td>arrayref, index → value</td>
<td>load a char from an array</td>
</tr>
<tr>
<td>castore</td>
<td>55</td>
<td>0101 0101</td>
<td></td>
<td>arrayref, index, value →</td>
<td>store a char into an array</td>
</tr>
<tr>
<td>checkcast</td>
<td>c0</td>
<td>1100 0000</td>
<td>2: indexbyte1, indexbyte2</td>
<td>objectref → objectref</td>
<td>checks whether an objectref is of a certain type, the class reference of which is in the constant pool at index (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>d2f</td>
<td>90</td>
<td>1001 0000</td>
<td></td>
<td>value → result</td>
<td>convert a double to a float</td>
</tr>
<tr>
<td>d2i</td>
<td>8e</td>
<td>1000 1110</td>
<td></td>
<td>value → result</td>
<td>convert a double to an int</td>
</tr>
<tr>
<td>d2l</td>
<td>8f</td>
<td>1000 1111</td>
<td></td>
<td>value → result</td>
<td>convert a double to a long</td>
</tr>
<tr>
<td>dadd</td>
<td>63</td>
<td>0110 0011</td>
<td></td>
<td>value1, value2 → result</td>
<td>add two doubles</td>
</tr>
<tr>
<td>daload</td>
<td>31</td>
<td>0011 0001</td>
<td></td>
<td>arrayref, index → value</td>
<td>load a double from an array</td>
</tr>
<tr>
<td>dastore</td>
<td>52</td>
<td>0101 0010</td>
<td></td>
<td>arrayref, index, value →</td>
<td>store a double into an array</td>
</tr>
<tr>
<td>dcmpg</td>
<td>98</td>
<td>1001 1000</td>
<td></td>
<td>value1, value2 → result</td>
<td>compare two doubles, 1 on NaN</td>
</tr>
<tr>
<td>dcmpl</td>
<td>97</td>
<td>1001 0111</td>
<td></td>
<td>value1, value2 → result</td>
<td>compare two doubles, -1 on NaN</td>
</tr>
<tr>
<td>dconst_0</td>
<td>0e</td>
<td>0000 1110</td>
<td></td>
<td>→ 0.0</td>
<td>push the constant 0.0 (a double) onto the stack</td>
</tr>
<tr>
<td>dconst_1</td>
<td>0f</td>
<td>0000 1111</td>
<td></td>
<td>→ 1.0</td>
<td>push the constant 1.0 (a double) onto the stack</td>
</tr>
<tr>
<td>ddiv</td>
<td>6f</td>
<td>0110 1111</td>
<td></td>
<td>value1, value2 → result</td>
<td>divide two doubles</td>
</tr>
<tr>
<td>dload</td>
<td>18</td>
<td>0001 1000</td>
<td>1: index</td>
<td>→ value</td>
<td>load a double value from a local variable #index</td>
</tr>
<tr>
<td>dload_0</td>
<td>26</td>
<td>0010 0110</td>
<td></td>
<td>→ value</td>
<td>load a double from local variable 0</td>
</tr>
<tr>
<td>dload_1</td>
<td>27</td>
<td>0010 0111</td>
<td></td>
<td>→ value</td>
<td>load a double from local variable 1</td>
</tr>
<tr>
<td>dload_2</td>
<td>28</td>
<td>0010 1000</td>
<td></td>
<td>→ value</td>
<td>load a double from local variable 2</td>
</tr>
<tr>
<td>dload_3</td>
<td>29</td>
<td>0010 1001</td>
<td></td>
<td>→ value</td>
<td>load a double from local variable 3</td>
</tr>
<tr>
<td>dmul</td>
<td>6b</td>
<td>0110 1011</td>
<td></td>
<td>value1, value2 → result</td>
<td>multiply two doubles</td>
</tr>
<tr>
<td>dneg</td>
<td>77</td>
<td>0111 0111</td>
<td></td>
<td>value → result</td>
<td>negate a double</td>
</tr>
<tr>
<td>drem</td>
<td>73</td>
<td>0111 0011</td>
<td></td>
<td>value1, value2 → result</td>
<td>get the remainder from a division between two doubles</td>
</tr>
<tr>
<td>dreturn</td>
<td>af</td>
<td>1010 1111</td>
<td></td>
<td>value → [empty]</td>
<td>return a double from a method</td>
</tr>
<tr>
<td>dstore</td>
<td>39</td>
<td>0011 1001</td>
<td>1: index</td>
<td>value →</td>
<td>store a double value into a local variable #index</td>
</tr>
<tr>
<td>dstore_0</td>
<td>47</td>
<td>0100 0111</td>
<td></td>
<td>value →</td>
<td>store a double into local variable 0</td>
</tr>
<tr>
<td>dstore_1</td>
<td>48</td>
<td>0100 1000</td>
<td></td>
<td>value →</td>
<td>store a double into local variable 1</td>
</tr>
<tr>
<td>dstore_2</td>
<td>49</td>
<td>0100 1001</td>
<td></td>
<td>value →</td>
<td>store a double into local variable 2</td>
</tr>
<tr>
<td>dstore_3</td>
<td>4a</td>
<td>0100 1010</td>
<td></td>
<td>value →</td>
<td>store a double into local variable 3</td>
</tr>
<tr>
<td>dsub</td>
<td>67</td>
<td>0110 0111</td>
<td></td>
<td>value1, value2 → result</td>
<td>subtract a double from another</td>
</tr>
<tr>
<td>dup</td>
<td>59</td>
<td>0101 1001</td>
<td></td>
<td>value → value, value</td>
<td>duplicate the value on top of the stack</td>
</tr>
<tr>
<td>dup_x1</td>
<td>5a</td>
<td>0101 1010</td>
<td></td>
<td>value2, value1 → value1, value2, value1</td>
<td>insert a copy of the top value into the stack two values from the top. value1 and value2 must not be of the type double or long.</td>
</tr>
<tr>
<td>dup_x2</td>
<td>5b</td>
<td>0101 1011</td>
<td></td>
<td>value3, value2, value1 → value1, value3, value2, value1</td>
<td>insert a copy of the top value into the stack two (if value2 is double or long it takes up the entry of value3, too) or three values (if value2 is neither double nor long) from the top</td>
</tr>
<tr>
<td>dup2</td>
<td>5c</td>
<td>0101 1100</td>
<td></td>
<td>{value2, value1} → {value2, value1}, {value2, value1}</td>
<td>duplicate top two stack words (two values, if value1 is not double nor long; a single value, if value1 is double or long)</td>
</tr>
<tr>
<td>dup2_x1</td>
<td>5d</td>
<td>0101 1101</td>
<td></td>
<td>value3, {value2, value1} → {value2, value1}, value3, {value2, value1}</td>
<td>duplicate two words and insert beneath third word (see explanation above)</td>
</tr>
<tr>
<td>dup2_x2</td>
<td>5e</td>
<td>0101 1110</td>
<td></td>
<td>{value4, value3}, {value2, value1} → {value2, value1}, {value4, value3}, {value2, value1}</td>
<td>duplicate two words and insert beneath fourth word</td>
</tr>
<tr>
<td>f2d</td>
<td>8d</td>
<td>1000 1101</td>
<td></td>
<td>value → result</td>
<td>convert a float to a double</td>
</tr>
<tr>
<td>f2i</td>
<td>8b</td>
<td>1000 1011</td>
<td></td>
<td>value → result</td>
<td>convert a float to an int</td>
</tr>
<tr>
<td>f2l</td>
<td>8c</td>
<td>1000 1100</td>
<td></td>
<td>value → result</td>
<td>convert a float to a long</td>
</tr>
<tr>
<td>fadd</td>
<td>62</td>
<td>0110 0010</td>
<td></td>
<td>value1, value2 → result</td>
<td>add two floats</td>
</tr>
<tr>
<td>faload</td>
<td>30</td>
<td>0011 0000</td>
<td></td>
<td>arrayref, index → value</td>
<td>load a float from an array</td>
</tr>
<tr>
<td>fastore</td>
<td>51</td>
<td>0101 0001</td>
<td></td>
<td>arrayref, index, value →</td>
<td>store a float in an array</td>
</tr>
<tr>
<td>fcmpg</td>
<td>96</td>
<td>1001 0110</td>
<td></td>
<td>value1, value2 → result</td>
<td>compare two floats, 1 on NaN</td>
</tr>
<tr>
<td>fcmpl</td>
<td>95</td>
<td>1001 0101</td>
<td></td>
<td>value1, value2 → result</td>
<td>compare two floats, -1 on NaN</td>
</tr>
<tr>
<td>fconst_0</td>
<td>0b</td>
<td>0000 1011</td>
<td></td>
<td>→ 0.0f</td>
<td>push 0.0f on the stack</td>
</tr>
<tr>
<td>fconst_1</td>
<td>0c</td>
<td>0000 1100</td>
<td></td>
<td>→ 1.0f</td>
<td>push 1.0f on the stack</td>
</tr>
<tr>
<td>fconst_2</td>
<td>0d</td>
<td>0000 1101</td>
<td></td>
<td>→ 2.0f</td>
<td>push 2.0f on the stack</td>
</tr>
<tr>
<td>fdiv</td>
<td>6e</td>
<td>0110 1110</td>
<td></td>
<td>value1, value2 → result</td>
<td>divide two floats</td>
</tr>
<tr>
<td>fload</td>
<td>17</td>
<td>0001 0111</td>
<td>1: index</td>
<td>→ value</td>
<td>load a float value from a local variable #index</td>
</tr>
<tr>
<td>fload_0</td>
<td>22</td>
<td>0010 0010</td>
<td></td>
<td>→ value</td>
<td>load a float value from local variable 0</td>
</tr>
<tr>
<td>fload_1</td>
<td>23</td>
<td>0010 0011</td>
<td></td>
<td>→ value</td>
<td>load a float value from local variable 1</td>
</tr>
<tr>
<td>fload_2</td>
<td>24</td>
<td>0010 0100</td>
<td></td>
<td>→ value</td>
<td>load a float value from local variable 2</td>
</tr>
<tr>
<td>fload_3</td>
<td>25</td>
<td>0010 0101</td>
<td></td>
<td>→ value</td>
<td>load a float value from local variable 3</td>
</tr>
<tr>
<td>fmul</td>
<td>6a</td>
<td>0110 1010</td>
<td></td>
<td>value1, value2 → result</td>
<td>multiply two floats</td>
</tr>
<tr>
<td>fneg</td>
<td>76</td>
<td>0111 0110</td>
<td></td>
<td>value → result</td>
<td>negate a float</td>
</tr>
<tr>
<td>frem</td>
<td>72</td>
<td>0111 0010</td>
<td></td>
<td>value1, value2 → result</td>
<td>get the remainder from a division between two floats</td>
</tr>
<tr>
<td>freturn</td>
<td>ae</td>
<td>1010 1110</td>
<td></td>
<td>value → [empty]</td>
<td>return a float</td>
</tr>
<tr>
<td>fstore</td>
<td>38</td>
<td>0011 1000</td>
<td>1: index</td>
<td>value →</td>
<td>store a float value into a local variable #index</td>
</tr>
<tr>
<td>fstore_0</td>
<td>43</td>
<td>0100 0011</td>
<td></td>
<td>value →</td>
<td>store a float value into local variable 0</td>
</tr>
<tr>
<td>fstore_1</td>
<td>44</td>
<td>0100 0100</td>
<td></td>
<td>value →</td>
<td>store a float value into local variable 1</td>
</tr>
<tr>
<td>fstore_2</td>
<td>45</td>
<td>0100 0101</td>
<td></td>
<td>value →</td>
<td>store a float value into local variable 2</td>
</tr>
<tr>
<td>fstore_3</td>
<td>46</td>
<td>0100 0110</td>
<td></td>
<td>value →</td>
<td>store a float value into local variable 3</td>
</tr>
<tr>
<td>fsub</td>
<td>66</td>
<td>0110 0110</td>
<td></td>
<td>value1, value2 → result</td>
<td>subtract two floats</td>
</tr>
<tr>
<td>getfield</td>
<td>b4</td>
<td>1011 0100</td>
<td>2: indexbyte1, indexbyte2</td>
<td>objectref → value</td>
<td>get a field value of an object objectref, where the field is identified by field reference in the constant pool index (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>getstatic</td>
<td>b2</td>
<td>1011 0010</td>
<td>2: indexbyte1, indexbyte2</td>
<td>→ value</td>
<td>get a static field value of a class, where the field is identified by field reference in the constant pool index (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>goto</td>
<td>a7</td>
<td>1010 0111</td>
<td>2: branchbyte1, branchbyte2</td>
<td>[no change]</td>
<td>goes to another instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>goto_w</td>
<td>c8</td>
<td>1100 1000</td>
<td>4: branchbyte1, branchbyte2, branchbyte3, branchbyte4</td>
<td>[no change]</td>
<td>goes to another instruction at branchoffset (signed int constructed from unsigned bytes branchbyte1 &lt;&lt; 24 &#124; branchbyte2 &lt;&lt; 16 &#124; branchbyte3 &lt;&lt; 8 &#124; branchbyte4)</td>
</tr>
<tr>
<td>i2b</td>
<td>91</td>
<td>1001 0001</td>
<td></td>
<td>value → result</td>
<td>convert an int into a byte</td>
</tr>
<tr>
<td>i2c</td>
<td>92</td>
<td>1001 0010</td>
<td></td>
<td>value → result</td>
<td>convert an int into a character</td>
</tr>
<tr>
<td>i2d</td>
<td>87</td>
<td>1000 0111</td>
<td></td>
<td>value → result</td>
<td>convert an int into a double</td>
</tr>
<tr>
<td>i2f</td>
<td>86</td>
<td>1000 0110</td>
<td></td>
<td>value → result</td>
<td>convert an int into a float</td>
</tr>
<tr>
<td>i2l</td>
<td>85</td>
<td>1000 0101</td>
<td></td>
<td>value → result</td>
<td>convert an int into a long</td>
</tr>
<tr>
<td>i2s</td>
<td>93</td>
<td>1001 0011</td>
<td></td>
<td>value → result</td>
<td>convert an int into a short</td>
</tr>
<tr>
<td>iadd</td>
<td>60</td>
<td>0110 0000</td>
<td></td>
<td>value1, value2 → result</td>
<td>add two ints</td>
</tr>
<tr>
<td>iaload</td>
<td>2e</td>
<td>0010 1110</td>
<td></td>
<td>arrayref, index → value</td>
<td>load an int from an array</td>
</tr>
<tr>
<td>iand</td>
<td>7e</td>
<td>0111 1110</td>
<td></td>
<td>value1, value2 → result</td>
<td>perform a bitwise AND on two integers</td>
</tr>
<tr>
<td>iastore</td>
<td>4f</td>
<td>0100 1111</td>
<td></td>
<td>arrayref, index, value →</td>
<td>store an int into an array</td>
</tr>
<tr>
<td>iconst_m1</td>
<td>2</td>
<td>0000 0010</td>
<td></td>
<td>→ -1</td>
<td>load the int value −1 onto the stack</td>
</tr>
<tr>
<td>iconst_0</td>
<td>3</td>
<td>0000 0011</td>
<td></td>
<td>→ 0</td>
<td>load the int value 0 onto the stack</td>
</tr>
<tr>
<td>iconst_1</td>
<td>4</td>
<td>0000 0100</td>
<td></td>
<td>→ 1</td>
<td>load the int value 1 onto the stack</td>
</tr>
<tr>
<td>iconst_2</td>
<td>5</td>
<td>0000 0101</td>
<td></td>
<td>→ 2</td>
<td>load the int value 2 onto the stack</td>
</tr>
<tr>
<td>iconst_3</td>
<td>6</td>
<td>0000 0110</td>
<td></td>
<td>→ 3</td>
<td>load the int value 3 onto the stack</td>
</tr>
<tr>
<td>iconst_4</td>
<td>7</td>
<td>0000 0111</td>
<td></td>
<td>→ 4</td>
<td>load the int value 4 onto the stack</td>
</tr>
<tr>
<td>iconst_5</td>
<td>8</td>
<td>0000 1000</td>
<td></td>
<td>→ 5</td>
<td>load the int value 5 onto the stack</td>
</tr>
<tr>
<td>idiv</td>
<td>6c</td>
<td>0110 1100</td>
<td></td>
<td>value1, value2 → result</td>
<td>divide two integers</td>
</tr>
<tr>
<td>if_acmpeq</td>
<td>a5</td>
<td>1010 0101</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value1, value2 →</td>
<td>if references are equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>if_acmpne</td>
<td>a6</td>
<td>1010 0110</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value1, value2 →</td>
<td>if references are not equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>if_icmpeq</td>
<td>9f</td>
<td>1001 1111</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value1, value2 →</td>
<td>if ints are equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>if_icmpge</td>
<td>a2</td>
<td>1010 0010</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value1, value2 →</td>
<td>if value1 is greater than or equal to value2, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>if_icmpgt</td>
<td>a3</td>
<td>1010 0011</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value1, value2 →</td>
<td>if value1 is greater than value2, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>if_icmple</td>
<td>a4</td>
<td>1010 0100</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value1, value2 →</td>
<td>if value1 is less than or equal to value2, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>if_icmplt</td>
<td>a1</td>
<td>1010 0001</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value1, value2 →</td>
<td>if value1 is less than value2, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>if_icmpne</td>
<td>a0</td>
<td>1010 0000</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value1, value2 →</td>
<td>if ints are not equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>ifeq</td>
<td>99</td>
<td>1001 1001</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value →</td>
<td>if value is 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>ifge</td>
<td>9c</td>
<td>1001 1100</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value →</td>
<td>if value is greater than or equal to 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>ifgt</td>
<td>9d</td>
<td>1001 1101</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value →</td>
<td>if value is greater than 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>ifle</td>
<td>9e</td>
<td>1001 1110</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value →</td>
<td>if value is less than or equal to 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>iflt</td>
<td>9b</td>
<td>1001 1011</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value →</td>
<td>if value is less than 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>ifne</td>
<td>9a</td>
<td>1001 1010</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value →</td>
<td>if value is not 0, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>ifnonnull</td>
<td>c7</td>
<td>1100 0111</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value →</td>
<td>if value is not null, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>ifnull</td>
<td>c6</td>
<td>1100 0110</td>
<td>2: branchbyte1, branchbyte2</td>
<td>value →</td>
<td>if value is null, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2)</td>
</tr>
<tr>
<td>iinc</td>
<td>84</td>
<td>1000 0100</td>
<td>2: index, const</td>
<td>[No change]</td>
<td>increment local variable #index by signed byte const</td>
</tr>
<tr>
<td>iload</td>
<td>15</td>
<td>0001 0101</td>
<td>1: index</td>
<td>→ value</td>
<td>load an int value from a local variable #index</td>
</tr>
<tr>
<td>iload_0</td>
<td>1a</td>
<td>0001 1010</td>
<td></td>
<td>→ value</td>
<td>load an int value from local variable 0</td>
</tr>
<tr>
<td>iload_1</td>
<td>1b</td>
<td>0001 1011</td>
<td></td>
<td>→ value</td>
<td>load an int value from local variable 1</td>
</tr>
<tr>
<td>iload_2</td>
<td>1c</td>
<td>0001 1100</td>
<td></td>
<td>→ value</td>
<td>load an int value from local variable 2</td>
</tr>
<tr>
<td>iload_3</td>
<td>1d</td>
<td>0001 1101</td>
<td></td>
<td>→ value</td>
<td>load an int value from local variable 3</td>
</tr>
<tr>
<td>impdep1</td>
<td>fe</td>
<td>1111 1110</td>
<td></td>
<td></td>
<td>reserved for implementation-dependent operations within debuggers; should not appear in any class file</td>
</tr>
<tr>
<td>impdep2</td>
<td>ff</td>
<td>1111 1111</td>
<td></td>
<td></td>
<td>reserved for implementation-dependent operations within debuggers; should not appear in any class file</td>
</tr>
<tr>
<td>imul</td>
<td>68</td>
<td>0110 1000</td>
<td></td>
<td>value1, value2 → result</td>
<td>multiply two integers</td>
</tr>
<tr>
<td>ineg</td>
<td>74</td>
<td>0111 0100</td>
<td></td>
<td>value → result</td>
<td>negate int</td>
</tr>
<tr>
<td>instanceof</td>
<td>c1</td>
<td>1100 0001</td>
<td>2: indexbyte1, indexbyte2</td>
<td>objectref → result</td>
<td>determines if an object objectref is of a given type, identified by class reference index in constant pool (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>invokedynamic</td>
<td>ba</td>
<td>1011 1010</td>
<td>4: indexbyte1, indexbyte2, 0, 0</td>
<td>[arg1, arg2, …] → result</td>
<td>invokes a dynamic method and puts the result on the stack (might be void); the method is identified by method reference index in constant pool (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>invokeinterface</td>
<td>b9</td>
<td>1011 1001</td>
<td>4: indexbyte1, indexbyte2, count, 0</td>
<td>objectref, [arg1, arg2, …] → result</td>
<td>invokes an interface method on object objectref and puts the result on the stack (might be void); the interface method is identified by method reference index in constant pool (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>invokespecial</td>
<td>b7</td>
<td>1011 0111</td>
<td>2: indexbyte1, indexbyte2</td>
<td>objectref, [arg1, arg2, …] → result</td>
<td>invoke instance method on object objectref and puts the result on the stack (might be void); the method is identified by method reference index in constant pool (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>invokestatic</td>
<td>b8</td>
<td>1011 1000</td>
<td>2: indexbyte1, indexbyte2</td>
<td>[arg1, arg2, …] → result</td>
<td>invoke a static method and puts the result on the stack (might be void); the method is identified by method reference index in constant pool (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>invokevirtual</td>
<td>b6</td>
<td>1011 0110</td>
<td>2: indexbyte1, indexbyte2</td>
<td>objectref, [arg1, arg2, …] → result</td>
<td>invoke virtual method on object objectref and puts the result on the stack (might be void); the method is identified by method reference index in constant pool (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>ior</td>
<td>80</td>
<td>1000 0000</td>
<td></td>
<td>value1, value2 → result</td>
<td>bitwise int OR</td>
</tr>
<tr>
<td>irem</td>
<td>70</td>
<td>0111 0000</td>
<td></td>
<td>value1, value2 → result</td>
<td>logical int remainder</td>
</tr>
<tr>
<td>ireturn</td>
<td>ac</td>
<td>1010 1100</td>
<td></td>
<td>value → [empty]</td>
<td>return an integer from a method</td>
</tr>
<tr>
<td>ishl</td>
<td>78</td>
<td>0111 1000</td>
<td></td>
<td>value1, value2 → result</td>
<td>int shift left</td>
</tr>
<tr>
<td>ishr</td>
<td>7a</td>
<td>0111 1010</td>
<td></td>
<td>value1, value2 → result</td>
<td>int arithmetic shift right</td>
</tr>
<tr>
<td>istore</td>
<td>36</td>
<td>0011 0110</td>
<td>1: index</td>
<td>value →</td>
<td>store int value into variable #index</td>
</tr>
<tr>
<td>istore_0</td>
<td>3b</td>
<td>0011 1011</td>
<td></td>
<td>value →</td>
<td>store int value into variable 0</td>
</tr>
<tr>
<td>istore_1</td>
<td>3c</td>
<td>0011 1100</td>
<td></td>
<td>value →</td>
<td>store int value into variable 1</td>
</tr>
<tr>
<td>istore_2</td>
<td>3d</td>
<td>0011 1101</td>
<td></td>
<td>value →</td>
<td>store int value into variable 2</td>
</tr>
<tr>
<td>istore_3</td>
<td>3e</td>
<td>0011 1110</td>
<td></td>
<td>value →</td>
<td>store int value into variable 3</td>
</tr>
<tr>
<td>isub</td>
<td>64</td>
<td>0110 0100</td>
<td></td>
<td>value1, value2 → result</td>
<td>int subtract</td>
</tr>
<tr>
<td>iushr</td>
<td>7c</td>
<td>0111 1100</td>
<td></td>
<td>value1, value2 → result</td>
<td>int logical shift right</td>
</tr>
<tr>
<td>ixor</td>
<td>82</td>
<td>1000 0010</td>
<td></td>
<td>value1, value2 → result</td>
<td>int xor</td>
</tr>
<tr>
<td>jsr†</td>
<td>a8</td>
<td>1010 1000</td>
<td>2: branchbyte1, branchbyte2</td>
<td>→ address</td>
<td>jump to subroutine at branchoffset (signed short constructed from unsigned bytes branchbyte1 &lt;&lt; 8 &#124; branchbyte2) and place the return address on the stack</td>
</tr>
<tr>
<td>jsr_w†</td>
<td>c9</td>
<td>1100 1001</td>
<td>4: branchbyte1, branchbyte2, branchbyte3, branchbyte4</td>
<td>→ address</td>
<td>jump to subroutine at branchoffset (signed int constructed from unsigned bytes branchbyte1 &lt;&lt; 24 &#124; branchbyte2 &lt;&lt; 16 &#124; branchbyte3 &lt;&lt; 8 &#124; branchbyte4) and place the return address on the stack</td>
</tr>
<tr>
<td>l2d</td>
<td>8a</td>
<td>1000 1010</td>
<td></td>
<td>value → result</td>
<td>convert a long to a double</td>
</tr>
<tr>
<td>l2f</td>
<td>89</td>
<td>1000 1001</td>
<td></td>
<td>value → result</td>
<td>convert a long to a float</td>
</tr>
<tr>
<td>l2i</td>
<td>88</td>
<td>1000 1000</td>
<td></td>
<td>value → result</td>
<td>convert a long to a int</td>
</tr>
<tr>
<td>ladd</td>
<td>61</td>
<td>0110 0001</td>
<td></td>
<td>value1, value2 → result</td>
<td>add two longs</td>
</tr>
<tr>
<td>laload</td>
<td>2f</td>
<td>0010 1111</td>
<td></td>
<td>arrayref, index → value</td>
<td>load a long from an array</td>
</tr>
<tr>
<td>land</td>
<td>7f</td>
<td>0111 1111</td>
<td></td>
<td>value1, value2 → result</td>
<td>bitwise AND of two longs</td>
</tr>
<tr>
<td>lastore</td>
<td>50</td>
<td>0101 0000</td>
<td></td>
<td>arrayref, index, value →</td>
<td>store a long to an array</td>
</tr>
<tr>
<td>lcmp</td>
<td>94</td>
<td>1001 0100</td>
<td></td>
<td>value1, value2 → result</td>
<td>push 0 if the two longs are the same, 1 if value1 is greater than value2, -1 otherwise</td>
</tr>
<tr>
<td>lconst_0</td>
<td>9</td>
<td>0000 1001</td>
<td></td>
<td>→ 0L</td>
<td>push 0L (the number zero with type long) onto the stack</td>
</tr>
<tr>
<td>lconst_1</td>
<td>0a</td>
<td>0000 1010</td>
<td></td>
<td>→ 1L</td>
<td>push 1L (the number one with type long) onto the stack</td>
</tr>
<tr>
<td>ldc</td>
<td>12</td>
<td>0001 0010</td>
<td>1: index</td>
<td>→ value</td>
<td>push a constant #index from a constant pool (String, int, float, Class, java.lang.invoke.MethodType, java.lang.invoke.MethodHandle, or a dynamically-computed constant) onto the stack</td>
</tr>
<tr>
<td>ldc_w</td>
<td>13</td>
<td>0001 0011</td>
<td>2: indexbyte1, indexbyte2</td>
<td>→ value</td>
<td>push a constant #index from a constant pool (String, int, float, Class, java.lang.invoke.MethodType, java.lang.invoke.MethodHandle, or a dynamically-computed constant) onto the stack (wide index is constructed as indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>ldc2_w</td>
<td>14</td>
<td>0001 0100</td>
<td>2: indexbyte1, indexbyte2</td>
<td>→ value</td>
<td>push a constant #index from a constant pool (double, long, or a dynamically-computed constant) onto the stack (wide index is constructed as indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>ldiv</td>
<td>6d</td>
<td>0110 1101</td>
<td></td>
<td>value1, value2 → result</td>
<td>divide two longs</td>
</tr>
<tr>
<td>lload</td>
<td>16</td>
<td>0001 0110</td>
<td>1: index</td>
<td>→ value</td>
<td>load a long value from a local variable #index</td>
</tr>
<tr>
<td>lload_0</td>
<td>1e</td>
<td>0001 1110</td>
<td></td>
<td>→ value</td>
<td>load a long value from a local variable 0</td>
</tr>
<tr>
<td>lload_1</td>
<td>1f</td>
<td>0001 1111</td>
<td></td>
<td>→ value</td>
<td>load a long value from a local variable 1</td>
</tr>
<tr>
<td>lload_2</td>
<td>20</td>
<td>0010 0000</td>
<td></td>
<td>→ value</td>
<td>load a long value from a local variable 2</td>
</tr>
<tr>
<td>lload_3</td>
<td>21</td>
<td>0010 0001</td>
<td></td>
<td>→ value</td>
<td>load a long value from a local variable 3</td>
</tr>
<tr>
<td>lmul</td>
<td>69</td>
<td>0110 1001</td>
<td></td>
<td>value1, value2 → result</td>
<td>multiply two longs</td>
</tr>
<tr>
<td>lneg</td>
<td>75</td>
<td>0111 0101</td>
<td></td>
<td>value → result</td>
<td>negate a long</td>
</tr>
<tr>
<td>lookupswitch</td>
<td>ab</td>
<td>1010 1011</td>
<td>8+: &lt;0–3 bytes padding&gt;, defaultbyte1, defaultbyte2, defaultbyte3, defaultbyte4, npairs1, npairs2, npairs3, npairs4, match-offset pairs…</td>
<td>key →</td>
<td>a target address is looked up from a table using a key and execution continues from the instruction at that address</td>
</tr>
<tr>
<td>lor</td>
<td>81</td>
<td>1000 0001</td>
<td></td>
<td>value1, value2 → result</td>
<td>bitwise OR of two longs</td>
</tr>
<tr>
<td>lrem</td>
<td>71</td>
<td>0111 0001</td>
<td></td>
<td>value1, value2 → result</td>
<td>remainder of division of two longs</td>
</tr>
<tr>
<td>lreturn</td>
<td>ad</td>
<td>1010 1101</td>
<td></td>
<td>value → [empty]</td>
<td>return a long value</td>
</tr>
<tr>
<td>lshl</td>
<td>79</td>
<td>0111 1001</td>
<td></td>
<td>value1, value2 → result</td>
<td>bitwise shift left of a long value1 by int value2 positions</td>
</tr>
<tr>
<td>lshr</td>
<td>7b</td>
<td>0111 1011</td>
<td></td>
<td>value1, value2 → result</td>
<td>bitwise shift right of a long value1 by int value2 positions</td>
</tr>
<tr>
<td>lstore</td>
<td>37</td>
<td>0011 0111</td>
<td>1: index</td>
<td>value →</td>
<td>store a long value in a local variable #index</td>
</tr>
<tr>
<td>lstore_0</td>
<td>3f</td>
<td>0011 1111</td>
<td></td>
<td>value →</td>
<td>store a long value in a local variable 0</td>
</tr>
<tr>
<td>lstore_1</td>
<td>40</td>
<td>0100 0000</td>
<td></td>
<td>value →</td>
<td>store a long value in a local variable 1</td>
</tr>
<tr>
<td>lstore_2</td>
<td>41</td>
<td>0100 0001</td>
<td></td>
<td>value →</td>
<td>store a long value in a local variable 2</td>
</tr>
<tr>
<td>lstore_3</td>
<td>42</td>
<td>0100 0010</td>
<td></td>
<td>value →</td>
<td>store a long value in a local variable 3</td>
</tr>
<tr>
<td>lsub</td>
<td>65</td>
<td>0110 0101</td>
<td></td>
<td>value1, value2 → result</td>
<td>subtract two longs</td>
</tr>
<tr>
<td>lushr</td>
<td>7d</td>
<td>0111 1101</td>
<td></td>
<td>value1, value2 → result</td>
<td>bitwise shift right of a long value1 by int value2 positions, unsigned</td>
</tr>
<tr>
<td>lxor</td>
<td>83</td>
<td>1000 0011</td>
<td></td>
<td>value1, value2 → result</td>
<td>bitwise XOR of two longs</td>
</tr>
<tr>
<td>monitorenter</td>
<td>c2</td>
<td>1100 0010</td>
<td></td>
<td>objectref →</td>
<td>enter monitor for object (“grab the lock” – start of synchronized() section)</td>
</tr>
<tr>
<td>monitorexit</td>
<td>c3</td>
<td>1100 0011</td>
<td></td>
<td>objectref →</td>
<td>exit monitor for object (“release the lock” – end of synchronized() section)</td>
</tr>
<tr>
<td>multianewarray</td>
<td>c5</td>
<td>1100 0101</td>
<td>3: indexbyte1, indexbyte2, dimensions</td>
<td>count1, [count2,…] → arrayref</td>
<td>create a new array of dimensions dimensions of type identified by class reference in constant pool index (indexbyte1 &lt;&lt; 8 &#124; indexbyte2); the sizes of each dimension is identified by count1, [count2, etc.]</td>
</tr>
<tr>
<td>new</td>
<td>bb</td>
<td>1011 1011</td>
<td>2: indexbyte1, indexbyte2</td>
<td>→ objectref</td>
<td>create new object of type identified by class reference in constant pool index (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>newarray</td>
<td>bc</td>
<td>1011 1100</td>
<td>1: atype</td>
<td>count → arrayref</td>
<td>create new array with count elements of primitive type identified by atype</td>
</tr>
<tr>
<td>nop</td>
<td>0</td>
<td>0000 0000</td>
<td></td>
<td>[No change]</td>
<td>perform no operation</td>
</tr>
<tr>
<td>pop</td>
<td>57</td>
<td>0101 0111</td>
<td></td>
<td>value →</td>
<td>discard the top value on the stack</td>
</tr>
<tr>
<td>pop2</td>
<td>58</td>
<td>0101 1000</td>
<td></td>
<td>{value2, value1} →</td>
<td>discard the top two values on the stack (or one value, if it is a double or long)</td>
</tr>
<tr>
<td>putfield</td>
<td>b5</td>
<td>1011 0101</td>
<td>2: indexbyte1, indexbyte2</td>
<td>objectref, value →</td>
<td>set field to value in an object objectref, where the field is identified by a field reference index in constant pool (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>putstatic</td>
<td>b3</td>
<td>1011 0011</td>
<td>2: indexbyte1, indexbyte2</td>
<td>value →</td>
<td>set static field to value in a class, where the field is identified by a field reference index in constant pool (indexbyte1 &lt;&lt; 8 &#124; indexbyte2)</td>
</tr>
<tr>
<td>ret†</td>
<td>a9</td>
<td>1010 1001</td>
<td>1: index</td>
<td>[No change]</td>
<td>continue execution from address taken from a local variable #index (the asymmetry with jsr is intentional)</td>
</tr>
<tr>
<td>return</td>
<td>b1</td>
<td>1011 0001</td>
<td></td>
<td>→ [empty]</td>
<td>return void from method</td>
</tr>
<tr>
<td>saload</td>
<td>35</td>
<td>0011 0101</td>
<td></td>
<td>arrayref, index → value</td>
<td>load short from array</td>
</tr>
<tr>
<td>sastore</td>
<td>56</td>
<td>0101 0110</td>
<td></td>
<td>arrayref, index, value →</td>
<td>store short to array</td>
</tr>
<tr>
<td>sipush</td>
<td>11</td>
<td>0001 0001</td>
<td>2: byte1, byte2</td>
<td>→ value</td>
<td>push a short onto the stack as an integer value</td>
</tr>
<tr>
<td>swap</td>
<td>5f</td>
<td>0101 1111</td>
<td></td>
<td>value2, value1 → value1, value2</td>
<td>swaps two top words on the stack (note that value1 and value2 must not be double or long)</td>
</tr>
<tr>
<td>tableswitch</td>
<td>aa</td>
<td>1010 1010</td>
<td>16+: [0–3 bytes padding], defaultbyte1, defaultbyte2, defaultbyte3, defaultbyte4, lowbyte1, lowbyte2, lowbyte3, lowbyte4, highbyte1, highbyte2, highbyte3, highbyte4, jump offsets…</td>
<td>index →</td>
<td>continue execution from an address in the table at offset index</td>
</tr>
<tr>
<td>wide</td>
<td>c4</td>
<td>1100 0100</td>
<td>3/5: opcode, indexbyte1, indexbyte2 or iinc, indexbyte1, indexbyte2, countbyte1, countbyte2</td>
<td>[same as for corresponding instructions]</td>
<td>execute opcode, where opcode is either iload, fload, aload, lload, dload, istore, fstore, astore, lstore, dstore, or ret, but assume the index is 16 bit; or execute iinc, where the index is 16 bits and the constant to increment by is a signed 16 bit short</td>
</tr>
<tr>
<td>(no name)</td>
<td>cb-fd</td>
<td></td>
<td></td>
<td></td>
<td>these values are currently unassigned for opcodes and are reserved for future use</td>
</tr>
</tbody></table>
<p>†Deprecated in Java 7 (major class version 51). They will not appear in class files generated from a compiler newer than that. <code>ret</code> is not explicitly deprecated, but useless without the <code>jsr</code> and <code>jsr_w</code> opcodes.</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Java字节码是JVM执行Java程序的基础。通过深入理解操作数栈、局部变量区以及常用的字节码指令，开发者可以更好地理解Java程序的运行原理，甚至进行字节码层面的生成及优化。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9KYXZhX2J5dGVjb2RlX2luc3RydWN0aW9ucw==">List of Java bytecode instructions<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>bytecode</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈Java锁机制</title>
    <url>/2023/11/13/%E6%B5%85%E8%B0%88Java%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java并发编程中的锁机制是保证多线程安全的关键。本文将探讨Java中的无锁、偏向锁、轻量级锁、重量级锁。同时，我们也会比较这些锁与 <code>java.util.concurrent</code> 包中的 <code>Lock</code> 类之间的差异。<span id="more"></span></p>
<p>简单的来说，偏向锁，轻量级锁，重量级锁分别解决三个问题：</p>
<ol>
<li>只有一个线程进入临界区</li>
<li>多个线程交替进入临界区</li>
<li>多个线程同时进入临界区</li>
</ol>
<p>而锁的升级过程是单向的：无锁 <code>-&gt;</code> 偏向锁 <code>-&gt;</code> 轻量级锁 <code>-&gt;</code> 重量级锁</p>
<h2 id="Java对象头与Mark-Word"><a href="#Java对象头与Mark-Word" class="headerlink" title="Java对象头与Mark Word"></a>Java对象头与Mark Word</h2><p>Java对象在内存中的布局通常包括三部分：对象头（Object Header）、实例数据（Instance Data）和对齐填充（Padding）。而在研究锁机制之前，了解Java对象头和其中的Mark Word是很有必要的。</p>
<h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>对象头包含两部分信息：Mark Word和类型指针。类型指针用于确定对象的类。Mark Word则存储了对象的锁状态信息、哈希码、GC分代年龄等。</p>
<h3 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h3><p>Mark Word是实现轻量级锁和偏向锁的关键。它的值会随着锁标记的变化而变化，包含以下几种状态：</p>
<table>
<thead>
<tr>
<th>锁状态</th>
<th>内存结构（以32位的JVM为例）</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>25bit</td>
<td></td>
<td>4bit</td>
<td>1bit</td>
<td>2bit</td>
</tr>
<tr>
<td></td>
<td>23bit</td>
<td>2bit</td>
<td></td>
<td>是否偏向锁</td>
<td>锁标志位</td>
</tr>
<tr>
<td>无锁</td>
<td>对象的HashCode</td>
<td></td>
<td>GC分代年龄</td>
<td>0</td>
<td>01</td>
</tr>
<tr>
<td>偏向锁</td>
<td>线程ID</td>
<td>Epoch</td>
<td>GC分代年龄</td>
<td>1</td>
<td>01</td>
</tr>
<tr>
<td>轻量级锁</td>
<td>指向栈中锁记录的指针</td>
<td></td>
<td></td>
<td></td>
<td>00</td>
</tr>
<tr>
<td>重量级锁</td>
<td>指向重量级锁的指针</td>
<td></td>
<td></td>
<td></td>
<td>10</td>
</tr>
<tr>
<td>GC标记</td>
<td>空</td>
<td></td>
<td></td>
<td></td>
<td>11</td>
</tr>
</tbody></table>
<p>这些锁状态通过CAS操作来改变，从而实现不同级别的锁。</p>
<h2 id="无锁（Lock-Free）"><a href="#无锁（Lock-Free）" class="headerlink" title="无锁（Lock-Free）"></a>无锁（Lock-Free）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>无锁是指在多线程环境中不使用传统的锁机制来控制对共享资源的访问，而是依赖原子操作保证线程安全。无锁状态不是指没有使用任何同步机制，而是指没有使用阻塞锁。在无锁编程中，通常使用原子操作（如CAS - Compare and Swap）来实现线程安全。这些操作保证在同一时间只有一个线程能够修改共享资源，从而避免了锁的使用。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AtomicInteger</span> <span class="variable">atomicInt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">    atomicInt.incrementAndGet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AtomicInteger</code> 提供了一种无锁的方式来确保多线程环境下的线程安全。</p>
<h2 id="偏向锁（Biased-Locking）"><a href="#偏向锁（Biased-Locking）" class="headerlink" title="偏向锁（Biased Locking）"></a>偏向锁（Biased Locking）</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>偏向锁是为单一线程访问优化的锁机制。它在锁对象上存储线程ID，使得同一线程的后续锁请求无需再进行完整的同步。</p>
<p>注：<span class="exturl" data-url="aHR0cHM6Ly9vcGVuamRrLm9yZy9qZXBzLzM3NA==">JDK15废弃了偏向锁<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">biasedLockMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 偏向锁代码区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在JVM中，默认启用偏向锁。首次进入同步块的线程会激活偏向锁。</p>
<h2 id="轻量级锁（Lightweight-Lock）"><a href="#轻量级锁（Lightweight-Lock）" class="headerlink" title="轻量级锁（Lightweight Lock）"></a>轻量级锁（Lightweight Lock）</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>轻量级锁是在偏向锁遇到竞争时的一种状态，介于偏向锁和重量级锁之间。轻量级锁在遇到竞争时，会使用一种称为”自旋”的技术来避免线程立即进入阻塞状态。自旋锁的基本思想是：当线程想要获取锁而锁已被其他线程占用时，线程不会立即挂起，而是在一段时间内循环检查锁是否已被释放，期望在很短的时间内获取到锁，从而减少线程挂起的开销。自旋锁在轻量级锁中是一个重要的优化，它能在适当的场景下提高程序性能，但也需要根据具体情况谨慎使用以避免资源浪费。</p>
<p>线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，则自旋获取锁，当自旋获取锁仍然失败时，表示存在其他线程竞争锁(两个或两个以上的线程竞争同一个锁)，则轻量级锁会升级成重量级锁。</p>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LightweightLockExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 在这里，当偏向锁遇到竞争时，JVM会自动升级为轻量级锁</span></span><br><span class="line">            <span class="comment">// 执行一些操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>synchronized</code>关键字用于在lock对象上同步。当这个方法被多个线程频繁调用，但并不满足重量级锁的条件（即线程阻塞不是很严重），JVM 会将偏向锁升级为轻量级锁。轻量级锁通过CAS操作和自旋来减少线程阻塞的开销，提高效率。</p>
<p>这个例子本身并不能直接展示轻量级锁的工作，因为这是JVM内部的实现细节。但它可以用来模拟可能触发轻量级锁升级的场景。轻量级锁的转换和工作机制通常是透明的，不需要（也不能）由开发者显式控制。</p>
<h2 id="重量级锁（Heavyweight-Lock）"><a href="#重量级锁（Heavyweight-Lock）" class="headerlink" title="重量级锁（Heavyweight Lock）"></a>重量级锁（Heavyweight Lock）</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>重量级锁是通过操作系统的互斥量实现的锁，当轻量级锁竞争激烈时会升级为重量级锁。</p>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">heavyWeightLockMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 在高竞争下使用重量级锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多线程竞争同一个锁时，可能会导致轻量级锁升级为重量级锁。</p>
<h2 id="比较java-util-concurrent-Lock-与synchronized"><a href="#比较java-util-concurrent-Lock-与synchronized" class="headerlink" title="比较java.util.concurrent.Lock 与synchronized"></a>比较<code>java.util.concurrent.Lock</code> 与<code>synchronized</code></h2><p><code>java.util.concurrent</code> 包中的 <code>Lock</code> 类（如 <code>ReentrantLock</code>）与 <code>synchronized</code> 关键字所使用的内置锁机制（偏向锁、轻量级锁、重量级锁）是不同的。<code>Lock</code> 类提供了一种更为灵活、丰富的线程同步机制，如可中断的锁获取、公平性选择等。以下是一些关键点：</p>
<ol>
<li><p><strong>锁的类型</strong>：<code>Lock</code> 接口及其实现类（如 <code>ReentrantLock</code>）通常不会使用到JVM内部的偏向锁、轻量级锁、重量级锁。相反，它们通常直接依赖于操作系统的同步机制（类似于重量级锁），或者通过复杂的内部策略来提供锁功能。</p>
</li>
<li><p><strong>更多控制</strong>：与 <code>synchronized</code> 不同，<code>Lock</code> 类提供了更多的控制能力，比如尝试非阻塞地获取锁（<code>tryLock</code>），可中断的锁获取，以及公平性（公平锁或非公平锁）。</p>
</li>
<li><p><strong>公平性选项</strong>：例如，<code>ReentrantLock</code> 允许你选择是创建一个基于公平性原则的锁（先来先服务），还是一个非公平锁。<code>synchronized</code> 不提供这种选项。</p>
</li>
<li><p><strong>性能和特性</strong>：虽然 <code>synchronized</code> 在近期的Java版本中得到了显著优化，但在某些复杂的同步场景中，<code>Lock</code> 类可能提供更好的性能和灵活性。</p>
</li>
<li><p><strong>功能丰富</strong>：<code>Lock</code> 接口还提供了一些 <code>synchronized</code> 无法提供的功能，如条件变量（<code>Condition</code>），这为线程间的通信提供了更多的可能性。</p>
</li>
</ol>
<p>总而言之，<code>java.util.concurrent</code> 包中的 <code>Lock</code> 类并不直接使用JVM内部的锁状态（偏向锁、轻量级锁、重量级锁），而是提供了一个更高级、更灵活的线程同步机制。这些锁通常用于更复杂的并发场景，其中需要比 <code>synchronized</code> 提供的更细粒度的锁控制。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>理解Java中这四种锁及其适用场景，以及它们与 <code>Lock</code> 类的区别，对于编写高效、线程安全的并发程序至关重要。开发者应根据实际应用场景选择合适的锁机制。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>synchronized</tag>
        <tag>Lock</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈Raft共识算法</title>
    <url>/2023/12/11/%E6%B5%85%E8%B0%88Raft%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Raft算法是一种分布式系统中用于实现一致性的共识算法，主要目标是确保在分布式环境中数据的一致性。在分布式系统中，多个节点需要协作处理操作和存储数据，而Raft算法提供了一种有效的方法来协调这些节点，确保整个系统的稳定性和可靠性。</p>
<p>Raft算法的设计哲学强调了易理解性和可操作性。与其他分布式一致性算法（如Paxos）相比，Raft更易于理解和实现，这使得它成为学习和实践分布式系统的理想选择。Raft通过将共识问题分解为几个相对简单的子问题（如领导选举、日志复制等）来降低复杂性。</p>
<p>Raft的核心在于将所有复杂的分布式一致性问题归结为一系列基本的操作和规则，这些操作和规则涵盖了领导选举、日志复制和安全性保证。通过这些机制，Raft确保即便在节点故障或网络问题的情况下，系统状态也能保持一致和完整。</p>
<p>Raft算法广泛应用于各种分布式系统和服务中，特别是在需要高可用性和一致性保证的场景。例如，它被用于分布式数据库、分布式文件系统、云计算服务等多个领域。<span id="more"></span></p>
<h2 id="Raft算法的工作原理"><a href="#Raft算法的工作原理" class="headerlink" title="Raft算法的工作原理"></a>Raft算法的工作原理</h2><p>Raft算法的操作可以分为三个关键阶段：领导选举、日志复制和安全性与一致性维护。</p>
<h3 id="领导选举"><a href="#领导选举" class="headerlink" title="领导选举"></a>领导选举</h3><p>在Raft算法中，领导选举是一个关键步骤，确保集群中始终有一个节点充当领导者来协调操作。以下是选举过程的详细说明：</p>
<h4 id="选举触发"><a href="#选举触发" class="headerlink" title="选举触发"></a>选举触发</h4><p>选举通常由以下两种情况触发：</p>
<ol>
<li><strong>定时器超时</strong>：每个节点维护一个选举定时器。如果在定时器超时之前没有收到当前领导者的消息，该节点便会触发选举。选举定时器的超时时间随机设定，通常在一个预定范围内，如150到300毫秒。这减少了选举冲突和分裂的可能性，提高领导选举的效率和稳定性。</li>
<li><strong>集群启动</strong>：当集群启动时，没有现有的领导者，因此会立即开始选举过程。</li>
</ol>
<h4 id="成为候选者"><a href="#成为候选者" class="headerlink" title="成为候选者"></a>成为候选者</h4><p>触发选举的节点会将自己的状态从“跟随者”转变为“候选者”，并执行以下步骤：</p>
<ol>
<li><strong>增加任期号</strong>：候选者首先增加自己的当前任期号（每次选举都有一个唯一的任期号）。</li>
<li><strong>投票给自己</strong>：候选者给自己投票。</li>
<li><strong>发送请求投票消息</strong>：候选者向集群中的其他节点发送请求投票的消息。</li>
</ol>
<h4 id="收集选票"><a href="#收集选票" class="headerlink" title="收集选票"></a>收集选票</h4><p>集群中的其他节点在收到请求投票消息后会做出响应：</p>
<ol>
<li><strong>投票规则</strong>：节点只会在当前任期内投票一次。如果接收到的请求来自任期号更高的候选者，节点会更新自己的任期号，并可能投票给该候选者。</li>
<li><strong>日志新鲜度检查</strong>：在投票之前，节点会检查候选者的日志是否至少和自己的一样新。这是通过比较日志中最后一条条目的任期号和索引来决定的。</li>
</ol>
<h4 id="赢得选举"><a href="#赢得选举" class="headerlink" title="赢得选举"></a>赢得选举</h4><p>选举的结果由以下两种情况之一确定：</p>
<ol>
<li><strong>获得多数票</strong>：如果候选者从集群的大多数节点那里获得了选票，它就成为新的领导者。</li>
<li><strong>选举超时</strong>：如果没有候选者获得多数票（可能因为票数分散或网络问题），选举过程将失败。在这种情况下，节点将重置其选举定时器，并在定时器再次超时时开始新一轮的选举。</li>
</ol>
<h4 id="新领导者的行动"><a href="#新领导者的行动" class="headerlink" title="新领导者的行动"></a>新领导者的行动</h4><p>一旦选出新的领导者，它将开始发送心跳消息（空的附加日志条目）给其他节点，表明领导者的存在并防止新的选举触发。</p>
<h3 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h3><p>日志复制是Raft算法中的核心部分，用于确保分布式系统中所有节点的数据一致性。其过程涉及以下关键步骤：</p>
<ol>
<li><p><strong>客户端请求</strong>：日志复制过程始于客户端向领导者发送请求（如数据更新）。</p>
</li>
<li><p><strong>日志条目的创建</strong>：领导者接收到请求后，会将该请求作为一个新的日志条目添加到其日志中。此时，该条目被标记为“未提交”。</p>
</li>
<li><p><strong>日志条目的复制</strong>：随后，领导者将这个新的日志条目发送给集群中的其他节点（跟随者）。领导者需要保持与所有跟随者的持续通信，以确保日志条目得到复制。</p>
</li>
<li><p><strong>跟随者响应</strong>：跟随者接收到新的日志条目后，会将其添加到自己的日志中，并向领导者发送响应，表示已成功接收并记录该条目。</p>
</li>
<li><p><strong>提交日志条目</strong>：一旦领导者从大多数跟随者那里接收到了成功的响应，它便将该日志条目标记为“已提交”。领导者还会通知跟随者哪些条目已经提交。</p>
</li>
<li><p><strong>应用到状态机</strong>：一旦日志条目被提交，领导者和跟随者会将这个条目应用到它们各自的状态机上。这意味着客户端请求的操作被实际执行。</p>
</li>
<li><p><strong>客户端响应</strong>：完成上述步骤后，领导者会向客户端发送响应，表示其请求已经被成功处理。</p>
</li>
</ol>
<h3 id="安全性与一致性"><a href="#安全性与一致性" class="headerlink" title="安全性与一致性"></a>安全性与一致性</h3><p>在Raft算法中，安全性和一致性是确保系统可靠运行的关键。</p>
<ol>
<li><p><strong>安全性</strong>：Raft通过上述机制确保即使在领导者崩溃或网络分区的情况下，集群的状态也始终保持一致。即便在这些情况下，任何已提交的更改都不会丢失，而且任何未提交的更改都不会被错误地应用。</p>
</li>
<li><p><strong>日志一致性保证</strong>：Raft通过严格的日志复制机制来确保所有节点的日志一致性。任何已提交的日志条目都保证在所有节点上存在且顺序相同。</p>
</li>
<li><p><strong>领导者的一致性原则</strong>：Raft算法保证新选举出的领导者拥有所有已提交的日志条目。这是通过在选举过程中对候选者的日志进行“新鲜度”检查来实现的，确保新的领导者具有最新的数据。</p>
</li>
<li><p><strong>提交规则</strong>：一个日志条目从领导者复制到集群中的其他节点后，只有当“大多数”节点都存储了该条目时，它才被认为是“已提交的”。这里的“大多数”意味着超过一半的节点。例如，在一个有五个节点的集群中，至少需要三个节点存储了该条目才能认为它已被提交。</p>
</li>
<li><p><strong>应用日志条目</strong>：一旦一个日志条目被认为是已提交的，它就可以被安全地应用到每个节点的状态机上，因为此时所有节点都已经存储了该条目。</p>
</li>
<li><p><strong>提交与应用的区别</strong>：在Raft中，一个条目被“提交”是指它已经被安全地记录在大多数节点上，而“应用”是指将日志条目的内容实际执行或加入到系统的状态中。</p>
</li>
</ol>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Raft算法的优势在于其易于理解和实现。它分解了复杂的共识问题，使算法更易理解和应用，同时提供了关于安全性和一致性的明确保证。理解Raft算法对研究分布式系统至关重要。它不仅是解决分布式系统一致性问题的有效工具，也是现代计算机科学的关键组成部分。</p>
]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Consensus</tag>
        <tag>Raft</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈数据仓库的分层设计</title>
    <url>/2023/11/20/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在构建现代数据仓库(Data Warehouse)时，分层设计方法不仅提高了数据处理的效率和质量，还增加了系统的灵活性和可扩展性，对于各种类型的业务环境都至关重要。<span id="more"></span></p>
<h2 id="分层的意义"><a href="#分层的意义" class="headerlink" title="分层的意义"></a>分层的意义</h2><ol>
<li><strong>效率提升</strong>：通过将数据处理分散到不同层次，提升整体系统的处理效率。每个层级专注于其特定的任务，优化数据流和处理时间。</li>
<li><strong>数据质量和一致性</strong>：每个层级对数据进行清洗和标准化，提升数据质量，确保在整个组织中的一致性。</li>
<li><strong>灵活性和可扩展性</strong>：分层设计提供灵活性，允许数据架构根据业务需求和技术发展进行调整和扩展。</li>
<li><strong>针对性数据服务</strong>：每个层次针对不同用户和业务需求提供服务，确保数据在正确的时间被正确地使用。</li>
</ol>
<h2 id="分层示例"><a href="#分层示例" class="headerlink" title="分层示例"></a>分层示例</h2><p>以处理金融市场数据为例，简要说明数据仓库设计中的各个层级：</p>
<ol>
<li><p><strong>操作数据存储，也叫贴源层（Operational Data Store，ODS）</strong></p>
<ul>
<li><strong>数据源</strong>：实时交易数据、客户交易记录、市场行情更新等，涵盖股票、债券、外汇等多种金融产品。</li>
<li><strong>处理</strong>：通过ETL处理，直接加载原始数据，并且保持数据原貌。</li>
<li><strong>目的</strong>：接入来自各个渠道的数据，为更深入的分析提供实时或近实时的数据基础。</li>
</ul>
</li>
<li><p><strong>数据明细层（Data Warehouse Detail，DWD）</strong></p>
<ul>
<li><strong>数据源</strong>：ODS层的原始数据。</li>
<li><strong>处理</strong>：进行数据清洗和转换，确保交易数据的完整性和准确性，形成交易明细表。</li>
<li><strong>目的</strong>：创建清洁、标准化的数据集，为数据仓库的高级分析和决策支持做好准备。</li>
</ul>
</li>
<li><p><strong>数据基础层（Data Warehouse Base，DWB）或中间层（Data Warehouse Middle，DWM）</strong></p>
<ul>
<li><strong>数据源</strong>：DWD层的处理过的数据。</li>
<li><strong>处理</strong>：对明细数据按照常用维度做初步的汇总，计算出常用的统计指标，存储客观数据：比如：交易产品类型按天汇总笔数，金额等，形成交易基础表。</li>
<li><strong>目的</strong>：作为数据仓库的核心，确保数据的快速访问和高效管理，支持复杂的查询和数据挖掘。</li>
</ul>
</li>
<li><p><strong>数据服务层（Data Warehouse Service，DWS）</strong></p>
<ul>
<li><strong>数据源</strong>：DWB/DWM层的数据。</li>
<li><strong>处理</strong>：数据聚合和汇总，如按照时间段、产品类型或客户分群进行市场趋势分析和风险评估，形成交易主题宽表。</li>
<li><strong>目的</strong>：提供汇总数据和高级分析，帮助管理层理解市场动态和客户行为。</li>
</ul>
</li>
<li><p><strong>应用数据层（Application Data Service，ADS）</strong></p>
<ul>
<li><strong>数据源</strong>：DWS层的汇总数据。</li>
<li><strong>处理</strong>：定制化数据处理，满足特定业务需求，如生成针对客户投资组合的分析报告，市场风险分析，合规性监控报告等。</li>
<li><strong>目的</strong>：为最终用户提供直接、易于理解的数据视图和报告，支持具体的业务决策和操作。</li>
</ul>
</li>
</ol>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在任何业务环境中，尤其是数据密集型的行业，分层的数据仓库设计至关重要。它不仅提高了数据处理的效率，还确保了数据质量和一致性，为各种业务需求提供支持。这种方法的灵活性和扩展性使其成为适应快速变化的市场环境和业务需求的理想选择。</p>
]]></content>
      <categories>
        <category>Data Warehouse</category>
      </categories>
      <tags>
        <tag>Data Warehouse</tag>
        <tag>ODS</tag>
        <tag>DWD</tag>
        <tag>DWM</tag>
        <tag>DWB</tag>
        <tag>DWS</tag>
        <tag>ADS</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈TCP三次握手和四次挥手</title>
    <url>/2024/05/18/%E6%B5%85%E8%B0%88TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在计算机网络中，TCP是实现可靠数据传输的重要协议。TCP通过三次握手（Three-Way Handshake）来建立连接，通过四次挥手（Four-Way Termination）来终止连接，确保数据传输的可靠性和连接管理的完整性。三次握手确保双方在通信前建立同步连接，防止重复数据包的干扰，确保序列号的同步。四次挥手则确保双方在连接终止时都能完全释放资源，防止数据丢失，并确保网络中不存在旧的数据包，从而避免新的连接受到干扰。理解这些过程对于排查网络问题和设计可靠的网络应用至关重要。<span id="more"></span></p>
<h3 id="三次握手及四次挥手过程示意图"><a href="#三次握手及四次挥手过程示意图" class="headerlink" title="三次握手及四次挥手过程示意图"></a>三次握手及四次挥手过程示意图</h3><p><img data-src="tcp_handshake_termination.png"></p>
<h3 id="TCP连接状态"><a href="#TCP连接状态" class="headerlink" title="TCP连接状态"></a>TCP连接状态</h3><table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
<th>客户端</th>
<th>服务器</th>
</tr>
</thead>
<tbody><tr>
<td><code>LISTEN</code></td>
<td>表示服务器端的某个socket处于监听状态，可以接受客户端的连接。首先服务器端需要调用<code>listen()</code>以打开一个socket进行监听，状态为<code>LISTEN</code>。有提供某种服务才会处于<code>LISTEN</code>状态，TCP状态变化就是某个端口的状态变化，提供一个服务就打开一个端口。例如FTP服务启动后首先处于侦听(<code>LISTEN</code>)状态。处于侦听<code>LISTEN</code>状态时，该端口是开放的，等待连接，但还没有被连接</td>
<td></td>
<td>√</td>
</tr>
<tr>
<td><code>SYN_SENT</code></td>
<td>在客户端调用<code>connect()</code>以发送连接请求后，等待匹配的连接请求。比如客户端tcp发送一个SYN以请求建立一个连接，之后状态置为<code>SYN_SENT</code></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td><code>SYN_RCVD</code></td>
<td>在收到和发送一个连接请求后等待对方对连接请求的确认。当服务器收到客户端发送的同步信号时，将标志位ACK和SYN置1发送给客户端，此时服务器端处于<code>SYN_RCVD</code>状态， 如果连接成功了就变为<code>ESTABLISHED</code>，正常情况下<code>SYN_RCVD</code>状态非常短暂</td>
<td></td>
<td>√</td>
</tr>
<tr>
<td><code>ESTABLISHED</code></td>
<td>连接建立（数据传输阶段的正常状态）</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><code>FIN_WAIT_1</code></td>
<td>等待远端TCP连接终止请求，或先前的连接终止请求的确认。主动关闭(active close)端应用程序调用<code>close()</code>，于是其TCP发出FIN请求主动关闭连接，之后进入<code>FIN_WAIT_1</code>状态</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td><code>FIN_WAIT_2</code></td>
<td>主动关闭端接到ACK后，就进入了<code>FIN_WAIT_2</code>，这时处于等待远端TCP等待连接终止请求，这就是著名的半关闭的状态了，这是在关闭连接时，客户端和服务器两次握手之后的状态。在这个状态下，应用程序还有接受数据的能力，但是已经无法发送数据，但是也有一种可能是，客户端一直处于<code>FIN_WAIT_2</code>状态，而服务器则一直处于WAIT_CLOSE状态，而直到应用层来决定关闭这个状态</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td><code>CLOSE_WAIT</code></td>
<td>等待从本地用户发来的连接终止请求，被动关闭(passive close)端TCP接到FIN后，就发出ACK以回应FIN请求(它的接收也作为文件结束符传递给上层应用程序)，并进入<code>CLOSE_WAIT</code>状态。对方主动关闭连接或者网络异常导致连接终止，这时我方的状态会变成<code>CLOSE_WAIT</code> 此时我方要调用<code>close()</code>来使得连接正确关闭</td>
<td></td>
<td>√</td>
</tr>
<tr>
<td><code>CLOSING</code></td>
<td>等待远端TCP对连接终止的确认（时间短，一般很少见）</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td><code>LAST_ACK</code></td>
<td>等待原来的发向远端TCP的连接终止请求的确认，被动关闭端一段时间后，接收到文件结束符的应用程序将调用<code>close()</code>关闭连接。这导致它的TCP也发送一个 FIN，等待对方的ACK，就进入了<code>LAST_ACK</code>状态</td>
<td></td>
<td>√</td>
</tr>
<tr>
<td><code>TIME_WAIT</code></td>
<td>等待足够的时间以确保远端TCP接收到连接终止请求的确认，在主动关闭端接收到FIN后，TCP就发送ACK包，并进入<code>TIME_WAIT</code>状态。我方主动调用<code>close()</code>断开连接，收到对方确认后状态变为<code>TIME_WAIT</code>。TCP协议规定<code>TIME_WAIT</code>状态会一直持续2MSL(即两倍的分段最大生存期)，以此来确保旧的连接状态不会对新连接产生影响。处于<code>TIME_WAIT</code>状态的连接占用的资源不会被内核释放，所以作为服务器，在可能的情况下，尽量不要主动断开连接，以减少<code>TIME_WAIT</code>状态造成的资源浪费</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td><code>CLOSED</code></td>
<td>连接关闭（这是为方便描述假想的状态，实际不存在）</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<h2 id="三次握手：建立连接"><a href="#三次握手：建立连接" class="headerlink" title="三次握手：建立连接"></a>三次握手：建立连接</h2><p>三次握手是TCP/IP网络中用来建立可靠连接的过程，包括以下三个关键步骤：</p>
<h3 id="第1次握手：SYN（同步序列号）"><a href="#第1次握手：SYN（同步序列号）" class="headerlink" title="第1次握手：SYN（同步序列号）"></a>第1次握手：SYN（同步序列号）</h3><p>客户端发送建立TCP连接的请求报文，其中报文中包含seq序列号，是由发送端随机生成的，并且将报文中的SYN字段置为1，表示需要建立TCP连接。</p>
<h3 id="第2次握手：SYN-ACK（同步序列号-确认）"><a href="#第2次握手：SYN-ACK（同步序列号-确认）" class="headerlink" title="第2次握手：SYN-ACK（同步序列号-确认）"></a>第2次握手：SYN-ACK（同步序列号-确认）</h3><p>服务器端回复客户端发送的TCP连接请求报文，其中包含seq序列号，是由回复端随机生成的，并且将SYN置为1，而且会产生ACK字段，ACK字段数值是在客户端发送过来的序列号seq的基础上加1进行回复，以便客户端收到信息时，知晓自己的TCP建立请求已得到验证。</p>
<h3 id="第3次握手：ACK（确认）"><a href="#第3次握手：ACK（确认）" class="headerlink" title="第3次握手：ACK（确认）"></a>第3次握手：ACK（确认）</h3><p>客户端收到服务器端发送的TCP建立验证请求后，会使自己的序列号加1表示，并且再次回复ACK验证请求，在服务器端发过来的seq上加1进行回复。</p>
<h2 id="四次挥手：终止连接"><a href="#四次挥手：终止连接" class="headerlink" title="四次挥手：终止连接"></a>四次挥手：终止连接</h2><p>终止TCP连接同样重要。四次挥手确保客户端和服务器优雅地关闭连接，确保数据不丢失。该过程包括以下四个步骤：</p>
<h3 id="第1次挥手：FIN（结束）"><a href="#第1次挥手：FIN（结束）" class="headerlink" title="第1次挥手：FIN（结束）"></a>第1次挥手：FIN（结束）</h3><p>客户端发送断开TCP连接请求的报文，其中报文中包含seq序列号，是由发送端随机生成的，并且还将报文中的FIN字段置为1，表示需要断开TCP连接。</p>
<h3 id="第2次挥手：ACK（确认）"><a href="#第2次挥手：ACK（确认）" class="headerlink" title="第2次挥手：ACK（确认）"></a>第2次挥手：ACK（确认）</h3><p>服务器端会回复客户端发送的TCP断开请求报文，其包含seq序列号，是由回复端随机生成的，而且会产生ACK字段，ACK字段数值是在客户端发过来的seq序列号基础上加1进行回复，以便客户端收到信息时，知晓自己的TCP断开请求已经得到验证。</p>
<h3 id="第3次挥手：FIN（结束）"><a href="#第3次挥手：FIN（结束）" class="headerlink" title="第3次挥手：FIN（结束）"></a>第3次挥手：FIN（结束）</h3><p>服务器端在回复完客户端的TCP断开请求后，不会马上进行TCP连接的断开，服务器端会先确保断开前，所有传输到A的数据是否已经传输完毕，一旦确认传输数据完毕，就会将回复报文的FIN字段置1，并且产生随机seq序列号。</p>
<h3 id="第4次挥手：ACK（确认）"><a href="#第4次挥手：ACK（确认）" class="headerlink" title="第4次挥手：ACK（确认）"></a>第4次挥手：ACK（确认）</h3><p>客户端收到服务器端的TCP断开请求后，会回复服务器端的断开请求，包含随机生成的seq字段和ACK字段，ACK字段会在服务器端的TCP断开请求的seq基础上加1，从而完成服务器端请求的验证回复。</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="为什么要三次握手？"><a href="#为什么要三次握手？" class="headerlink" title="为什么要三次握手？"></a>为什么要三次握手？</h3><p>三次握手的主要目的是为了确保双方的连接建立是可靠的，并且双方都具备发送和接收数据的能力。具体原因如下：</p>
<ol>
<li><strong>确保双方收到对方的初始序列号</strong>：客户端发送SYN包，服务器回复SYN-ACK包，客户端再回复ACK包，确保双方都接收到对方的序列号。</li>
<li><strong>防止重复的连接初始化</strong>：如果网络中存在旧的连接请求包，三次握手可以确保不会因为这些旧包而错误地建立连接。</li>
<li><strong>同步序列号</strong>：在建立连接时，双方需要同步各自的序列号，以确保后续数据传输的顺序和完整性。</li>
</ol>
<h3 id="为什么要四次挥手？"><a href="#为什么要四次挥手？" class="headerlink" title="为什么要四次挥手？"></a>为什么要四次挥手？</h3><p>四次挥手的主要目的是为了确保双方都已经完全准备好关闭连接，避免数据丢失或中断。具体原因如下：</p>
<ol>
<li><strong>双向关闭</strong>：TCP连接是全双工的，需要双方分别关闭发送和接收信道。四次挥手确保双方都确认了关闭操作。</li>
<li><strong>数据传输完毕</strong>：通过FIN和ACK的交换，确保所有数据都已传输和接收完毕，没有遗漏。</li>
<li><strong>避免资源浪费</strong>：确保双方的连接资源都已释放，防止因未完全关闭连接而造成资源浪费。</li>
</ol>
<h3 id="为什么TIME-WAIT要等待2MSL？"><a href="#为什么TIME-WAIT要等待2MSL？" class="headerlink" title="为什么TIME_WAIT要等待2MSL？"></a>为什么<code>TIME_WAIT</code>要等待2MSL？</h3><p>在挥手过程中，客户端在发送最后一个ACK包后会进入一个称为<code>TIME_WAIT</code>状态，持续2MSL（Maximum Segment Lifetime，最大报文段生存时间）。主要原因如下：</p>
<ol>
<li><strong>确保最后的ACK包被接收</strong>：如果服务器没有收到最后的ACK包，会重发FIN包。客户端处于<code>TIME_WAIT</code>状态可以确保它有足够的时间接收和处理重发的FIN包，再次发送ACK包。</li>
<li><strong>防止旧连接数据混淆</strong>：2MSL的等待时间确保了连接的旧数据包在网络中消失，避免新连接中出现旧连接的数据包混淆。</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>三次握手</tag>
        <tag>四次挥手</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈数据架构及实践</title>
    <url>/2023/12/03/%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在当今的数字化时代，企业级数据架构对于各行各业来说都是至关重要的。它不仅涉及数据的有效管理和利用，还直接影响到业务决策、操作效率和合规性。本文旨在探讨数据标准化、数据分布、数据生命周期管理、数据模型构建、数据安全和数据治理等关键方面，强调它们对于实现数据资产最大化的重要性，并提供具体的应用示例。<span id="more"></span></p>
<h2 id="一、数据标准化"><a href="#一、数据标准化" class="headerlink" title="一、数据标准化"></a>一、数据标准化</h2><p>数据标准化涉及将来自不同来源和格式的数据统一为一种格式，减少数据冗余和错误，提高数据可用性和可比性。这对于大型组织尤其重要，因为它们通常拥有来自多个部门和外部源的大量数据。</p>
<h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p>数据标准化是确保数据准确性和提高操作效率的关键，有助于降低由于数据不一致性引起的风险。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>不同系统的交易数据的统一处理，便于进行整体风险评估和合规监控。</p>
<h2 id="二、数据分布：主副数据源"><a href="#二、数据分布：主副数据源" class="headerlink" title="二、数据分布：主副数据源"></a>二、数据分布：主副数据源</h2><p>数据分布涉及如何在物理和虚拟环境中有效地存储和访问数据。主数据源通常用于提供高质量、可靠和准确的数据，而副数据源则用于数据分析处理、备份恢复等。</p>
<h3 id="意义-1"><a href="#意义-1" class="headerlink" title="意义"></a>意义</h3><p>有效的数据分布策略对于确保数据的可靠性、整体质量、业务连续性至关重要。</p>
<h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p>例如，资金核心系统（主数据源）处理交易数据，而大数据平台（副数据源）负责进行深入分析。</p>
<h2 id="三、数据生命周期管理"><a href="#三、数据生命周期管理" class="headerlink" title="三、数据生命周期管理"></a>三、数据生命周期管理</h2><p>数据生命周期管理包括数据的创建、存储、使用、共享、存档和销毁等各个阶段。每个阶段都需要特定的管理策略和工具。</p>
<h3 id="意义-2"><a href="#意义-2" class="headerlink" title="意义"></a>意义</h3><p>合理的数据生命周期管理对于保障数据质量、安全和合规至关重要。</p>
<h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><p>在金融市场中，一个交易所的交易数据从产生（交易时）开始，经过实时处理和存储（存储在高性能数据库中以供即时访问）。随后，这些数据用于日终的市场分析和风险评估，然后被转移到较长期的存储解决方案中以用于历史分析和合规报告。最终，在数据达到其预定的保留期限后，会根据法规要求和组织政策安全地销毁。这个过程确保了数据在整个生命周期中的有效利用和合规性，同时保护了敏感信息不被未授权访问或滥用。</p>
<h2 id="四、数据模型的构建与应用"><a href="#四、数据模型的构建与应用" class="headerlink" title="四、数据模型的构建与应用"></a>四、数据模型的构建与应用</h2><p>数据模型是对数据、其关系、语义和约束的一种组织和表示方式。它分为三个层次：概念模型、逻辑模型和物理模型。概念模型定义了数据的高层结构和关系，逻辑模型详细化数据结构，物理模型则关注数据的实际存储和访问方式。</p>
<h3 id="意义-3"><a href="#意义-3" class="headerlink" title="意义"></a>意义</h3><p>构建有效的数据模型对于准确理解数据的结构和含义至关重要，尤其在处理复杂的金融数据时。</p>
<h3 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h3><ul>
<li><strong>概念模型应用</strong>：在金融市场分析中，概念模型包括资产、负债、投资组合和市场风险等高层概念及其关系。</li>
<li><strong>逻辑模型应用</strong>：在开发信用评分系统时，逻辑模型定义了客户信用历史、信用评分和相关贷款产品的数据结构。</li>
<li><strong>物理模型应用</strong>：在构建高频交易平台时，物理模型涉及具体的数据库设计，如何有效地存储和快速访问大量的交易数据。</li>
</ul>
<h2 id="五、数据安全"><a href="#五、数据安全" class="headerlink" title="五、数据安全"></a>五、数据安全</h2><p>数据安全涉及保护数据免受未授权访问、泄露、篡改或销毁的措施和技术。包括物理安全措施、技术措施如数据加密和访问控制，以及管理措施如数据安全政策和员工培训。</p>
<h3 id="意义-4"><a href="#意义-4" class="headerlink" title="意义"></a>意义</h3><p>在数据泛滥的时代，数据安全是保护组织资产、维护客户信任和遵守合规要求的核心。</p>
<h3 id="举例-4"><a href="#举例-4" class="headerlink" title="举例"></a>举例</h3><p>实施多层防御策略保护在线交易数据，防止数据泄露和内部威胁。</p>
<h2 id="六、数据治理"><a href="#六、数据治理" class="headerlink" title="六、数据治理"></a>六、数据治理</h2><p>数据治理是一种确保数据在整个组织中得到恰当使用和维护的管理过程。包括制定数据相关的政策、程序和标准，以及确保这些政策得到执行。</p>
<h3 id="意义-5"><a href="#意义-5" class="headerlink" title="意义"></a>意义</h3><p>良好的数据治理有助于提高数据质量、增强数据透明度，并确保数据的合规性。</p>
<h3 id="举例-5"><a href="#举例-5" class="headerlink" title="举例"></a>举例</h3><p>遵守国际反洗钱法规，通过数据治理确保所有交易数据得到适当的监控和报告。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>无论在哪个行业，强大而有效的数据架构是企业成功的关键。通过实施这些策略，组织不仅能够提升数据管理效率，还能增强整体业务能力，确保在竞争激烈的市场中保持领先。</p>
]]></content>
      <categories>
        <category>Architecture</category>
        <category>Data Architecture</category>
      </categories>
      <tags>
        <tag>Data Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈网络架构分层设计</title>
    <url>/2023/12/18/%E6%B5%85%E8%B0%88%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E5%88%86%E5%B1%82%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在现代银行系统中，网络架构的设计至关重要，尤其是在处理大量数据和维护安全性方面。这种架构通常分为三层：接入层、汇聚层和核心层。接入层主要负责将终端用户设备连接到网络，并注重安全性和服务质量。汇聚层作为桥梁，处理更复杂的路由和交换决策，确保数据的高效流动。核心层则是网络的中心，处理高速数据传输和大量网络流量，对银行的关键业务数据和交易处理至关重要。每一层都采用特定的交换机和技术来满足其功能需求，确保整个网络的高效和安全运行。<span id="more"></span></p>
<p><img data-src="network-architecture.png"></p>
<h2 id="接入层（Access-Layer）"><a href="#接入层（Access-Layer）" class="headerlink" title="接入层（Access Layer）"></a>接入层（Access Layer）</h2><p>接入层是网络的最外层，主要负责将终端用户设备（如工作站、ATM机）连接到网络。这一层的关键特性包括：</p>
<ul>
<li>提供大量端口以支持众多用户设备。</li>
<li>实施安全策略，如802.1X认证、端口安全。</li>
<li>支持QoS，确保关键应用的带宽需求。</li>
<li>支持PoE（电力供应），简化布线需求。</li>
</ul>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>银行的接入层连接员工工作站和ATM机，通过高密度交换机和安全认证技术确保数据安全和服务质量。</p>
<h2 id="汇聚层（Distribution-Layer）"><a href="#汇聚层（Distribution-Layer）" class="headerlink" title="汇聚层（Distribution Layer）"></a>汇聚层（Distribution Layer）</h2><p>汇聚层作为连接接入层和核心层的桥梁，其功能包括：</p>
<ul>
<li>路由和交换决策。</li>
<li>实施网络策略，如访问控制和QoS。</li>
<li>提供网络的故障恢复和冗余功能。</li>
</ul>
<h3 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h3><p>汇聚层通过高性能路由器和交换机管理银行各部门间的数据流动，确保数据高效和安全传输。</p>
<h2 id="核心层（Core-Layer）"><a href="#核心层（Core-Layer）" class="headerlink" title="核心层（Core Layer）"></a>核心层（Core Layer）</h2><p>核心层是网络架构的中心，负责高速数据传输和处理大量网络流量。其主要特点包括：</p>
<ul>
<li>高速数据处理能力。</li>
<li>高度可靠性和稳定性。</li>
<li>支持大规模网络流量。</li>
</ul>
<h3 id="应用实例-2"><a href="#应用实例-2" class="headerlink" title="应用实例"></a>应用实例</h3><p>银行的核心层包括连接到主数据中心的高端路由器和交换机，处理所有关键业务数据和金融交易。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过精巧地设计这三层，银行可以确保网络的高效运行和安全性。这不仅支持日常运营，还能处理高峰时段的大量金融交易。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>Access Layer</tag>
        <tag>Distribution Layer</tag>
        <tag>Core Layer</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈设计模式·驾驭变化之道（创建型模式篇）</title>
    <url>/2023/02/18/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%C2%B7%E9%A9%BE%E9%A9%AD%E5%8F%98%E5%8C%96%E4%B9%8B%E9%81%93%EF%BC%88%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<h2 id="创建型模式概述"><a href="#创建型模式概述" class="headerlink" title="创建型模式概述"></a>创建型模式概述</h2><p>创建型模式是处理对象创建的设计模式，试图根据实际情况使用合适的方式创建对象，因为基本的对象创建方式可能会导致设计上的问题，或增加设计的复杂度。创建型模式的关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离。</p>
<p>创建型模式旨在将系统与它的对象创建、结合、表示的方式分离。这些设计模式在对象创建的类型、主体、方式、时间等方面提高了系统的灵活性。</p>
<p>创建型模式由两个主导思想构成：一是将系统使用的具体类封装起来，二是隐藏这些具体类的实例创建的方式。创建型模式又分为对象创建型模式和类创建型模式。对象创建型模式处理对象的创建，类创建型模式处理类的创建。详细地说，对象创建型模式把对象创建的一部分推迟到另一个对象中，而类创建型模式将它对象的创建推迟到子类中。</p>
<span id="more"></span>

<h2 id="工厂方法模式（Factory-Method-Pattern）"><a href="#工厂方法模式（Factory-Method-Pattern）" class="headerlink" title="工厂方法模式（Factory Method Pattern）"></a>工厂方法模式（Factory Method Pattern）</h2><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>工厂方法模式是一种实现了“工厂”概念的面向对象设计模式。就像其他创建型模式一样，它也是处理在不指定对象具体类型的情况下创建对象的问题。工厂方法模式的实质是“定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法让类的实例化推迟到子类中进行。”</p>
<p>创建一个对象常常需要复杂的过程，所以不适合包含在一个复合对象中。创建对象可能会导致大量的重复代码，可能会需要复合对象访问不到的信息，也可能提供不了足够级别的抽象，还可能并不是复合对象概念的一部分。工厂方法模式通过定义一个单独的创建对象的方法来解决这些问题。由子类实现这个方法来创建具体类型的对象。</p>
<p>对象创建中的有些过程包括决定创建哪个对象、管理对象的生命周期，以及管理特定对象的创建和销毁的概念。</p>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img data-src="Factory.Method.Pattern.png" alt="Factory Method Pattern"></p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight groovy"><figcaption><span>基于Groovy4的工厂方法模式演示</span><span class="exturl" data-url="aHR0cHM6Ly9nd2MtZXhwZXJpbWVudC5hcHBzcG90LmNvbQ==">Groovy Web Console<i class="fa fa-external-link-alt"></i></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汉堡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Hamburger</span> &#123;</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 肯德基汉堡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KfcHamburger</span> <span class="keyword">implements</span> <span class="title class_">Hamburger</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Kfc Hamburger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 麦当劳汉堡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">McDonaldHamburger</span> <span class="keyword">implements</span> <span class="title class_">Hamburger</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;McDonald Hamburger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快餐店</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SnackBar</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打包套餐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">def</span> packCombo() &#123;</span><br><span class="line">        Hamburger hamburger = createHamburger();</span><br><span class="line">        <span class="keyword">def</span> cola = <span class="keyword">new</span> Object() &#123;</span><br><span class="line">            String getName() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Cola&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> combo = []; <span class="comment">// 套餐</span></span><br><span class="line">        combo.add(hamburger); <span class="comment">// 添加汉堡</span></span><br><span class="line">        combo.add(cola); <span class="comment">// 添加可乐</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> combo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 制作汉堡 （“工厂”能力体现于该方法）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Hamburger createHamburger();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 肯德基快餐店</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Kfc</span> <span class="keyword">extends</span> <span class="title class_">SnackBar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Hamburger createHamburger() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KfcHamburger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 麦当劳快餐店</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">McDonald</span> <span class="keyword">extends</span> <span class="title class_">SnackBar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Hamburger createHamburger() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> McDonaldHamburger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 光顾快餐店</span></span><br><span class="line"><span class="keyword">def</span> visitSnackBar(String snackBarName) &#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="string">&#x27;Kfc&#x27;</span>, <span class="string">&#x27;McDonald&#x27;</span>].contains(snackBarName)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid Snack Bar: $&#123;snackBarName&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SnackBar snackBar = <span class="string">&#x27;Kfc&#x27;</span> == snackBarName </span><br><span class="line">                                    ? new Kfc() </span><br><span class="line">                                    : <span class="keyword">new</span> McDonald();</span><br><span class="line">    <span class="keyword">def</span> combo = snackBar.packCombo();</span><br><span class="line">    <span class="keyword">return</span> combo.stream().map(e -&gt; e.getName()).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 光顾肯德基</span></span><br><span class="line"><span class="keyword">def</span> comboItemNames = visitSnackBar(<span class="string">&#x27;Kfc&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span> [<span class="string">&#x27;Kfc Hamburger&#x27;</span>, <span class="string">&#x27;Cola&#x27;</span>] == comboItemNames;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 光顾麦当劳</span></span><br><span class="line">comboItemNames = visitSnackBar(<span class="string">&#x27;McDonald&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span> [<span class="string">&#x27;McDonald Hamburger&#x27;</span>, <span class="string">&#x27;Cola&#x27;</span>] == comboItemNames;</span><br></pre></td></tr></table></figure>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>创建对象需要大量重复的代码，可以把这些代码写在工厂基类中；</li>
<li>创建对象需要访问某些信息，而这些信息不应该包含在复合类中；</li>
<li>创建对象的生命周期必须集中管理，以保证在整个程序中具有一致的行为。 对象创建时会有很多参数来决定如何创建出这个对象；</li>
<li>创建对象可能是一个pool里的，不是每次都凭空创建一个新的。而pool的大小等参数可以用另外的逻辑去控制。比如连接池对象，线程池对象；</li>
<li>业务对象的代码作者希望隐藏对象的真实类型，而构造函数一定要真实的类名才能用；</li>
<li>简化一些常规的创建过程。根据配置去创建一个对象也很复杂；但可能95%的情况只创建某个特定类型的对象。这时可以弄个函数直接省略那些配置过程。如Java的线程池的相关创建api（如Executors.newFixedThreadPool等）；</li>
<li>创建一个对象有复杂的依赖关系，比如Foo对象的创建依赖A，A又依赖B，B又依赖C……。于是创建过程是一组对象的的创建和注入；</li>
<li>知道怎么创建一个对象，但是无法把控创建的时机。需要把“如何创建”的代码塞给“负责决定什么时候创建”的代码。后者在适当的时机，回调执行创建对象的函数。</li>
<li>构造函数里不要抛出异常。</li>
</ul>
<h3 id="隐喻助记"><a href="#隐喻助记" class="headerlink" title="隐喻助记"></a>隐喻助记</h3><p>麦当劳的麦辣鸡腿堡套餐和肯德基的香辣鸡腿堡套餐是两种不同的套餐，但无论去麦当劳或者肯德基，只需向服务员要一份辣味的鸡腿堡套餐，服务员便能准备好相应的套餐。麦当劳和肯德基就是生产鸡腿堡套餐的Factory。</p>
<h2 id="抽象工厂模式（Abstract-Factory-Pattern）"><a href="#抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="抽象工厂模式（Abstract Factory Pattern）"></a>抽象工厂模式（Abstract Factory Pattern）</h2><h3 id="模式定义-1"><a href="#模式定义-1" class="headerlink" title="模式定义"></a>模式定义</h3><p>抽象工厂模式是一种软件开发设计模式。抽象工厂模式提供了一种方式，可以将一组具有同一主题的单独的工厂封装起来。在正常使用中，客户端程序需要创建抽象工厂的具体实现，然后使用抽象工厂作为接口来创建这一主题的具体对象。客户端程序不需要知道（或关心）它从这些内部的工厂方法中获得对象的具体类型，因为客户端程序仅使用这些对象的通用接口。抽象工厂模式将一组对象的实现细节与他们的一般使用分离开来。</p>
<h3 id="模式结构-1"><a href="#模式结构-1" class="headerlink" title="模式结构"></a>模式结构</h3><p><img data-src="Abstract.Factory.Pattern.png" alt="Abstract Factory Pattern"></p>
<h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight groovy"><figcaption><span>基于Groovy4的抽象工厂模式演示</span><span class="exturl" data-url="aHR0cHM6Ly9nd2MtZXhwZXJpbWVudC5hcHBzcG90LmNvbQ==">Groovy Web Console<i class="fa fa-external-link-alt"></i></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车轮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Wheel</span> &#123;</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轿车车轮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarWheel</span> <span class="keyword">implements</span> <span class="title class_">Wheel</span> &#123;</span><br><span class="line">    String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car Wheel&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SUV车轮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuvWheel</span> <span class="keyword">implements</span> <span class="title class_">Wheel</span> &#123;</span><br><span class="line">    String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUV Wheel&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引擎</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轿车引擎</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarEngine</span> <span class="keyword">implements</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car Engine&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SUV引擎</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuvEngine</span> <span class="keyword">implements</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUV Engine&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 制作车轮</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Wheel createWheel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 制作引擎</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Engine createEngine();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 轿车车厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Wheel createWheel() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CarWheel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Engine createEngine() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CarEngine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SUV车厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuvFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Wheel createWheel() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SuvWheel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Engine createEngine() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SuvEngine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据名字创建车厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Factory createFactory(String factoryName) &#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="string">&#x27;Car&#x27;</span>, <span class="string">&#x27;Suv&#x27;</span>].contains(factoryName)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid Factory: $&#123;factoryName&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Factory factory = <span class="string">&#x27;Car&#x27;</span> == factoryName</span><br><span class="line">            ? new CarFactory()</span><br><span class="line">            : <span class="keyword">new</span> SuvFactory();</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 制造轿车</span></span><br><span class="line">Factory carFactory = createFactory(<span class="string">&#x27;Car&#x27;</span>);</span><br><span class="line">Wheel carWheel = carFactory.createWheel();</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;Car Wheel&#x27;</span> == carWheel.getName();</span><br><span class="line">Engine carEngine = carFactory.createEngine();</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;Car Engine&#x27;</span> == carEngine.getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 制造SUV</span></span><br><span class="line">Factory suvFactory = createFactory(<span class="string">&#x27;Suv&#x27;</span>);</span><br><span class="line">Wheel suvWheel = suvFactory.createWheel();</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;SUV Wheel&#x27;</span> == suvWheel.getName();</span><br><span class="line">Engine suvEngine = suvFactory.createEngine();</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;SUV Engine&#x27;</span> == suvEngine.getName();</span><br></pre></td></tr></table></figure>
<h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>一个系统要独立于它的产品的创建、组合和表示时；</li>
<li>一个系统要由多个产品系列中的一个来配置时；</li>
<li>需要强调一系列相关的产品对象的设计以便进行联合使用时；</li>
<li>提供一个产品类库，而只想显示它们的接口而不是实现时。</li>
</ul>
<h3 id="隐喻助记-1"><a href="#隐喻助记-1" class="headerlink" title="隐喻助记"></a>隐喻助记</h3><p>汽车工厂需要生产不同型号的汽车，例如轿车、SUV和卡车。每种汽车都有不同的特点和功能，例如轿车注重舒适性和燃油效率，SUV注重越野性能和空间。为了生产这些不同的汽车，汽车工厂需要使用抽象工厂模式。</p>
<p>在汽车工厂中，抽象工厂定义了一系列的接口，例如生产车轮、引擎的接口。每个具体的汽车类型都有自己的具体工厂，这些具体工厂实现了抽象工厂中定义的接口。例如，轿车工厂会实现轿车车轮和轿车引擎的接口；SUV工厂会实现SUV车轮和SUV引擎的接口。</p>
<p>通过使用抽象工厂模式，汽车工厂可以生产多种不同类型的汽车，而不需要关心每个具体汽车的细节实现。例如，生产轿车时，工厂只需要调用轿车工厂中的接口来获取轿车车轮和引擎，而不需要关心车轮和引擎是如何生产的。同样地，生产SUV时，工厂也只需要调用相应工厂的接口来获取所需部件。</p>
<h2 id="建造者模式（Builder-Pattern）"><a href="#建造者模式（Builder-Pattern）" class="headerlink" title="建造者模式（Builder Pattern）"></a>建造者模式（Builder Pattern）</h2><h3 id="模式定义-2"><a href="#模式定义-2" class="headerlink" title="模式定义"></a>模式定义</h3><p>建造者模式，又名生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p>
<h3 id="模式结构-2"><a href="#模式结构-2" class="headerlink" title="模式结构"></a>模式结构</h3><p><img data-src="Builder.Pattern.png" alt="Builder Pattern"></p>
<h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight groovy"><figcaption><span>基于Groovy4的建造者模式演示</span><span class="exturl" data-url="aHR0cHM6Ly9nd2MtZXhwZXJpbWVudC5hcHBzcG90LmNvbQ==">Groovy Web Console<i class="fa fa-external-link-alt"></i></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中控电脑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CPU核数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> coreNumber;</span><br><span class="line"></span><br><span class="line">    Computer(<span class="type">int</span> coreNumber) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.coreNumber = coreNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> getCoreNumber() &#123;</span><br><span class="line">        <span class="keyword">return</span> coreNumber</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引擎</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> volume;</span><br><span class="line"></span><br><span class="line">    Engine(<span class="type">int</span> volume) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.volume = volume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> getVolume() &#123;</span><br><span class="line">        <span class="keyword">return</span> volume</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    Computer getComputer();</span><br><span class="line">    Engine getEngine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line"></span><br><span class="line">    Car(Computer computer, Engine engine) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.computer = computer;</span><br><span class="line">        <span class="variable language_">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Computer getComputer() &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Engine getEngine() &#123;</span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Suv</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line"></span><br><span class="line">    Suv(Computer computer, Engine engine) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.computer = computer;</span><br><span class="line">        <span class="variable language_">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Computer getComputer() &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Engine getEngine() &#123;</span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车辆建造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置中控电脑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">void</span> setComputer(Computer computer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置引擎</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">void</span> setEngine(Engine engine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行建造过程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Vehicle build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> setComputer(Computer computer) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.computer = computer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> setEngine(Engine engine) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Car build() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(computer, engine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuvBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> setComputer(Computer computer) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.computer = computer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> setEngine(Engine engine) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Suv build() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Suv(computer, engine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来控制车辆的建造过程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将车辆建造器设置为高端车模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">void</span> constructHighEnd(Builder builder) &#123;</span><br><span class="line">        builder.setComputer(<span class="keyword">new</span> Computer(<span class="number">4</span>));</span><br><span class="line">        builder.setEngine(<span class="keyword">new</span> Engine(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将车辆建造器设置为低端车模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">void</span> constructLowEnd(Builder builder) &#123;</span><br><span class="line">        builder.setComputer(<span class="keyword">new</span> Computer(<span class="number">1</span>));</span><br><span class="line">        builder.setEngine(<span class="keyword">new</span> Engine(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Director director = <span class="keyword">new</span> Director();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造高端轿车</span></span><br><span class="line">Builder carBuilder = <span class="keyword">new</span> CarBuilder();</span><br><span class="line">director.constructHighEnd(carBuilder);</span><br><span class="line">Vehicle highEndCar = carBuilder.build();</span><br><span class="line"><span class="keyword">assert</span> highEndCar <span class="keyword">instanceof</span> Car;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">4</span> == highEndCar.computer.coreNumber;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">3</span> == highEndCar.engine.volume;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造低端轿车</span></span><br><span class="line">carBuilder = <span class="keyword">new</span> CarBuilder();</span><br><span class="line">director.constructLowEnd(carBuilder);</span><br><span class="line">Vehicle lowEndCar = carBuilder.build();</span><br><span class="line"><span class="keyword">assert</span> lowEndCar <span class="keyword">instanceof</span> Car;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == lowEndCar.computer.coreNumber;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">2</span> == lowEndCar.engine.volume;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造高端SUV</span></span><br><span class="line">Builder suvBuilder = <span class="keyword">new</span> SuvBuilder();</span><br><span class="line">director.constructHighEnd(suvBuilder);</span><br><span class="line">Vehicle highEndSuv = suvBuilder.build();</span><br><span class="line"><span class="keyword">assert</span> highEndSuv <span class="keyword">instanceof</span> Suv;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">4</span> == highEndSuv.computer.coreNumber;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">3</span> == highEndSuv.engine.volume;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造低端SUV</span></span><br><span class="line">suvBuilder = <span class="keyword">new</span> SuvBuilder();</span><br><span class="line">director.constructLowEnd(suvBuilder);</span><br><span class="line">Vehicle lowEndSuv = suvBuilder.build();</span><br><span class="line"><span class="keyword">assert</span> lowEndSuv <span class="keyword">instanceof</span> Suv;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == lowEndSuv.computer.coreNumber;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">2</span> == lowEndSuv.engine.volume;</span><br></pre></td></tr></table></figure>
<h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时；</li>
<li>当构造过程必须允许被构造的对象有不同的表示时。</li>
</ul>
<h3 id="隐喻助记-2"><a href="#隐喻助记-2" class="headerlink" title="隐喻助记"></a>隐喻助记</h3><p>在建造车辆时，我们可以将车辆的构建过程分解为几个步骤：①选择中控电脑；②选择发动机类型。另外，还可以设定所建造的车辆配置，比如高端或低端。这样便可灵活地构建不同类型的车辆。</p>
<h2 id="原型模式（Prototype-Pattern）"><a href="#原型模式（Prototype-Pattern）" class="headerlink" title="原型模式（Prototype Pattern）"></a>原型模式（Prototype Pattern）</h2><h3 id="模式定义-3"><a href="#模式定义-3" class="headerlink" title="模式定义"></a>模式定义</h3><p>原型模式是创建型模式的一种，其特点在于通过“复制”一个已经存在的实例来返回新的实例，而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。</p>
<p>原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p>
<h3 id="模式结构-3"><a href="#模式结构-3" class="headerlink" title="模式结构"></a>模式结构</h3><p><img data-src="Prototype.Pattern.png" alt="Prototype Pattern"></p>
<h3 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight groovy"><figcaption><span>基于Groovy4的原型模式演示</span><span class="exturl" data-url="aHR0cHM6Ly9nd2MtZXhwZXJpbWVudC5hcHBzcG90LmNvbQ==">Groovy Web Console<i class="fa fa-external-link-alt"></i></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钥匙</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Key</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    Key(<span class="type">int</span> size) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> getSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> setSize(<span class="type">int</span> size) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制钥匙</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Key clone() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Key) <span class="variable language_">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Failed to clone &quot;</span> + <span class="variable language_">this</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Key key = <span class="keyword">new</span> Key(<span class="number">10</span>);</span><br><span class="line">Key clonedKey = key.clone();</span><br><span class="line"><span class="keyword">assert</span> clonedKey.getSize() == key.getSize();</span><br></pre></td></tr></table></figure>
<h3 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>如果需要复制一些对象， 同时又希望代码独立于这些对象所属的具体类；</li>
<li>如果子类的区别仅在于其对象的初始化方式， 那么可以使用原型模式来减少子类的数量。</li>
</ul>
<h3 id="隐喻助记-3"><a href="#隐喻助记-3" class="headerlink" title="隐喻助记"></a>隐喻助记</h3><p>当需要制作一把新的钥匙时，可以将现有的钥匙放在一个复制机中，机器会扫描钥匙的形状和结构，并在新的钥匙上生成相同的形状和结构。这样，就可以得到一把与原始钥匙完全相同的新钥匙，而不必手动测量和复制。</p>
<p>在这个例子中，现有的钥匙就是原型，复制机就是应用原型模式的代码。通过复制现有的钥匙，我们可以避免手动复制的复杂性和错误，并快速创建一个与原始钥匙完全相同的新钥匙。同样地，通过原型模式，我们可以避免手动创建对象的复杂性和错误，并快速创建一个与原始对象完全相同的新对象。</p>
<h2 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h2><h3 id="模式定义-4"><a href="#模式定义-4" class="headerlink" title="模式定义"></a>模式定义</h3><p>单例模式，也叫单子模式，是一种常用的软件设计模式，属于创建型模式的一种。在应用这个模式时，单例对象的类必须保证只有一个实例存在，并提供全局访问点来访问这个实例。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。</p>
<h3 id="模式结构-4"><a href="#模式结构-4" class="headerlink" title="模式结构"></a>模式结构</h3><p><img data-src="Singleton.Pattern.png" alt="Singleton Pattern"></p>
<h3 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight groovy"><figcaption><span>基于Groovy4的单例模式演示</span><span class="exturl" data-url="aHR0cHM6Ly9nd2MtZXhwZXJpbWVudC5hcHBzcG90LmNvbQ==">Groovy Web Console<i class="fa fa-external-link-alt"></i></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EagerSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EagerSingleton INSTANCE = <span class="keyword">new</span> EagerSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EagerSingleton() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> EagerSingleton getInstance() &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LazySingleton SINGLETON_INSTANCE = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LazySingleton() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LazySingleton getInstance() &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.SINGLETON_INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EagerSingleton eagerSingleton = EagerSingleton.getInstance();</span><br><span class="line"><span class="keyword">assert</span> eagerSingleton === EagerSingleton.getInstance();</span><br><span class="line">LazySingleton lazySingleton = LazySingleton.getInstance();</span><br><span class="line"><span class="keyword">assert</span> lazySingleton === LazySingleton.getInstance();</span><br></pre></td></tr></table></figure>
<h3 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>程序中的某个类对于所有客户端只有一个可用的实例；</li>
<li>需要更加严格地控制全局变量。</li>
</ul>
<h3 id="隐喻助记-4"><a href="#隐喻助记-4" class="headerlink" title="隐喻助记"></a>隐喻助记</h3><p>假设有一个餐厅，这个餐厅只有一个厨师，为了确保只有一个厨师在餐厅工作，可以使用单例模式来实现。这样，无论餐厅中有多少个服务员、顾客，都只会有一个厨师在工作，而不会出现多个厨师在同时烹饪菜肴的情况。</p>
<p>在这个例子中，厨师就是单例类，只有一个实例存在于系统中。每当服务员需要将订单送到厨师那里时，他们可以直接访问单例实例来获取菜单并将订单传递给厨师。由于只有一个实例存在，服务员可以放心地传递订单，而不用担心订单会被多个厨师处理。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU29mdHdhcmVfZGVzaWduX3BhdHRlcm4=">Software Design Pattern from Wikipedia<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWZhY3RvcmluZy5ndXJ1L2Rlc2lnbi1wYXR0ZXJucw==">Software Design Pattern from Refactoring Guru<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
        <tag>Creational Pattern</tag>
        <tag>Factory Method Pattern</tag>
        <tag>Abstract Factory Pattern</tag>
        <tag>Builder Pattern</tag>
        <tag>Prototype Pattern</tag>
        <tag>Singleton Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈设计模式·驾驭变化之道（概览篇）</title>
    <url>/2023/02/12/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%C2%B7%E9%A9%BE%E9%A9%AD%E5%8F%98%E5%8C%96%E4%B9%8B%E9%81%93%EF%BC%88%E6%A6%82%E8%A7%88%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<h2 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h2><ul>
<li>设计模式（Design Pattern）是针对软件设计中普遍存在（反复出现）的各种问题所提出的解决方案；</li>
<li>该术语由Erich Gamma、Richard Helm、Ralph Johnson和John Vlissides等人在1990年代从建筑设计领域引入到计算机科学，而该4人被称为Gang of Four（简称GoF）。<span id="more"></span></li>
</ul>
<p><img data-src="GoF.png" alt="Gang of Four"></p>
<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>GoF提出的经典设计模式共有23种，这些设计模式可归类为：① 创建型模式；② 结构型模式；③ 行为型模式。具体如下图所示：</p>
<p><img data-src="design.patterns.svg" alt="23种经典设计模式及归类"></p>
<h2 id="设计模式作用"><a href="#设计模式作用" class="headerlink" title="设计模式作用"></a>设计模式作用</h2><ul>
<li>提高代码复用性</li>
<li>改善代码可维护性</li>
<li>提升代码可读性</li>
<li>保证代码可靠性</li>
<li>促进代码编写工程化</li>
</ul>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>在软件设计时，不论是宏观的架构设计，还是微观的代码设计，都围绕一个普遍的问题，即“分”与“合”、“动”与“静”的权衡。而23种经典设计模式也在不遗余力地处理该问题，并提供相应的设计指南。后续将连载以下3篇：</p>
<ul>
<li>《<a href="/2023/02/18/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%C2%B7%E9%A9%BE%E9%A9%AD%E5%8F%98%E5%8C%96%E4%B9%8B%E9%81%93%EF%BC%88%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E7%AF%87%EF%BC%89/" title="浅谈设计模式·驾驭变化之道（创建型模式篇）">浅谈设计模式·驾驭变化之道（创建型模式篇）</a>》</li>
<li>《浅谈设计模式·驾驭变化之道（结构型模式篇）》</li>
<li>《浅谈设计模式·驾驭变化之道（行为型模式篇）》</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU29mdHdhcmVfZGVzaWduX3BhdHRlcm4=">Software Design Pattern from Wikipedia<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
        <tag>Creational Pattern</tag>
        <tag>Structural Pattern</tag>
        <tag>Behavioral Pattern</tag>
        <tag>GoF</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈分布式事务</title>
    <url>/2022/12/27/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>分布式事务可以简单地分解为两部分：“分布式”与“事务”，即一种分布式系统中横跨多个服务的事务。相比传统的数据库本地事务，分布式事务受限于CAP定理，往往是一种“阉割”版的事务，因而难以满足传统事务4大特性ACID(<strong>A</strong>tomicity, <strong>C</strong>onsistency, <strong>I</strong>solation, <strong>D</strong>urability)的全部要求。 而处理分布式事务的处理方案多种多样，也各有利弊，下面将对常见几种方案进行逐一阐述。<span id="more"></span></p>
<p>在阐述处理方案前，先简单介绍一下CAP定理，这对理解各个方案会有一定帮助。</p>
<p>CAP是<strong>C</strong>onsistency（一致性）、<strong>A</strong>vailability（可用性）、<strong>P</strong>artition tolerance（分区容错性） 三个单词的首字母缩写。该定理的核心要义是：在分布式系统中，可用性、一致性、分区容错性三者只能取其二，如下图所示：<br><img data-src="CAP.png" alt="CAP定理"></p>
<h2 id="两阶段提交（2PC-Two-Phase-Commit）"><a href="#两阶段提交（2PC-Two-Phase-Commit）" class="headerlink" title="两阶段提交（2PC, Two-Phase Commit）"></a>两阶段提交（2PC, Two-Phase Commit）</h2><p>两阶段提交是指在网络以及数据库领域内，为了使基于分布式系统架构下的所有节点在进行事务提交时保持一致性而设计的一种演算法。通常，两阶段提交也被称为是一种协议。涉及两个阶段以及两种角色，如下表格所示：</p>
<table>
<thead>
<tr>
<th></th>
<th>协调者（Coordinator）</th>
<th>参与者（Participant）</th>
</tr>
</thead>
<tbody><tr>
<td>1. 准备阶段<br/>（也叫投票阶段）</td>
<td>向所有参与者节点询问是否可以执行提交操作，并开始等待各参与者节点的响应</td>
<td>执行询问发起为止的所有事务操作，将Undo信息和Redo信息写入日志，并响应协调者节点发起的询问，反馈“完成”或“终止”</td>
</tr>
<tr>
<td>2.0. 提交阶段</td>
<td>判断参与者节点是否均反馈“完成”。若均“完成”，则表示成功，进而执行提交，否则回滚</td>
<td></td>
</tr>
<tr>
<td>2.1. 提交阶段[成功]</td>
<td>向所有参与者节点发出”正式提交”的请求。当收到所有参与者节点反馈的”完成”消息后，完成事务</td>
<td>正式完成操作，释放在整个事务期间内占用的资源，并向协调者节点发送”完成”消息</td>
</tr>
<tr>
<td>2.2. 提交阶段[失败]</td>
<td>向所有参与者节点发出”回滚操作”的请求。当收到所有参与者节点反馈的”回滚完成”消息后，取消事务</td>
<td>利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源，并向协调者节点发送”回滚完成”消息</td>
</tr>
</tbody></table>
<h3 id="XA分布式事务协议"><a href="#XA分布式事务协议" class="headerlink" title="XA分布式事务协议"></a>XA分布式事务协议</h3><p>XA协议是由X/Open组织提出的分布式事务处理规范，实现了两阶段提交，被众多数据库厂商所支持。</p>
<p>XA协议定义了以下3种角色：</p>
<ul>
<li>应用程序（Application Program，简称AP）：定义事务边界(即事务的开始和结束)，并且在事务边界内对资源进行操作；</li>
<li>事务管理器（Transaction Manager，简称TM）：负责分配事务唯一标识并监控事务的执行进度、事务的提交或回滚，扮演协调者角色；</li>
<li>资源管理器（Resource Manager，简称RM）：提供事务分支的注册、资源的访问以及事务分支的提交等，扮演参与者角色。</li>
</ul>
<p>上述角色在这两个阶段的交互关系如下图所示，其中步骤2~5属于第一阶段，而步骤6/7属于第二阶段。</p>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" data-diagram-type="SEQUENCE" height="411px" preserveAspectRatio="none" style="width:349px;height:411px;background:#FFFFFF;" version="1.1" viewBox="0 0 349 411" width="349px" zoomAndPan="magnify"><defs/><g><rect fill="#FFFFFF" height="290.7344" style="stroke:#181818;stroke-width:1;" width="10" x="134.5455" y="67.4297"/><rect fill="#FFFFFF" height="14" style="stroke:#181818;stroke-width:1;" width="10" x="310.0813" y="96.5625"/><rect fill="#FFFFFF" height="14" style="stroke:#181818;stroke-width:1;" width="10" x="310.0813" y="139.6953"/><rect fill="#FFFFFF" height="14" style="stroke:#181818;stroke-width:1;" width="10" x="310.0813" y="182.8281"/><rect fill="#FFFFFF" height="14" style="stroke:#181818;stroke-width:1;" width="10" x="310.0813" y="225.9609"/><rect fill="none" height="90.2031" style="stroke:#000000;stroke-width:1.5;" width="230.7545" x="112.2301" y="254.9609"/><line style="stroke:#181818;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="21" x2="21" y1="36.2969" y2="376.1641"/><line style="stroke:#181818;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="139.2301" x2="139.2301" y1="36.2969" y2="376.1641"/><line style="stroke:#181818;stroke-width:0.5;stroke-dasharray:5.0,5.0;" x1="314.178" x2="314.178" y1="36.2969" y2="376.1641"/><rect fill="#E2E2F0" height="30.2969" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="32.0195" x="5" y="5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="18.0195" x="12" y="24.9951">AP</text><rect fill="#E2E2F0" height="30.2969" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="32.0195" x="5" y="375.1641"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="18.0195" x="12" y="395.1592">AP</text><rect fill="#E2E2F0" height="30.2969" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="34.6309" x="122.2301" y="5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="20.6309" x="129.2301" y="24.9951">TM</text><rect fill="#E2E2F0" height="30.2969" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="34.6309" x="122.2301" y="375.1641"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="20.6309" x="129.2301" y="395.1592">TM</text><rect fill="#E2E2F0" height="30.2969" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="35.8066" x="297.178" y="5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="21.8066" x="304.178" y="24.9951">RM</text><rect fill="#E2E2F0" height="30.2969" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="35.8066" x="297.178" y="375.1641"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="21.8066" x="304.178" y="395.1592">RM</text><rect fill="#FFFFFF" height="290.7344" style="stroke:#181818;stroke-width:1;" width="10" x="134.5455" y="67.4297"/><rect fill="#FFFFFF" height="14" style="stroke:#181818;stroke-width:1;" width="10" x="310.0813" y="96.5625"/><rect fill="#FFFFFF" height="14" style="stroke:#181818;stroke-width:1;" width="10" x="310.0813" y="139.6953"/><rect fill="#FFFFFF" height="14" style="stroke:#181818;stroke-width:1;" width="10" x="310.0813" y="182.8281"/><rect fill="#FFFFFF" height="14" style="stroke:#181818;stroke-width:1;" width="10" x="310.0813" y="225.9609"/><polygon fill="#181818" points="122.5455,63.4297,132.5455,67.4297,122.5455,71.4297,126.5455,67.4297" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="21.0098" x2="128.5455" y1="67.4297" y2="67.4297"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="94.5357" x="28.0098" y="62.3638">1. &#21457;&#36215;&#20840;&#23616;&#20107;&#21153;</text><polygon fill="#181818" points="298.0813,92.5625,308.0813,96.5625,298.0813,100.5625,302.0813,96.5625" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="144.5455" x2="304.0813" y1="96.5625" y2="96.5625"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="94.5357" x="151.5455" y="91.4966">2. &#24320;&#21551;&#20107;&#21153;&#20998;&#25903;</text><polygon fill="#181818" points="155.5455,106.5625,145.5455,110.5625,155.5455,114.5625,151.5455,110.5625" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2.0,2.0;" x1="149.5455" x2="314.0813" y1="110.5625" y2="110.5625"/><polygon fill="#181818" points="298.0813,135.6953,308.0813,139.6953,298.0813,143.6953,302.0813,139.6953" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="21.0098" x2="304.0813" y1="139.6953" y2="139.6953"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="68.5357" x="28.0098" y="134.6294">3. &#25191;&#34892;&#25805;&#20316;</text><polygon fill="#181818" points="32.0098,149.6953,22.0098,153.6953,32.0098,157.6953,28.0098,153.6953" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2.0,2.0;" x1="26.0098" x2="314.0813" y1="153.6953" y2="153.6953"/><polygon fill="#181818" points="298.0813,178.8281,308.0813,182.8281,298.0813,186.8281,302.0813,182.8281" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="144.5455" x2="304.0813" y1="182.8281" y2="182.8281"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="94.5357" x="151.5455" y="177.7622">4. &#32467;&#26463;&#20107;&#21153;&#20998;&#25903;</text><polygon fill="#181818" points="155.5455,192.8281,145.5455,196.8281,155.5455,200.8281,151.5455,196.8281" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2.0,2.0;" x1="149.5455" x2="314.0813" y1="196.8281" y2="196.8281"/><polygon fill="#181818" points="298.0813,221.9609,308.0813,225.9609,298.0813,229.9609,302.0813,225.9609" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="144.5455" x2="304.0813" y1="225.9609" y2="225.9609"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="146.5358" x="151.5455" y="220.895">5. &#35810;&#38382;&#65306;&#25552;&#20132;&#26159;&#21542;&#24050;&#23601;&#32490;</text><polygon fill="#181818" points="155.5455,235.9609,145.5455,239.9609,155.5455,243.9609,151.5455,239.9609" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2.0,2.0;" x1="149.5455" x2="314.0813" y1="239.9609" y2="239.9609"/><path d="M112.2301,254.9609 L176.6729,254.9609 L176.6729,262.0938 L166.6729,272.0938 L112.2301,272.0938 L112.2301,254.9609 " fill="#EEEEEE" style="stroke:#000000;stroke-width:1.5;"/><rect fill="none" height="90.2031" style="stroke:#000000;stroke-width:1.5;" width="230.7545" x="112.2301" y="254.9609"/><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="19.4429" x="127.2301" y="268.0278">alt</text><text fill="#000000" font-family="sans-serif" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="65.0543" x="191.6729" y="267.1714">[&#25552;&#20132;&#24050;&#23601;&#32490;]</text><polygon fill="#181818" points="303.0813,289.2266,313.0813,293.2266,303.0813,297.2266,307.0813,293.2266" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="144.5455" x2="309.0813" y1="293.2266" y2="293.2266"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="68.5357" x="151.5455" y="288.1606">6. &#25191;&#34892;&#25552;&#20132;</text><line style="stroke:#000000;stroke-width:1;stroke-dasharray:2.0,2.0;" x1="112.2301" x2="342.9846" y1="302.2266" y2="302.2266"/><text fill="#000000" font-family="sans-serif" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="65.0543" x="117.2301" y="312.437">[&#25552;&#20132;&#26410;&#23601;&#32490;]</text><polygon fill="#181818" points="303.0813,333.1641,313.0813,337.1641,303.0813,341.1641,307.0813,337.1641" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="144.5455" x2="309.0813" y1="337.1641" y2="337.1641"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="68.5357" x="151.5455" y="332.0981">7. &#25191;&#34892;&#22238;&#28378;</text><polygon fill="#181818" points="32.0098,354.1641,22.0098,358.1641,32.0098,362.1641,28.0098,358.1641" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;stroke-dasharray:2.0,2.0;" x1="26.0098" x2="138.5455" y1="358.1641" y2="358.1641"/><!--SRC=[SmnGqBLJ2F6rKZ3KKtZQF_75rkrFMrSytTZmP5Vtqww5N8d99PbbYIMfG2LSN26-8CL1GCL6GCLx6fvEM0zHzhIZxTcKzGZ5GRuWjJQwkY1MIYgoE9TZ0CmGOps5PvtBNopiUJQvzydUEIZQWQgmQqUumKHFuVdkoS_cpYVT3GX3JFKKNgnVz7BwklTxPZthd_1arv9dCzO_dR3iwVPDJpTiVBvx5N469kQKA42q8pGg00728ZEuPy7Ak59pYbEXMfxDMOLLYpbCozFPyvxjdiMLcfV21GkO41GdXFW20000]--></g></svg>

<h3 id="XA分布式事务演示"><a href="#XA分布式事务演示" class="headerlink" title="XA分布式事务演示"></a>XA分布式事务演示</h3><figure class="highlight groovy"><figcaption><span>基于H2以及Groovy4的XA演示</span><span class="exturl" data-url="aHR0cHM6Ly9nd2MtZXhwZXJpbWVudC5hcHBzcG90LmNvbQ==">Groovy Web Console<i class="fa fa-external-link-alt"></i></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Grapes</span>(</span><br><span class="line">    <span class="meta">@Grab</span>(group=<span class="string">&#x27;com.h2database&#x27;</span>, module=<span class="string">&#x27;h2&#x27;</span>, version=<span class="string">&#x27;2.1.214&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext</span><br><span class="line"><span class="keyword">import</span> javax.sql.XAConnection</span><br><span class="line"><span class="keyword">import</span> javax.sql.XADataSource</span><br><span class="line"><span class="keyword">import</span> javax.transaction.xa.XAException</span><br><span class="line"><span class="keyword">import</span> javax.transaction.xa.XAResource</span><br><span class="line"><span class="keyword">import</span> javax.transaction.xa.Xid</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement</span><br><span class="line"><span class="keyword">import</span> org.h2.jdbcx.JdbcDataSource</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建资源管理器实例 rm1</span></span><br><span class="line">XADataSource xaDS1 = <span class="keyword">new</span> JdbcDataSource(<span class="attr">url:</span> <span class="string">&#x27;jdbc:h2:mem:db1&#x27;</span>, <span class="attr">user:</span> <span class="string">&#x27;sunlan&#x27;</span>, <span class="attr">password:</span> <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">XAConnection xaConn1 = xaDS1.getXAConnection()</span><br><span class="line">Connection conn1 = xaConn1.getConnection()</span><br><span class="line">XAResource rm1 = xaConn1.getXAResource()</span><br><span class="line"><span class="keyword">try</span> (Statement ddlStmt1 = conn1.createStatement()) &#123;</span><br><span class="line">    ddlStmt1.execute(<span class="string">&quot;CREATE TABLE IF NOT EXISTS MSG(CONT VARCHAR(64))&quot;</span>)</span><br><span class="line">    ddlStmt1.execute(<span class="string">&quot;TRUNCATE TABLE MSG&quot;</span>) <span class="comment">// 确保空表以便后续验证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建资源管理器实例 rm2</span></span><br><span class="line">XADataSource xaDS2 = <span class="keyword">new</span> JdbcDataSource(<span class="attr">url:</span> <span class="string">&#x27;jdbc:h2:mem:db2&#x27;</span>, <span class="attr">user:</span> <span class="string">&#x27;daniel&#x27;</span>, <span class="attr">password:</span> <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">XAConnection xaConn2 = xaDS2.getXAConnection()</span><br><span class="line">Connection conn2 = xaConn2.getConnection()</span><br><span class="line">XAResource rm2 = xaConn2.getXAResource()</span><br><span class="line"><span class="keyword">try</span> (Statement ddlStmt2 = conn2.createStatement()) &#123;</span><br><span class="line">    ddlStmt2.execute(<span class="string">&quot;CREATE TABLE IF NOT EXISTS MSG(CONT VARCHAR(64))&quot;</span>)</span><br><span class="line">    ddlStmt2.execute(<span class="string">&quot;TRUNCATE TABLE MSG&quot;</span>) <span class="comment">// 确保空表以便后续验证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] genId() &#123;</span><br><span class="line">    <span class="keyword">return</span> UUID.randomUUID().toString().getBytes(<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">record SimpleXid(<span class="type">byte</span>[] globalTransactionId, <span class="type">byte</span>[] branchQualifier, <span class="type">int</span> formatId) <span class="keyword">implements</span> <span class="title class_">Xid</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">byte</span>[] getGlobalTransactionId() &#123;</span><br><span class="line">        <span class="keyword">return</span> globalTransactionId</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">byte</span>[] getBranchQualifier() &#123;</span><br><span class="line">        <span class="keyword">return</span> branchQualifier</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">int</span> getFormatId() &#123;</span><br><span class="line">        <span class="keyword">return</span> formatId</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AP向TM请求发起分布式事务，TM生成全局事务id</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">byte</span>[] gtrid = genId()</span><br><span class="line"><span class="comment">// ----------------------------- 开始：第一阶段（即准备阶段）-------------------------------</span></span><br><span class="line"><span class="type">int</span> formatId = <span class="number">1</span></span><br><span class="line"><span class="comment">// TM生成rm1上的事务分支id</span></span><br><span class="line">Xid xid1 = <span class="keyword">new</span> SimpleXid(gtrid, genId(), formatId)</span><br><span class="line"><span class="comment">// 执行rm1上的事务分支</span></span><br><span class="line">rm1.start(xid1, XAResource.TMNOFLAGS)</span><br><span class="line"><span class="keyword">try</span> (Statement stmt1 = conn1.createStatement()) &#123;</span><br><span class="line">    stmt1.execute(<span class="string">&quot;INSERT INTO MSG(CONT) VALUES (&#x27;hello&#x27;)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">rm1.end(xid1, XAResource.TMSUCCESS)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TM生成rm2上的事务分支id</span></span><br><span class="line">Xid xid2 = <span class="keyword">new</span> SimpleXid(gtrid, genId(), formatId)</span><br><span class="line"><span class="comment">// 执行rm2上的事务分支</span></span><br><span class="line">rm2.start(xid2, XAResource.TMNOFLAGS)</span><br><span class="line"><span class="keyword">try</span> (Statement stmt2 = conn2.createStatement()) &#123;</span><br><span class="line">    stmt2.execute(<span class="string">&quot;INSERT INTO MSG(CONT) VALUES (&#x27;hi&#x27;)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">rm2.end(xid2, XAResource.TMSUCCESS)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 如果RM尚未准备好并希望执行回滚，则`prepare`方法将抛出`XAException`</span></span><br><span class="line">    <span class="comment">// `prepare`方法可能的返回值有：`XAResource.XA_RDONLY`或`XAResource.XA_OK`</span></span><br><span class="line">    <span class="type">int</span> rc1 = rm1.prepare(xid1)</span><br><span class="line">    <span class="type">int</span> rc2 = rm2.prepare(xid2)</span><br><span class="line"><span class="comment">// ----------------------------- 结束：第一阶段 -------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------- 开始：第二阶段（即提交阶段）-------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (XAResource.XA_OK == rc1 &amp;&amp; XAResource.XA_OK == rc2) &#123;</span><br><span class="line">        <span class="comment">// 所有事务分支都prepare成功，则提交所有事务分支</span></span><br><span class="line">        rm1.commit(xid1, <span class="literal">false</span>)</span><br><span class="line">        rm2.commit(xid2, <span class="literal">false</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (XAResource.XA_RDONLY == rc1 &amp;&amp; XAResource.XA_OK == rc2) &#123;</span><br><span class="line">        <span class="comment">// 第1个事务分支是只读且已提交，则只提交第2个事务分支</span></span><br><span class="line">        rm2.commit(xid2, <span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (XAResource.XA_OK == rc1 &amp;&amp; XAResource.XA_RDONLY == rc2) &#123;</span><br><span class="line">        <span class="comment">// 第2个事务分支是只读且已提交，则只提交第1个事务分支</span></span><br><span class="line">        rm1.commit(xid1, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (XAException xae) &#123;</span><br><span class="line">    println <span class="string">&quot;分布式事务prepare或commit失败（[$&#123;xae.errorCode&#125;] $&#123;xae.getMessage()&#125;），执行回滚&quot;</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rm1.rollback(xid1)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (XAException xae1) &#123;</span><br><span class="line">        println <span class="string">&quot;事务分支1回滚失败（[$&#123;xae1.errorCode&#125;] $&#123;xae1.getMessage()&#125;）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rm2.rollback(xid2)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (XAException xae2) &#123;</span><br><span class="line">        println <span class="string">&quot;事务分支2回滚失败（[$&#123;xae2.errorCode&#125;] $&#123;xae2.getMessage()&#125;）&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----------------------------- 结束：第二阶段 -------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证db1上的执行结果</span></span><br><span class="line"><span class="keyword">try</span>(conn1; <span class="keyword">def</span> stmt1 = conn1.createStatement();</span><br><span class="line">    <span class="keyword">def</span> rs = stmt1.executeQuery(<span class="string">&#x27;SELECT CONT FROM MSG&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">def</span> resultList = []</span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">        resultList &lt;&lt; rs.getString(<span class="string">&#x27;CONT&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">assert</span> [<span class="string">&#x27;hello&#x27;</span>] == resultList</span><br><span class="line">&#125;</span><br><span class="line">xaConn1.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证db2上的执行结果</span></span><br><span class="line"><span class="keyword">try</span>(conn2; <span class="keyword">def</span> stmt2 = conn2.createStatement();</span><br><span class="line">    <span class="keyword">def</span> rs = stmt2.executeQuery(<span class="string">&#x27;SELECT CONT FROM MSG&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">def</span> resultList = []</span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">        resultList &lt;&lt; rs.getString(<span class="string">&#x27;CONT&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">assert</span> [<span class="string">&#x27;hi&#x27;</span>] == resultList</span><br><span class="line">&#125;</span><br><span class="line">xaConn2.close()</span><br><span class="line"></span><br><span class="line">println <span class="string">&#x27;Done.&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" data-diagram-type="MINDMAP" height="303px" preserveAspectRatio="none" style="width:461px;height:303px;background:#FFFFFF;" version="1.1" viewBox="0 0 461 303" width="461px" zoomAndPan="magnify"><defs/><g><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="89.9997" x="10" y="132.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69.9997" x="20" y="155.5889">&#20004;&#38454;&#27573;&#25552;&#20132;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="47.9999" x="149.9997" y="48.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27.9999" x="159.9997" y="71.1436">&#20248;&#28857;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="159.9994" x="247.9996" y="20"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139.9994" x="257.9996" y="42.9951">&#23613;&#37327;&#20445;&#35777;&#25968;&#25454;&#24378;&#19968;&#33268;&#24615;</text><path d="M197.9996,66.2969 L207.9996,66.2969 C222.9996,66.2969 222.9996,38.1484 237.9996,38.1484 L247.9996,38.1484 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="103.9996" x="247.9996" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83.9996" x="257.9996" y="99.292">&#23454;&#29616;&#25104;&#26412;&#36739;&#20302;</text><path d="M197.9996,66.2969 L207.9996,66.2969 C222.9996,66.2969 222.9996,94.4453 237.9996,94.4453 L247.9996,94.4453 " fill="none" style="stroke:#181818;stroke-width:1;"/><path d="M99.9997,150.7422 L109.9997,150.7422 C124.9997,150.7422 124.9997,66.2969 139.9997,66.2969 L149.9997,66.2969 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="47.9999" x="149.9997" y="188.8906"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27.9999" x="159.9997" y="211.8857">&#32570;&#28857;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="75.9998" x="247.9996" y="132.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55.9998" x="257.9996" y="155.5889">&#21516;&#27493;&#38459;&#22622;</text><path d="M197.9996,207.0391 L207.9996,207.0391 C222.9996,207.0391 222.9996,150.7422 237.9996,150.7422 L247.9996,150.7422 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="201.9992" x="247.9996" y="188.8906"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181.9992" x="257.9996" y="211.8857">&#21333;&#28857;&#25925;&#38556;&#65288;&#21327;&#35843;&#32773;&#21457;&#29983;&#25925;&#38556;&#65289;</text><path d="M197.9996,207.0391 L207.9996,207.0391 C222.9996,207.0391 222.9996,207.0391 237.9996,207.0391 L247.9996,207.0391 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="159.9994" x="247.9996" y="245.1875"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139.9994" x="257.9996" y="268.1826">&#23384;&#22312;&#25968;&#25454;&#19981;&#19968;&#33268;&#30340;&#21487;&#33021;</text><path d="M197.9996,207.0391 L207.9996,207.0391 C222.9996,207.0391 222.9996,263.3359 237.9996,263.3359 L247.9996,263.3359 " fill="none" style="stroke:#181818;stroke-width:1;"/><path d="M99.9997,150.7422 L109.9997,150.7422 C124.9997,150.7422 124.9997,207.0391 139.9997,207.0391 L149.9997,207.0391 " fill="none" style="stroke:#181818;stroke-width:1;"/><!--SRC=[HKzDIm916BxFhvXZ8ag9I7cIiW9JaaplequovCxAEcjqiqmqIDSWGSICmAX3VXmgpBJ-pExiUkelDB9PjvVdytq2UOOK9X6Qbb0EEA4-xirRRtpmohM6Fka1fu2cBVFyNLnEQ8ncyugcVzrQmpFU7F7Qm9XEz77HghpmugCj6NJD-eXN6xppR7sMz5bzaM5E9tyPZIlUVvYtFepxhWtKceBZpVAytVcULesQPerALh5iQDVcpTqIlxIr_PRHURAhzN7DhZRR5uOsj4ep4C1Yn-yM4CqYokAHC2nW9Kza2jVSdbMFrxsHn0pvLkBqcCed5APaAKUo638YOGTOsOs6OLvMbHI6QP9d2acgJ9WT88GA21weTA7pm_qSfg7WtXA0sxH059bAc38GIaJ-1JwlQvCm6CEAU0Cc8Y28Zv2QPSAHajE4PlmmVhZZMWTXH3CgoeXiJC6MB7ALKy75VW00]--></g></svg>

<h2 id="三阶段提交（3PC-Three-Phase-Commit）"><a href="#三阶段提交（3PC-Three-Phase-Commit）" class="headerlink" title="三阶段提交（3PC, Three-Phase Commit）"></a>三阶段提交（3PC, Three-Phase Commit）</h2><p>三阶段提交，是在网络及数据库的范畴下，令一个分布式系统内的所有节点能够执行事务的提交的一种分布式算法，主要是为了解决两阶段提交协议的缺点。与两阶段提交不同的是，三阶段提交是一种“非阻塞”的协议。三阶段提交在两阶段提交的第一阶段与第二阶段之间插入了一个PreCommit阶段，令原先在两阶段提交中，参与者在投票之后，由于协调者发生崩溃或错误，而导致参与者处于无法知晓是否提交或者中止的“不确定状态”所产生的可能相当长的延时问题得以解决。但鱼与熊掌不可兼得，三阶段提交需要更多的通讯次数，延迟较高，实现也较为复杂，而且在网络分区的情况下依然会出现数据不一致问题，因此三阶段提交的实际应用相对比较少。</p>
<h3 id="与两阶段提交的差异"><a href="#与两阶段提交的差异" class="headerlink" title="与两阶段提交的差异"></a>与两阶段提交的差异</h3><table>
<thead>
<tr>
<th></th>
<th>两阶段提交</th>
<th>三阶段提交</th>
</tr>
</thead>
<tbody><tr>
<td><strong>阶段划分</strong></td>
<td>㊀ 准备阶段<br/>㊁ 提交阶段</td>
<td>① CanCommit<sup>对应2PC.㊀准备阶段</sup><br/>② PreCommit<sup>对应2PC.㊀准备阶段</sup><em>（新增的阶段，推迟提交以确定所有参与者均知道提交的这一决定）</em><br/>③ DoCommit<sup>对应2PC.㊁提交阶段</sup><em>（若参与者接收来自协调者的消息超时，则默认执行提交）</em></td>
</tr>
<tr>
<td><strong>超时机制</strong></td>
<td>只有协调者具有超时机制，而参与者则不具有超时机制</td>
<td>协调者和参与者都具有超时机制</td>
</tr>
<tr>
<td><strong>同步阻塞</strong></td>
<td>若参与者未及时收到协调者的消息，则一直持有事务资源并处于阻塞状态</td>
<td>若参与者未及时收到协调者的消息，一旦超时，则默认执行提交。虽然不阻塞，但可能会引发数据一致性问题</td>
</tr>
<tr>
<td><strong>单点故障</strong></td>
<td>协调者存在单点故障的可能，且会导致参与者长时间的同步阻塞</td>
<td>协调者存在单点故障的可能，但参与者的超时机制可以减少因该单点故障而导致的同步阻塞</td>
</tr>
</tbody></table>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" data-diagram-type="MINDMAP" height="303px" preserveAspectRatio="none" style="width:433px;height:303px;background:#FFFFFF;" version="1.1" viewBox="0 0 433 303" width="433px" zoomAndPan="magnify"><defs/><g><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="89.9997" x="10" y="132.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69.9997" x="20" y="155.5889">&#19977;&#38454;&#27573;&#25552;&#20132;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="47.9999" x="149.9997" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27.9999" x="159.9997" y="99.292">&#20248;&#28857;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="173.9993" x="247.9996" y="20"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153.9993" x="257.9996" y="42.9951">&#23613;&#37327;&#28040;&#38500;&#21333;&#28857;&#25925;&#38556;&#30340;&#24433;&#21709;</text><path d="M197.9996,94.4453 L207.9996,94.4453 C222.9996,94.4453 222.9996,38.1484 237.9996,38.1484 L247.9996,38.1484 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="173.9993" x="247.9996" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153.9993" x="257.9996" y="99.292">&#36229;&#26102;&#26426;&#21046;&#20943;&#23569;&#20102;&#21516;&#27493;&#38459;&#22622;</text><path d="M197.9996,94.4453 L207.9996,94.4453 C222.9996,94.4453 222.9996,94.4453 237.9996,94.4453 L247.9996,94.4453 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="159.9994" x="247.9996" y="132.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139.9994" x="257.9996" y="155.5889">&#23613;&#37327;&#20445;&#35777;&#25968;&#25454;&#24378;&#19968;&#33268;&#24615;</text><path d="M197.9996,94.4453 L207.9996,94.4453 C222.9996,94.4453 222.9996,150.7422 237.9996,150.7422 L247.9996,150.7422 " fill="none" style="stroke:#181818;stroke-width:1;"/><path d="M99.9997,150.7422 L109.9997,150.7422 C124.9997,150.7422 124.9997,94.4453 139.9997,94.4453 L149.9997,94.4453 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="47.9999" x="149.9997" y="217.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27.9999" x="159.9997" y="240.0342">&#32570;&#28857;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="159.1245" x="247.9996" y="188.8906"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139.1245" x="257.9996" y="211.8857">&#30456;&#23545;&#20110;2PC&#65292;&#24615;&#33021;&#26356;&#20302;</text><path d="M197.9996,235.1875 L207.9996,235.1875 C222.9996,235.1875 222.9996,207.0391 237.9996,207.0391 L247.9996,207.0391 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="159.9994" x="247.9996" y="245.1875"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139.9994" x="257.9996" y="268.1826">&#23384;&#22312;&#25968;&#25454;&#19981;&#19968;&#33268;&#30340;&#21487;&#33021;</text><path d="M197.9996,235.1875 L207.9996,235.1875 C222.9996,235.1875 222.9996,263.3359 237.9996,263.3359 L247.9996,263.3359 " fill="none" style="stroke:#181818;stroke-width:1;"/><path d="M99.9997,150.7422 L109.9997,150.7422 C124.9997,150.7422 124.9997,235.1875 139.9997,235.1875 L149.9997,235.1875 " fill="none" style="stroke:#181818;stroke-width:1;"/><!--SRC=[JOzTIm9158RlvrVCPI99YKHr9Ma5fYILtOywoP0xA-kiqLtV6lXHXBIL1O5HDwP1BRef_PcTMVUglz2OHTqTtlESvvmJp3EaCONGj89om0ljxgbhcEBvJTJERAi9l3Bg6yv1JrPUo3i3jrWJPiczQl9ANSQYVknUDvph8pvuuHULRsfe7ejBKpGiNZ9viSOxvxPrmi_AelNW6k_y_kwVo_wu7RRtHRqZAi-yRzdTlM7nLUmzZXOxVUjtiNFJvUsURLNzyT1dloo1uU50tBpQW-fOrZ9uusciiRkLiMPqLQqjGH34yh-V7q4yYoXBnAAmWBKyKIcSzlcd_07VN18pD3EHeDjKtQ4mfIevaiMG4GLxmCHoF0hpggwbC4oJFDD8KcTos0CYg83Wcav7t3nSpM4Q2Q_y1d2H5eYcKWLJ1YARiJzW9Z2vG1XSnvey0sx6G1Xl8JtBv4HAJHEQcOU9ZQN9MH15DAEZZ7HZ2aAgz6gxihV-1G00]--></g></svg>
<h2 id="TCC（Try-Confirm-Cancel）"><a href="#TCC（Try-Confirm-Cancel）" class="headerlink" title="TCC（Try-Confirm/Cancel）"></a>TCC（Try-Confirm/Cancel）</h2><p>TCC取自<strong>T</strong>ry、<strong>C</strong>onfirm以及<strong>C</strong>ancel的首字母，是一种在应用层上实现的“两阶段提交”，因而对业务有一定的侵入性。此外，不同于传统的两阶段提交对数据库事务的依赖，TCC的资源锁定、提交以及回滚均需自行实现，所以事务参与者需要实现Try、Confirm以及Cancel接口，且均需实现幂等以避免重复执行产生错误。</p>
<table>
<thead>
<tr>
<th>应用层2PC</th>
<th>TCC</th>
<th>协调者（Coordinator）</th>
<th>参与者（Participant）</th>
</tr>
</thead>
<tbody><tr>
<td>1. 准备阶段</td>
<td>Try阶段</td>
<td>调用所有参与者的Try接口</td>
<td>执行Try具体逻辑：业务检查（一致性），锁定资源（准隔离性）</td>
</tr>
<tr>
<td>2.0. 提交阶段</td>
<td></td>
<td>判断所有的Try接口调用结果。<br/>若所有调用结果均为成功，则进入Confirm阶段，否则进入Cancel阶段</td>
<td></td>
</tr>
<tr>
<td>2.1. 提交阶段[成功]</td>
<td>Confirm阶段</td>
<td>调用所有参与者的Confirm接口</td>
<td>执行Confirm具体逻辑：执行业务逻辑（不做业务检查且只使用Try阶段锁定的资源）</td>
</tr>
<tr>
<td>2.2. 提交阶段[失败]</td>
<td>Cancel阶段</td>
<td>调用所有参与者的Cancel接口</td>
<td>执行Cancel具体逻辑：释放Try阶段锁定的资源</td>
</tr>
</tbody></table>
<h3 id="TCC的异常场景"><a href="#TCC的异常场景" class="headerlink" title="TCC的异常场景"></a>TCC的异常场景</h3><h4 id="幂等问题"><a href="#幂等问题" class="headerlink" title="幂等问题"></a>幂等问题</h4><p>分布式系统中，网络异常不可避免，所以需要通过重试来完成接口调用。若Try、Confirm以及Cancel接口不支持幂等，则会造成资源的重复锁定、使用以及释放，进而引发严重的业务问题。</p>
<h4 id="空回滚"><a href="#空回滚" class="headerlink" title="空回滚"></a>空回滚</h4><p>参与者的Try接口响应由于网络异常使得协调者成功接收到，因而协调者发出Cancel命令进行回滚。如果此时参与者的Try接口尚未执行，却收到了Cancel接口调用请求，则导致空回滚。</p>
<h4 id="资源悬挂"><a href="#资源悬挂" class="headerlink" title="资源悬挂"></a>资源悬挂</h4><p>在上述“空回滚”问题的基础上，若参与者的Try接口最终成功执行了，由于晚于Cancel接口的执行，那么就会导致Try接口锁定的资源迟迟不释放，便导致了资源悬挂问题。</p>
<p>解决上述3个问题的方案比较简单，参与者通过事务状态跟踪表来实现一个状态机，若接口调用不符合状态机的入口状态要求，表示请求非法，则拒绝执行。</p>
<h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" data-diagram-type="MINDMAP" height="303px" preserveAspectRatio="none" style="width:448px;height:303px;background:#FFFFFF;" version="1.1" viewBox="0 0 448 303" width="448px" zoomAndPan="magnify"><defs/><g><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="48.1025" x="10" y="132.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28.1025" x="20" y="155.5889">TCC</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="47.9999" x="108.1025" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27.9999" x="118.1025" y="99.292">&#20248;&#28857;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="75.9998" x="206.1024" y="20"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55.9998" x="216.1024" y="42.9951">&#24615;&#33021;&#36739;&#39640;</text><path d="M156.1024,94.4453 L166.1024,94.4453 C181.1024,94.4453 181.1024,38.1484 196.1024,38.1484 L206.1024,38.1484 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="229.9991" x="206.1024" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209.9991" x="216.1024" y="99.292">&#36991;&#20813;&#36164;&#28304;&#30340;&#38271;&#26399;&#38145;&#23450;&#20197;&#21450;&#38459;&#22622;&#31561;&#24453;</text><path d="M156.1024,94.4453 L166.1024,94.4453 C181.1024,94.4453 181.1024,94.4453 196.1024,94.4453 L206.1024,94.4453 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="145.9995" x="206.1024" y="132.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125.9995" x="216.1024" y="155.5889">&#20445;&#35777;&#25968;&#25454;&#26368;&#32456;&#19968;&#33268;&#24615;</text><path d="M156.1024,94.4453 L166.1024,94.4453 C181.1024,94.4453 181.1024,150.7422 196.1024,150.7422 L206.1024,150.7422 " fill="none" style="stroke:#181818;stroke-width:1;"/><path d="M58.1025,150.7422 L68.1025,150.7422 C83.1025,150.7422 83.1025,94.4453 98.1025,94.4453 L108.1025,94.4453 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="47.9999" x="108.1025" y="217.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27.9999" x="118.1025" y="240.0342">&#32570;&#28857;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="103.9996" x="206.1024" y="188.8906"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83.9996" x="216.1024" y="211.8857">&#19994;&#21153;&#20405;&#20837;&#24615;&#24378;</text><path d="M156.1024,235.1875 L166.1024,235.1875 C181.1024,235.1875 181.1024,207.0391 196.1024,207.0391 L206.1024,207.0391 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="131.9995" x="206.1024" y="245.1875"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111.9995" x="216.1024" y="268.1826">&#24320;&#21457;&#21450;&#32500;&#25252;&#25104;&#26412;&#39640;</text><path d="M156.1024,235.1875 L166.1024,235.1875 C181.1024,235.1875 181.1024,263.3359 196.1024,263.3359 L206.1024,263.3359 " fill="none" style="stroke:#181818;stroke-width:1;"/><path d="M58.1025,150.7422 L68.1025,150.7422 C83.1025,150.7422 83.1025,235.1875 98.1025,235.1875 L108.1025,235.1875 " fill="none" style="stroke:#181818;stroke-width:1;"/><!--SRC=[HOxFIm917CNlyrVCKH6b9A8yIVO3J4bIkuywoP0xAxkpHhSrbKmG2n94h12A3fLrC2ZTz9_PcTtzBngbwFRbVT_xl1VL6TAOGcX1GMKGW9bO30G2qBPwplcNl09Gc4zkxTkTrRpdtbBmgdFUQBiVTJ6vSlfrhpiNWtllfif7VNlwo3ijhpVbmpldzPBF6ik4FRzrtwgY-oxQ8p4mdMdJ_ZJTYx54ByeSQ_9NPd_sUMjeppvuur5-kJLPojmoUUTQeftfMBGUHFDA35uMUw9O3lyT3r8bH5ascO0LhEb4fN0r55u9huKsSvYXTL-Mdb3rbCAygfH92KD65Em7lhrK0kggeUKnB12TQIHdC1dsWpYg87Xeq8Kl0W_AcCQtz_y4k4ChH5EfWYa3yQFals5zBRX564nZJSw0HqcmZO-HKM8oaLSBX1OZC9lP3Mw01A950nKb6rCGKoLNEvE_z0y0]--></g></svg>
<h2 id="Saga"><a href="#Saga" class="headerlink" title="Saga"></a>Saga</h2><p>Saga是一些可交错运行的子事务集合，而这些子事务分解自一个长事务，其中的每个子事务都是一个保持数据库一致性的真实事务，并且都有对应的补偿动作以撤销子事务造成的结果。相较于TCC，免去了资源锁定阶段而直接执行子事务，若执行失败则进行恢复，从这个角度看，可以粗犷地这么理解：”Saga = TCC - T”。另外，同TCC一样，子事务的执行操作以及恢复操作也都应支持幂等。</p>
<h3 id="协调模式"><a href="#协调模式" class="headerlink" title="协调模式"></a>协调模式</h3><p>Saga执行事务的顺序称为Saga的协调逻辑，共有以下2种模式</p>
<h4 id="Choreography"><a href="#Choreography" class="headerlink" title="Choreography"></a>Choreography</h4><p>Saga参与者之间通过消息机制，订阅彼此事件以触发相应的事务操作。由于没有协调者，参与者之间需自行相互协调。该模式适用于参与者较少且无需复杂协调逻辑的场景。<br><img data-src="saga-choreography.png" alt="Choreography"></p>
<h4 id="Orchestration"><a href="#Orchestration" class="headerlink" title="Orchestration"></a>Orchestration</h4><p>定义一个协调者，负责参与者之间的协调工作。事务执行的命令从协调者发起，按照事务的逻辑顺序请求参与者，并接收到参与者的反馈后，协调者再向其他参与者发起调用请求。该模式适用于涉及协调逻辑较为复杂、参与者随时间推移不断添加的场景。<br><img data-src="saga-orchestration.png" alt="Orchestration"></p>
<h3 id="恢复策略"><a href="#恢复策略" class="headerlink" title="恢复策略"></a>恢复策略</h3><p>共有以下2种恢复策略，一种是迎难而上，而另外一种则是“打退堂鼓”。</p>
<h4 id="向前恢复（Forward-Recovery）"><a href="#向前恢复（Forward-Recovery）" class="headerlink" title="向前恢复（Forward Recovery）"></a>向前恢复（Forward Recovery）</h4><p>若子事务执行失败，则尝试重试，以积极主动的心态去推进分布式事务的执行。</p>
<p>以下图为例，当子事务T3执行失败时，T3尝试重试，成功后继续执行后续的子事务T4、T5：</p>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" data-diagram-type="ACTIVITY" height="352px" preserveAspectRatio="none" style="width:163px;height:352px;background:#FFFFFF;" version="1.1" viewBox="0 0 163 352" width="163px" zoomAndPan="magnify"><defs/><g><ellipse cx="28.4824" cy="20" fill="#222222" rx="10" ry="10" style="stroke:#222222;stroke-width:1;"/><rect fill="#98FB98" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="34.9648" x="11" y="50"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="14.9648" x="21" y="71.1387">T1</text><rect fill="#98FB98" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="34.9648" x="11" y="103.9688"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="14.9648" x="21" y="125.1074">T2</text><path d="M65.9648,162.3555 L65.9648,170.9219 L45.9648,174.9219 L65.9648,178.9219 L65.9648,187.4883 A0,0 0 0 0 65.9648,187.4883 L151.9649,187.4883 A0,0 0 0 0 151.9649,187.4883 L151.9649,172.3555 L141.9649,162.3555 L65.9648,162.3555 A0,0 0 0 0 65.9648,162.3555 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M141.9649,162.3555 L141.9649,172.3555 L151.9649,172.3555 L141.9649,162.3555 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="65.0001" x="71.9648" y="179.4224">&#22833;&#36133;&#21518;&#37325;&#35797;</text><rect fill="#FFC0CB" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="34.9648" x="11" y="157.9375"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="14.9648" x="21" y="179.0762">T3</text><rect fill="#98FB98" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="34.9648" x="11" y="211.9063"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="14.9648" x="21" y="233.0449">T4</text><rect fill="#98FB98" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="34.9648" x="11" y="265.875"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="14.9648" x="21" y="287.0137">T5</text><ellipse cx="28.4824" cy="330.8438" fill="none" rx="11" ry="11" style="stroke:#222222;stroke-width:1;"/><ellipse cx="28.4824" cy="330.8438" fill="#222222" rx="6" ry="6" style="stroke:#222222;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="28.4824" x2="28.4824" y1="30" y2="50"/><polygon fill="#181818" points="24.4824,40,28.4824,50,32.4824,40,28.4824,44" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="28.4824" x2="28.4824" y1="83.9688" y2="103.9688"/><polygon fill="#181818" points="24.4824,93.9688,28.4824,103.9688,32.4824,93.9688,28.4824,97.9688" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="28.4824" x2="28.4824" y1="137.9375" y2="157.9375"/><polygon fill="#181818" points="24.4824,147.9375,28.4824,157.9375,32.4824,147.9375,28.4824,151.9375" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="28.4824" x2="28.4824" y1="191.9063" y2="211.9063"/><polygon fill="#181818" points="24.4824,201.9063,28.4824,211.9063,32.4824,201.9063,28.4824,205.9063" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="28.4824" x2="28.4824" y1="245.875" y2="265.875"/><polygon fill="#181818" points="24.4824,255.875,28.4824,265.875,32.4824,255.875,28.4824,259.875" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="28.4824" x2="28.4824" y1="299.8438" y2="319.8438"/><polygon fill="#181818" points="24.4824,309.8438,28.4824,319.8438,32.4824,309.8438,28.4824,313.8438" style="stroke:#181818;stroke-width:1;"/><!--SRC=[Aov9B2hXKYv8p4bDBqfDpRCACRH6uHg1k9bvsLOXnjPSUVabgGf5cUaP9LOAJvTiVB5bwTC9VI_RUr-idugYoGJL35DhhkAI_080]--></g></svg>

<h4 id="向后恢复（Backward-Recovery）"><a href="#向后恢复（Backward-Recovery）" class="headerlink" title="向后恢复（Backward Recovery）"></a>向后恢复（Backward Recovery）</h4><p>若子事务执行失败，则尝试撤销，针对已执行完成的子事务，按照由近及远的顺序逐一撤销，以消除部分已执行的子事务所造成的影响。</p>
<p>以下图为例，当子事务T3执行失败时，依次撤销T3、T2、T1子事务所做的操作：</p>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" data-diagram-type="ACTIVITY" height="406px" preserveAspectRatio="none" style="width:190px;height:406px;background:#FFFFFF;" version="1.1" viewBox="0 0 190 406" width="190px" zoomAndPan="magnify"><defs/><g><ellipse cx="29.0068" cy="20" fill="#222222" rx="10" ry="10" style="stroke:#222222;stroke-width:1;"/><rect fill="#98FB98" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="34.9648" x="11.5244" y="50"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="14.9648" x="21.5244" y="71.1387">T1</text><rect fill="#98FB98" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="34.9648" x="11.5244" y="103.9688"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="14.9648" x="21.5244" y="125.1074">T2</text><path d="M66.4893,162.3555 L66.4893,170.9219 L46.4893,174.9219 L66.4893,178.9219 L66.4893,187.4883 A0,0 0 0 0 66.4893,187.4883 L178.4894,187.4883 A0,0 0 0 0 178.4894,187.4883 L178.4894,172.3555 L168.4894,162.3555 L66.4893,162.3555 A0,0 0 0 0 66.4893,162.3555 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M168.4894,162.3555 L168.4894,172.3555 L178.4894,172.3555 L168.4894,162.3555 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="91.0001" x="72.4893" y="179.4224">&#22833;&#36133;&#21518;&#36880;&#19968;&#25764;&#38144;</text><rect fill="#FFC0CB" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="34.9648" x="11.5244" y="157.9375"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="14.9648" x="21.5244" y="179.0762">T3</text><path d="M67.0137,216.3242 L67.0137,224.8906 L47.0137,228.8906 L67.0137,232.8906 L67.0137,241.457 A0,0 0 0 0 67.0137,241.457 L130.2256,241.457 A0,0 0 0 0 130.2256,241.457 L130.2256,226.3242 L120.2256,216.3242 L67.0137,216.3242 A0,0 0 0 0 67.0137,216.3242 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M120.2256,216.3242 L120.2256,226.3242 L130.2256,226.3242 L120.2256,216.3242 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="42.2119" x="73.0137" y="233.3911">&#25764;&#38144;T3</text><rect fill="#F1F1F1" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="36.0137" x="11" y="211.9063"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="16.0137" x="21" y="233.0449">C3</text><path d="M67.0137,270.293 L67.0137,278.8594 L47.0137,282.8594 L67.0137,286.8594 L67.0137,295.4258 A0,0 0 0 0 67.0137,295.4258 L130.2256,295.4258 A0,0 0 0 0 130.2256,295.4258 L130.2256,280.293 L120.2256,270.293 L67.0137,270.293 A0,0 0 0 0 67.0137,270.293 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M120.2256,270.293 L120.2256,280.293 L130.2256,280.293 L120.2256,270.293 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="42.2119" x="73.0137" y="287.3599">&#25764;&#38144;T2</text><rect fill="#F1F1F1" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="36.0137" x="11" y="265.875"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="16.0137" x="21" y="287.0137">C2</text><path d="M67.0137,324.2617 L67.0137,332.8281 L47.0137,336.8281 L67.0137,340.8281 L67.0137,349.3945 A0,0 0 0 0 67.0137,349.3945 L130.2256,349.3945 A0,0 0 0 0 130.2256,349.3945 L130.2256,334.2617 L120.2256,324.2617 L67.0137,324.2617 A0,0 0 0 0 67.0137,324.2617 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><path d="M120.2256,324.2617 L120.2256,334.2617 L130.2256,334.2617 L120.2256,324.2617 " fill="#FEFFDD" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="42.2119" x="73.0137" y="341.3286">&#25764;&#38144;T1</text><rect fill="#F1F1F1" height="33.9688" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:0.5;" width="36.0137" x="11" y="319.8438"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="16.0137" x="21" y="340.9824">C1</text><ellipse cx="29.0068" cy="384.8125" fill="none" rx="11" ry="11" style="stroke:#222222;stroke-width:1;"/><ellipse cx="29.0068" cy="384.8125" fill="#222222" rx="6" ry="6" style="stroke:#222222;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="29.0068" x2="29.0068" y1="30" y2="50"/><polygon fill="#181818" points="25.0068,40,29.0068,50,33.0068,40,29.0068,44" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="29.0068" x2="29.0068" y1="83.9688" y2="103.9688"/><polygon fill="#181818" points="25.0068,93.9688,29.0068,103.9688,33.0068,93.9688,29.0068,97.9688" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="29.0068" x2="29.0068" y1="137.9375" y2="157.9375"/><polygon fill="#181818" points="25.0068,147.9375,29.0068,157.9375,33.0068,147.9375,29.0068,151.9375" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="29.0068" x2="29.0068" y1="191.9063" y2="211.9063"/><polygon fill="#181818" points="25.0068,201.9063,29.0068,211.9063,33.0068,201.9063,29.0068,205.9063" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="29.0068" x2="29.0068" y1="245.875" y2="265.875"/><polygon fill="#181818" points="25.0068,255.875,29.0068,265.875,33.0068,255.875,29.0068,259.875" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="29.0068" x2="29.0068" y1="299.8438" y2="319.8438"/><polygon fill="#181818" points="25.0068,309.8438,29.0068,319.8438,33.0068,309.8438,29.0068,313.8438" style="stroke:#181818;stroke-width:1;"/><line style="stroke:#181818;stroke-width:1;" x1="29.0068" x2="29.0068" y1="353.8125" y2="373.8125"/><polygon fill="#181818" points="25.0068,363.8125,29.0068,373.8125,33.0068,363.8125,29.0068,367.8125" style="stroke:#181818;stroke-width:1;"/><!--SRC=[Aov9B2hXKYv8p4bDBqfDpRCACRH6uHg1k9bvsLOXnjPSUVabgGf5cUaP9LOAJvTiVB5bwTC9VIyR9ZpPqV1iqfANKnguh9pHb474Guo1CaPOPOo0CePOPGovYalo2m00]--></g></svg>
<h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" data-diagram-type="MINDMAP" height="303px" preserveAspectRatio="none" style="width:426px;height:303px;background:#FFFFFF;" version="1.1" viewBox="0 0 426 303" width="426px" zoomAndPan="magnify"><defs/><g><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="54.9316" x="10" y="132.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="34.9316" x="20" y="155.5889">Saga</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="47.9999" x="114.9316" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27.9999" x="124.9316" y="99.292">&#20248;&#28857;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="201.9992" x="212.9315" y="20"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181.9992" x="222.9315" y="42.9951">&#19968;&#38454;&#27573;&#25552;&#20132;&#23376;&#20107;&#21153;&#65292;&#24615;&#33021;&#36739;&#39640;</text><path d="M162.9315,94.4453 L172.9315,94.4453 C187.9315,94.4453 187.9315,38.1484 202.9315,38.1484 L212.9315,38.1484 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="173.9993" x="212.9315" y="76.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153.9993" x="222.9315" y="99.292">&#21442;&#19982;&#32773;&#24322;&#27493;&#25191;&#34892;&#65292;&#21534;&#21520;&#39640;</text><path d="M162.9315,94.4453 L172.9315,94.4453 C187.9315,94.4453 187.9315,94.4453 202.9315,94.4453 L212.9315,94.4453 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="131.9995" x="212.9315" y="132.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111.9995" x="222.9315" y="155.5889">&#34917;&#20607;&#25805;&#20316;&#26131;&#20110;&#23454;&#29616;</text><path d="M162.9315,94.4453 L172.9315,94.4453 C187.9315,94.4453 187.9315,150.7422 202.9315,150.7422 L212.9315,150.7422 " fill="none" style="stroke:#181818;stroke-width:1;"/><path d="M64.9316,150.7422 L74.9316,150.7422 C89.9316,150.7422 89.9316,94.4453 104.9316,94.4453 L114.9316,94.4453 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="47.9999" x="114.9316" y="217.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27.9999" x="124.9316" y="240.0342">&#32570;&#28857;</text><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="103.9996" x="212.9315" y="188.8906"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83.9996" x="222.9315" y="211.8857">&#19994;&#21153;&#20405;&#20837;&#24615;&#24378;</text><path d="M162.9315,235.1875 L172.9315,235.1875 C187.9315,235.1875 187.9315,207.0391 202.9315,207.0391 L212.9315,207.0391 " fill="none" style="stroke:#181818;stroke-width:1;"/><rect fill="#F1F1F1" height="36.2969" rx="12.5" ry="12.5" style="stroke:#181818;stroke-width:1.5;" width="103.9996" x="212.9315" y="245.1875"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83.9996" x="222.9315" y="268.1826">&#19981;&#20445;&#35777;&#38548;&#31163;&#24615;</text><path d="M162.9315,235.1875 L172.9315,235.1875 C187.9315,235.1875 187.9315,263.3359 202.9315,263.3359 L212.9315,263.3359 " fill="none" style="stroke:#181818;stroke-width:1;"/><path d="M64.9316,150.7422 L74.9316,150.7422 C89.9316,150.7422 89.9316,235.1875 104.9316,235.1875 L114.9316,235.1875 " fill="none" style="stroke:#181818;stroke-width:1;"/><!--SRC=[HOzDIm9H58RtzrVSfI9AYKYvah82Kv9CzrUz3PUSEp9pnsZd1ougly0M8YK8cOlGsXXce_wPkUEuwYzq3SNDuN3EyxxlEK6D8PN9X6Pab0Ck64SI0YuND8tsilGjEj5E2glsbpKQMuscENtbGr4V-KFlrwXQXO5Tdjdpykgz_S_oHicSrEr2XHibQzYtxWTshof0tkpoPdDBsRq-BowiLisSFLljbZcjyr5tMVzS1o-DwIwu8sBC-PXN-YA96zFDk6OkNkoFughpj7px4HiGnEB-pGyWbaMK9Q8HcCUgHXGAzptUFQ_FSvZ23FaT2Nf3bLiAqugS8raC6P6n4pZEOX6eARgQnZ13DAQIbCw4s0d2A8_WfKxNN01Uv30DXywt0tX2yqHLg8mf0-5aT0VuVUuZmc0Sg-8Cc8o24Bv6UfO9HLh942e5OEBgr7q08eXAEfA4DwRWM16-wftOnVy0]--></g></svg>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="Notes.on.Data.Base.Operating.Systems.pdf">Notes on Data Base Operating Systems</a></li>
<li><a href="NonBlocking.Commit.Protocols.pdf">NonBlocking Commit Protocols</a></li>
<li><a href="Life.beyond.Distributed.Transactions%EF%BC%9Aan.Apostate%E2%80%99s.Opinion.pdf">Life beyond Distributed Transactions: an Apostate’s Opinion</a></li>
<li><a href="SAGAS.pdf">SAGAS</a><!-- ![testImg](Contents.jpg) --></li>
</ul>
]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Distributed Transaction</tag>
        <tag>2PC</tag>
        <tag>3PC</tag>
        <tag>TCC</tag>
        <tag>Saga</tag>
      </tags>
  </entry>
</search>
